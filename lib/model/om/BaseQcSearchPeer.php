<?php

/**
 * Base static class for performing query and update operations on the 'Qc_Search' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Nov  2 23:34:50 2014
 *
 * @package    lib.model.om
 */
abstract class BaseQcSearchPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'Qc_Search';

	/** the related Propel class for this table */
	const OM_CLASS = 'QcSearch';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.QcSearch';

	/** the related TableMap class for this table */
	const TM_CLASS = 'QcSearchTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 108;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the SUBMISSIONID field */
	const SUBMISSIONID = '0';

	/** the column name for the QCSTATUS field */
	const QCSTATUS = 'Qc_Search.QCSTATUS';

	/** the column name for the MAILSENDINGSTATUS field */
	const MAILSENDINGSTATUS = 'Qc_Search.MAILSENDINGSTATUS';

	/** the column name for the SUBMISSIONNUMBER field */
	const SUBMISSIONNUMBER = 'Qc_Search.SUBMISSIONNUMBER';

	/** the column name for the DBNUMBER field */
	const DBNUMBER = 'Qc_Search.DBNUMBER';

	/** the column name for the REINSUREDCOMPANY field */
	const REINSUREDCOMPANY = 'Qc_Search.REINSUREDCOMPANY';

	/** the column name for the DBANAME field */
	const DBANAME = 'Qc_Search.DBANAME';

	/** the column name for the EFFECTIVEDATE field */
	const EFFECTIVEDATE = 'Qc_Search.EFFECTIVEDATE';

	/** the column name for the EXPIRYDATE field */
	const EXPIRYDATE = 'Qc_Search.EXPIRYDATE';

	/** the column name for the BROKERCODE field */
	const BROKERCODE = 'Qc_Search.BROKERCODE';

	/** the column name for the BROKERCONTACTPERSON field */
	const BROKERCONTACTPERSON = 'Qc_Search.BROKERCONTACTPERSON';

	/** the column name for the BROKERCONTACTPERSONEMAIL field */
	const BROKERCONTACTPERSONEMAIL = 'Qc_Search.BROKERCONTACTPERSONEMAIL';

	/** the column name for the BROKERCONTACTPERSONNUMBER field */
	const BROKERCONTACTPERSONNUMBER = 'Qc_Search.BROKERCONTACTPERSONNUMBER';

	/** the column name for the BROKERCONTACTPERSONMOBILE field */
	const BROKERCONTACTPERSONMOBILE = 'Qc_Search.BROKERCONTACTPERSONMOBILE';

	/** the column name for the TOTALINSUREDVALUE field */
	const TOTALINSUREDVALUE = 'Qc_Search.TOTALINSUREDVALUE';

	/** the column name for the TOTALINSUREDVALUEINUSD field */
	const TOTALINSUREDVALUEINUSD = 'Qc_Search.TOTALINSUREDVALUEINUSD';

	/** the column name for the DATEOFRECIEVINGBYBROKER field */
	const DATEOFRECIEVINGBYBROKER = 'Qc_Search.DATEOFRECIEVINGBYBROKER';

	/** the column name for the DATEOFRECIEVINGBYINDIA field */
	const DATEOFRECIEVINGBYINDIA = 'Qc_Search.DATEOFRECIEVINGBYINDIA';

	/** the column name for the NEWRENEWAL field */
	const NEWRENEWAL = 'Qc_Search.NEWRENEWAL';

	/** the column name for the INSUREDNAME field */
	const INSUREDNAME = 'Qc_Search.INSUREDNAME';

	/** the column name for the INSUREDADDRESS1 field */
	const INSUREDADDRESS1 = 'Qc_Search.INSUREDADDRESS1';

	/** the column name for the INSUREDCITY field */
	const INSUREDCITY = 'Qc_Search.INSUREDCITY';

	/** the column name for the INSUREDSTATE field */
	const INSUREDSTATE = 'Qc_Search.INSUREDSTATE';

	/** the column name for the INSUREDCOUNTRY field */
	const INSUREDCOUNTRY = 'Qc_Search.INSUREDCOUNTRY';

	/** the column name for the INSUREDZIPCODE field */
	const INSUREDZIPCODE = 'Qc_Search.INSUREDZIPCODE';

	/** the column name for the ADVISENID field */
	const ADVISENID = 'Qc_Search.ADVISENID';

	/** the column name for the INSUREDCONTACTPERSON field */
	const INSUREDCONTACTPERSON = 'Qc_Search.INSUREDCONTACTPERSON';

	/** the column name for the INSUREDCONTACTPERSONEMAIL field */
	const INSUREDCONTACTPERSONEMAIL = 'Qc_Search.INSUREDCONTACTPERSONEMAIL';

	/** the column name for the INSUREDCONTACTPERSONPHONENUMBER field */
	const INSUREDCONTACTPERSONPHONENUMBER = 'Qc_Search.INSUREDCONTACTPERSONPHONENUMBER';

	/** the column name for the INSUREDCONTACTPERSONMOBILENUMBER field */
	const INSUREDCONTACTPERSONMOBILENUMBER = 'Qc_Search.INSUREDCONTACTPERSONMOBILENUMBER';

	/** the column name for the ALTERNATIVEADDRESS1 field */
	const ALTERNATIVEADDRESS1 = 'Qc_Search.ALTERNATIVEADDRESS1';

	/** the column name for the ALTERNATIVECITY field */
	const ALTERNATIVECITY = 'Qc_Search.ALTERNATIVECITY';

	/** the column name for the ALTERNATIVESTATE field */
	const ALTERNATIVESTATE = 'Qc_Search.ALTERNATIVESTATE';

	/** the column name for the ALTERNATIVECOUNTRY field */
	const ALTERNATIVECOUNTRY = 'Qc_Search.ALTERNATIVECOUNTRY';

	/** the column name for the ALTERNATIVEZIPCODE field */
	const ALTERNATIVEZIPCODE = 'Qc_Search.ALTERNATIVEZIPCODE';

	/** the column name for the UNDERWRITERNAME field */
	const UNDERWRITERNAME = 'Qc_Search.UNDERWRITERNAME';

	/** the column name for the PROPERTYTYPE field */
	const PROPERTYTYPE = 'Qc_Search.PROPERTYTYPE';

	/** the column name for the PROPERTYLINESUBTYPE field */
	const PROPERTYLINESUBTYPE = 'Qc_Search.PROPERTYLINESUBTYPE';

	/** the column name for the SECTIONCODE field */
	const SECTIONCODE = 'Qc_Search.SECTIONCODE';

	/** the column name for the PROFITCODE field */
	const PROFITCODE = 'Qc_Search.PROFITCODE';

	/** the column name for the CURRENTSTATUS field */
	const CURRENTSTATUS = 'Qc_Search.CURRENTSTATUS';

	/** the column name for the PROCESSDATE field */
	const PROCESSDATE = 'Qc_Search.PROCESSDATE';

	/** the column name for the GROSSPREMIUM field */
	const GROSSPREMIUM = 'Qc_Search.GROSSPREMIUM';

	/** the column name for the STATUSLIMIT field */
	const STATUSLIMIT = 'Qc_Search.STATUSLIMIT';

	/** the column name for the ATTACHMENTPOINT field */
	const ATTACHMENTPOINT = 'Qc_Search.ATTACHMENTPOINT';

	/** the column name for the GROSSPREMIUMINUSD field */
	const GROSSPREMIUMINUSD = 'Qc_Search.GROSSPREMIUMINUSD';

	/** the column name for the LIMITINUSD field */
	const LIMITINUSD = 'Qc_Search.LIMITINUSD';

	/** the column name for the ATTACHMENTPOINTINUSD field */
	const ATTACHMENTPOINTINUSD = 'Qc_Search.ATTACHMENTPOINTINUSD';

	/** the column name for the EXCHANGERATE field */
	const EXCHANGERATE = 'Qc_Search.EXCHANGERATE';

	/** the column name for the EXCHANGEDATE field */
	const EXCHANGEDATE = 'Qc_Search.EXCHANGEDATE';

	/** the column name for the CURRENCY field */
	const CURRENCY = 'Qc_Search.CURRENCY';

	/** the column name for the REASONCODE field */
	const REASONCODE = 'Qc_Search.REASONCODE';

	/** the column name for the REASONCODEMEANING field */
	const REASONCODEMEANING = 'Qc_Search.REASONCODEMEANING';

	/** the column name for the CABCOMPANIES field */
	const CABCOMPANIES = 'Qc_Search.CABCOMPANIES';

	/** the column name for the PROJECTNAME field */
	const PROJECTNAME = 'Qc_Search.PROJECTNAME';

	/** the column name for the PROJECTCONTRACTORNAME field */
	const PROJECTCONTRACTORNAME = 'Qc_Search.PROJECTCONTRACTORNAME';

	/** the column name for the PROJECTOWNERNAME field */
	const PROJECTOWNERNAME = 'Qc_Search.PROJECTOWNERNAME';

	/** the column name for the PROJECTADDRESSLINE1 field */
	const PROJECTADDRESSLINE1 = 'Qc_Search.PROJECTADDRESSLINE1';

	/** the column name for the PROJECTCITY field */
	const PROJECTCITY = 'Qc_Search.PROJECTCITY';

	/** the column name for the PROJECTSTATE field */
	const PROJECTSTATE = 'Qc_Search.PROJECTSTATE';

	/** the column name for the PROJECTCOUNTRY field */
	const PROJECTCOUNTRY = 'Qc_Search.PROJECTCOUNTRY';

	/** the column name for the BIDSITUATION field */
	const BIDSITUATION = 'Qc_Search.BIDSITUATION';

	/** the column name for the BROKERNAME field */
	const BROKERNAME = 'Qc_Search.BROKERNAME';

	/** the column name for the BROKERTYPE field */
	const BROKERTYPE = 'Qc_Search.BROKERTYPE';

	/** the column name for the BROKERCITY field */
	const BROKERCITY = 'Qc_Search.BROKERCITY';

	/** the column name for the BROKERSTATE field */
	const BROKERSTATE = 'Qc_Search.BROKERSTATE';

	/** the column name for the BROKERCONTACTPERSONSTREETADDRESS field */
	const BROKERCONTACTPERSONSTREETADDRESS = 'Qc_Search.BROKERCONTACTPERSONSTREETADDRESS';

	/** the column name for the BROKERCONTACTPERSONZIPCODE field */
	const BROKERCONTACTPERSONZIPCODE = 'Qc_Search.BROKERCONTACTPERSONZIPCODE';

	/** the column name for the BROKERCOUNTRY field */
	const BROKERCOUNTRY = 'Qc_Search.BROKERCOUNTRY';

	/** the column name for the BRANCHOFFICE field */
	const BRANCHOFFICE = 'Qc_Search.BRANCHOFFICE';

	/** the column name for the RISKPROFILE field */
	const RISKPROFILE = 'Qc_Search.RISKPROFILE';

	/** the column name for the INSUREDSUBMISSIONDATE field */
	const INSUREDSUBMISSIONDATE = 'Qc_Search.INSUREDSUBMISSIONDATE';

	/** the column name for the INSUREDQUOTEDUEDATE field */
	const INSUREDQUOTEDUEDATE = 'Qc_Search.INSUREDQUOTEDUEDATE';

	/** the column name for the BINDDATE field */
	const BINDDATE = 'Qc_Search.BINDDATE';

	/** the column name for the RENEWABLE field */
	const RENEWABLE = 'Qc_Search.RENEWABLE';

	/** the column name for the DATEOFRENEWAL field */
	const DATEOFRENEWAL = 'Qc_Search.DATEOFRENEWAL';

	/** the column name for the POLICYTYPE field */
	const POLICYTYPE = 'Qc_Search.POLICYTYPE';

	/** the column name for the DIRECTASSUMED field */
	const DIRECTASSUMED = 'Qc_Search.DIRECTASSUMED';

	/** the column name for the COMPANYPAPER field */
	const COMPANYPAPER = 'Qc_Search.COMPANYPAPER';

	/** the column name for the COMPANYPAPERNUMBER field */
	const COMPANYPAPERNUMBER = 'Qc_Search.COMPANYPAPERNUMBER';

	/** the column name for the COVERAGE field */
	const COVERAGE = 'Qc_Search.COVERAGE';

	/** the column name for the POLICYNUMBER field */
	const POLICYNUMBER = 'Qc_Search.POLICYNUMBER';

	/** the column name for the SUFFIX field */
	const SUFFIX = 'Qc_Search.SUFFIX';

	/** the column name for the TRANSACTIONNUMBER field */
	const TRANSACTIONNUMBER = 'Qc_Search.TRANSACTIONNUMBER';

	/** the column name for the ADMITTEDNONADMITTED field */
	const ADMITTEDNONADMITTED = 'Qc_Search.ADMITTEDNONADMITTED';

	/** the column name for the LAYEROFLIMITINLOCALCURRENCY field */
	const LAYEROFLIMITINLOCALCURRENCY = 'Qc_Search.LAYEROFLIMITINLOCALCURRENCY';

	/** the column name for the LAYEROFLIMITINUSD field */
	const LAYEROFLIMITINUSD = 'Qc_Search.LAYEROFLIMITINUSD';

	/** the column name for the PERCENTAGEOFLAYER field */
	const PERCENTAGEOFLAYER = 'Qc_Search.PERCENTAGEOFLAYER';

	/** the column name for the SELFINSUREDRETENTIONINLOCALCURRENCY field */
	const SELFINSUREDRETENTIONINLOCALCURRENCY = 'Qc_Search.SELFINSUREDRETENTIONINLOCALCURRENCY';

	/** the column name for the SELFINSUREDRETENTIONINUSD field */
	const SELFINSUREDRETENTIONINUSD = 'Qc_Search.SELFINSUREDRETENTIONINUSD';

	/** the column name for the POLICYCOMMPERCENTAGE field */
	const POLICYCOMMPERCENTAGE = 'Qc_Search.POLICYCOMMPERCENTAGE';

	/** the column name for the POLICYCOMMINLOCALCURRENCY field */
	const POLICYCOMMINLOCALCURRENCY = 'Qc_Search.POLICYCOMMINLOCALCURRENCY';

	/** the column name for the POLICYCOMMINUSD field */
	const POLICYCOMMINUSD = 'Qc_Search.POLICYCOMMINUSD';

	/** the column name for the PERMIUMNETOFCOMMINLOCALCURRENCY field */
	const PERMIUMNETOFCOMMINLOCALCURRENCY = 'Qc_Search.PERMIUMNETOFCOMMINLOCALCURRENCY';

	/** the column name for the PERMIUMNETOFCOMMINUSD field */
	const PERMIUMNETOFCOMMINUSD = 'Qc_Search.PERMIUMNETOFCOMMINUSD';

	/** the column name for the NAICCODE field */
	const NAICCODE = 'Qc_Search.NAICCODE';

	/** the column name for the NAICTITLE field */
	const NAICTITLE = 'Qc_Search.NAICTITLE';

	/** the column name for the SICCODE field */
	const SICCODE = 'Qc_Search.SICCODE';

	/** the column name for the SICTITLE field */
	const SICTITLE = 'Qc_Search.SICTITLE';

	/** the column name for the MASTERPOLICYNUMBER field */
	const MASTERPOLICYNUMBER = 'Qc_Search.MASTERPOLICYNUMBER';

	/** the column name for the OFRCREPORT field */
	const OFRCREPORT = 'Qc_Search.OFRCREPORT';

	/** the column name for the RETAILBROKERNAME field */
	const RETAILBROKERNAME = 'Qc_Search.RETAILBROKERNAME';

	/** the column name for the RETAILBROKERCOUNTRY field */
	const RETAILBROKERCOUNTRY = 'Qc_Search.RETAILBROKERCOUNTRY';

	/** the column name for the RETAILBROKERSTATE field */
	const RETAILBROKERSTATE = 'Qc_Search.RETAILBROKERSTATE';

	/** the column name for the RETAILBROKERCITY field */
	const RETAILBROKERCITY = 'Qc_Search.RETAILBROKERCITY';

	/** the column name for the CREATEDDATE field */
	const CREATEDDATE = 'Qc_Search.CREATEDDATE';

	/** the column name for the MODIFIEDDATE field */
	const MODIFIEDDATE = 'Qc_Search.MODIFIEDDATE';

	/** the column name for the ID field */
	const ID = 'Qc_Search.SUBMISSIONID';

	/**
	 * An identiy map to hold any loaded instances of QcSearch objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array QcSearch[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Submissionid', 'Qcstatus', 'Mailsendingstatus', 'Submissionnumber', 'Dbnumber', 'Reinsuredcompany', 'Dbaname', 'Effectivedate', 'Expirydate', 'Brokercode', 'Brokercontactperson', 'Brokercontactpersonemail', 'Brokercontactpersonnumber', 'Brokercontactpersonmobile', 'Totalinsuredvalue', 'Totalinsuredvalueinusd', 'Dateofrecievingbybroker', 'Dateofrecievingbyindia', 'Newrenewal', 'Insuredname', 'Insuredaddress1', 'Insuredcity', 'Insuredstate', 'Insuredcountry', 'Insuredzipcode', 'Advisenid', 'Insuredcontactperson', 'Insuredcontactpersonemail', 'Insuredcontactpersonphonenumber', 'Insuredcontactpersonmobilenumber', 'Alternativeaddress1', 'Alternativecity', 'Alternativestate', 'Alternativecountry', 'Alternativezipcode', 'Underwritername', 'Propertytype', 'Propertylinesubtype', 'Sectioncode', 'Profitcode', 'Currentstatus', 'Processdate', 'Grosspremium', 'Statuslimit', 'Attachmentpoint', 'Grosspremiuminusd', 'Limitinusd', 'Attachmentpointinusd', 'Exchangerate', 'Exchangedate', 'Currency', 'Reasoncode', 'Reasoncodemeaning', 'Cabcompanies', 'Projectname', 'Projectcontractorname', 'Projectownername', 'Projectaddressline1', 'Projectcity', 'Projectstate', 'Projectcountry', 'Bidsituation', 'Brokername', 'Brokertype', 'Brokercity', 'Brokerstate', 'Brokercontactpersonstreetaddress', 'Brokercontactpersonzipcode', 'Brokercountry', 'Branchoffice', 'Riskprofile', 'Insuredsubmissiondate', 'Insuredquoteduedate', 'Binddate', 'Renewable', 'Dateofrenewal', 'Policytype', 'Directassumed', 'Companypaper', 'Companypapernumber', 'Coverage', 'Policynumber', 'Suffix', 'Transactionnumber', 'Admittednonadmitted', 'Layeroflimitinlocalcurrency', 'Layeroflimitinusd', 'Percentageoflayer', 'Selfinsuredretentioninlocalcurrency', 'Selfinsuredretentioninusd', 'Policycommpercentage', 'Policycomminlocalcurrency', 'Policycomminusd', 'Permiumnetofcomminlocalcurrency', 'Permiumnetofcomminusd', 'Naiccode', 'Naictitle', 'Siccode', 'Sictitle', 'Masterpolicynumber', 'Ofrcreport', 'Retailbrokername', 'Retailbrokercountry', 'Retailbrokerstate', 'Retailbrokercity', 'Createddate', 'Modifieddate', 'Id', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('submissionid', 'qcstatus', 'mailsendingstatus', 'submissionnumber', 'dbnumber', 'reinsuredcompany', 'dbaname', 'effectivedate', 'expirydate', 'brokercode', 'brokercontactperson', 'brokercontactpersonemail', 'brokercontactpersonnumber', 'brokercontactpersonmobile', 'totalinsuredvalue', 'totalinsuredvalueinusd', 'dateofrecievingbybroker', 'dateofrecievingbyindia', 'newrenewal', 'insuredname', 'insuredaddress1', 'insuredcity', 'insuredstate', 'insuredcountry', 'insuredzipcode', 'advisenid', 'insuredcontactperson', 'insuredcontactpersonemail', 'insuredcontactpersonphonenumber', 'insuredcontactpersonmobilenumber', 'alternativeaddress1', 'alternativecity', 'alternativestate', 'alternativecountry', 'alternativezipcode', 'underwritername', 'propertytype', 'propertylinesubtype', 'sectioncode', 'profitcode', 'currentstatus', 'processdate', 'grosspremium', 'statuslimit', 'attachmentpoint', 'grosspremiuminusd', 'limitinusd', 'attachmentpointinusd', 'exchangerate', 'exchangedate', 'currency', 'reasoncode', 'reasoncodemeaning', 'cabcompanies', 'projectname', 'projectcontractorname', 'projectownername', 'projectaddressline1', 'projectcity', 'projectstate', 'projectcountry', 'bidsituation', 'brokername', 'brokertype', 'brokercity', 'brokerstate', 'brokercontactpersonstreetaddress', 'brokercontactpersonzipcode', 'brokercountry', 'branchoffice', 'riskprofile', 'insuredsubmissiondate', 'insuredquoteduedate', 'binddate', 'renewable', 'dateofrenewal', 'policytype', 'directassumed', 'companypaper', 'companypapernumber', 'coverage', 'policynumber', 'suffix', 'transactionnumber', 'admittednonadmitted', 'layeroflimitinlocalcurrency', 'layeroflimitinusd', 'percentageoflayer', 'selfinsuredretentioninlocalcurrency', 'selfinsuredretentioninusd', 'policycommpercentage', 'policycomminlocalcurrency', 'policycomminusd', 'permiumnetofcomminlocalcurrency', 'permiumnetofcomminusd', 'naiccode', 'naictitle', 'siccode', 'sictitle', 'masterpolicynumber', 'ofrcreport', 'retailbrokername', 'retailbrokercountry', 'retailbrokerstate', 'retailbrokercity', 'createddate', 'modifieddate', 'id', ),
		BasePeer::TYPE_COLNAME => array (self::SUBMISSIONID, self::QCSTATUS, self::MAILSENDINGSTATUS, self::SUBMISSIONNUMBER, self::DBNUMBER, self::REINSUREDCOMPANY, self::DBANAME, self::EFFECTIVEDATE, self::EXPIRYDATE, self::BROKERCODE, self::BROKERCONTACTPERSON, self::BROKERCONTACTPERSONEMAIL, self::BROKERCONTACTPERSONNUMBER, self::BROKERCONTACTPERSONMOBILE, self::TOTALINSUREDVALUE, self::TOTALINSUREDVALUEINUSD, self::DATEOFRECIEVINGBYBROKER, self::DATEOFRECIEVINGBYINDIA, self::NEWRENEWAL, self::INSUREDNAME, self::INSUREDADDRESS1, self::INSUREDCITY, self::INSUREDSTATE, self::INSUREDCOUNTRY, self::INSUREDZIPCODE, self::ADVISENID, self::INSUREDCONTACTPERSON, self::INSUREDCONTACTPERSONEMAIL, self::INSUREDCONTACTPERSONPHONENUMBER, self::INSUREDCONTACTPERSONMOBILENUMBER, self::ALTERNATIVEADDRESS1, self::ALTERNATIVECITY, self::ALTERNATIVESTATE, self::ALTERNATIVECOUNTRY, self::ALTERNATIVEZIPCODE, self::UNDERWRITERNAME, self::PROPERTYTYPE, self::PROPERTYLINESUBTYPE, self::SECTIONCODE, self::PROFITCODE, self::CURRENTSTATUS, self::PROCESSDATE, self::GROSSPREMIUM, self::STATUSLIMIT, self::ATTACHMENTPOINT, self::GROSSPREMIUMINUSD, self::LIMITINUSD, self::ATTACHMENTPOINTINUSD, self::EXCHANGERATE, self::EXCHANGEDATE, self::CURRENCY, self::REASONCODE, self::REASONCODEMEANING, self::CABCOMPANIES, self::PROJECTNAME, self::PROJECTCONTRACTORNAME, self::PROJECTOWNERNAME, self::PROJECTADDRESSLINE1, self::PROJECTCITY, self::PROJECTSTATE, self::PROJECTCOUNTRY, self::BIDSITUATION, self::BROKERNAME, self::BROKERTYPE, self::BROKERCITY, self::BROKERSTATE, self::BROKERCONTACTPERSONSTREETADDRESS, self::BROKERCONTACTPERSONZIPCODE, self::BROKERCOUNTRY, self::BRANCHOFFICE, self::RISKPROFILE, self::INSUREDSUBMISSIONDATE, self::INSUREDQUOTEDUEDATE, self::BINDDATE, self::RENEWABLE, self::DATEOFRENEWAL, self::POLICYTYPE, self::DIRECTASSUMED, self::COMPANYPAPER, self::COMPANYPAPERNUMBER, self::COVERAGE, self::POLICYNUMBER, self::SUFFIX, self::TRANSACTIONNUMBER, self::ADMITTEDNONADMITTED, self::LAYEROFLIMITINLOCALCURRENCY, self::LAYEROFLIMITINUSD, self::PERCENTAGEOFLAYER, self::SELFINSUREDRETENTIONINLOCALCURRENCY, self::SELFINSUREDRETENTIONINUSD, self::POLICYCOMMPERCENTAGE, self::POLICYCOMMINLOCALCURRENCY, self::POLICYCOMMINUSD, self::PERMIUMNETOFCOMMINLOCALCURRENCY, self::PERMIUMNETOFCOMMINUSD, self::NAICCODE, self::NAICTITLE, self::SICCODE, self::SICTITLE, self::MASTERPOLICYNUMBER, self::OFRCREPORT, self::RETAILBROKERNAME, self::RETAILBROKERCOUNTRY, self::RETAILBROKERSTATE, self::RETAILBROKERCITY, self::CREATEDDATE, self::MODIFIEDDATE, self::ID, ),
		BasePeer::TYPE_FIELDNAME => array ('SubmissionId', 'QcStatus', 'MailSendingStatus', 'SubmissionNumber', 'DbNumber', 'ReinsuredCompany', 'DbaName', 'EffectiveDate', 'ExpiryDate', 'BrokerCode', 'BrokerContactPerson', 'BrokerContactPersonEmail', 'BrokerContactPersonNumber', 'BrokerContactPersonMobile', 'TotalInsuredValue', 'TotalInsuredValueInUSD', 'DateOfRecievingByBroker', 'DateOfrecievingByIndia', 'NewRenewal', 'InsuredName', 'InsuredAddress1', 'InsuredCity', 'InsuredState', 'InsuredCountry', 'InsuredZipCode', 'AdvisenId', 'InsuredContactPerson', 'InsuredContactPersonEmail', 'InsuredContactPersonPhoneNumber', 'InsuredContactPersonMobileNumber', 'AlternativeAddress1', 'AlternativeCity', 'AlternativeState', 'AlternativeCountry', 'AlternativeZipCode', 'UnderWriterName', 'PropertyType', 'PropertyLineSubType', 'SectionCode', 'ProfitCode', 'CurrentStatus', 'ProcessDate', 'GrossPremium', 'StatusLimit', 'AttachmentPoint', 'GrossPremiumInUSD', 'LimitInUSD', 'AttachmentPointInUSD', 'ExchangeRate', 'ExchangeDate', 'Currency', 'ReasonCode', 'ReasonCodeMeaning', 'CabCompanies', 'ProjectName', 'ProjectContractorName', 'ProjectOwnerName', 'ProjectAddressLine1', 'ProjectCity', 'ProjectState', 'ProjectCountry', 'BidSituation', 'BrokerName', 'BrokerType', 'BrokerCity', 'BrokerState', 'BrokerContactPersonStreetAddress', 'BrokerContactPersonZipCode', 'BrokerCountry', 'BranchOffice', 'RiskProfile', 'InsuredSubmissionDate', 'InsuredQuoteDueDate', 'BindDate', 'Renewable', 'DateOfRenewal', 'PolicyType', 'DirectAssumed', 'CompanyPaper', 'CompanyPaperNumber', 'Coverage', 'PolicyNumber', 'Suffix', 'TransactionNumber', 'AdmittedNonAdmitted', 'LayerofLimitInLocalCurrency', 'LayerofLimitInUSD', 'PercentageofLayer', 'SelfInsuredRetentionInLocalCurrency', 'SelfInsuredRetentionInUSD', 'PolicyCommPercentage', 'PolicyCommInLocalCurrency', 'PolicyCommInUSD', 'PermiumNetofCommInLocalCurrency', 'PermiumNetofCommInUSD', 'NAICCode', 'NAICTitle', 'SICCode', 'SICTitle', 'MasterPolicyNumber', 'OfrcReport', 'RetailBrokerName', 'RetailBrokerCountry', 'RetailBrokerState', 'RetailBrokerCity', 'CreatedDate', 'modifiedDate', 'id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Submissionid' => 0, 'Qcstatus' => 1, 'Mailsendingstatus' => 2, 'Submissionnumber' => 3, 'Dbnumber' => 4, 'Reinsuredcompany' => 5, 'Dbaname' => 6, 'Effectivedate' => 7, 'Expirydate' => 8, 'Brokercode' => 9, 'Brokercontactperson' => 10, 'Brokercontactpersonemail' => 11, 'Brokercontactpersonnumber' => 12, 'Brokercontactpersonmobile' => 13, 'Totalinsuredvalue' => 14, 'Totalinsuredvalueinusd' => 15, 'Dateofrecievingbybroker' => 16, 'Dateofrecievingbyindia' => 17, 'Newrenewal' => 18, 'Insuredname' => 19, 'Insuredaddress1' => 20, 'Insuredcity' => 21, 'Insuredstate' => 22, 'Insuredcountry' => 23, 'Insuredzipcode' => 24, 'Advisenid' => 25, 'Insuredcontactperson' => 26, 'Insuredcontactpersonemail' => 27, 'Insuredcontactpersonphonenumber' => 28, 'Insuredcontactpersonmobilenumber' => 29, 'Alternativeaddress1' => 30, 'Alternativecity' => 31, 'Alternativestate' => 32, 'Alternativecountry' => 33, 'Alternativezipcode' => 34, 'Underwritername' => 35, 'Propertytype' => 36, 'Propertylinesubtype' => 37, 'Sectioncode' => 38, 'Profitcode' => 39, 'Currentstatus' => 40, 'Processdate' => 41, 'Grosspremium' => 42, 'Statuslimit' => 43, 'Attachmentpoint' => 44, 'Grosspremiuminusd' => 45, 'Limitinusd' => 46, 'Attachmentpointinusd' => 47, 'Exchangerate' => 48, 'Exchangedate' => 49, 'Currency' => 50, 'Reasoncode' => 51, 'Reasoncodemeaning' => 52, 'Cabcompanies' => 53, 'Projectname' => 54, 'Projectcontractorname' => 55, 'Projectownername' => 56, 'Projectaddressline1' => 57, 'Projectcity' => 58, 'Projectstate' => 59, 'Projectcountry' => 60, 'Bidsituation' => 61, 'Brokername' => 62, 'Brokertype' => 63, 'Brokercity' => 64, 'Brokerstate' => 65, 'Brokercontactpersonstreetaddress' => 66, 'Brokercontactpersonzipcode' => 67, 'Brokercountry' => 68, 'Branchoffice' => 69, 'Riskprofile' => 70, 'Insuredsubmissiondate' => 71, 'Insuredquoteduedate' => 72, 'Binddate' => 73, 'Renewable' => 74, 'Dateofrenewal' => 75, 'Policytype' => 76, 'Directassumed' => 77, 'Companypaper' => 78, 'Companypapernumber' => 79, 'Coverage' => 80, 'Policynumber' => 81, 'Suffix' => 82, 'Transactionnumber' => 83, 'Admittednonadmitted' => 84, 'Layeroflimitinlocalcurrency' => 85, 'Layeroflimitinusd' => 86, 'Percentageoflayer' => 87, 'Selfinsuredretentioninlocalcurrency' => 88, 'Selfinsuredretentioninusd' => 89, 'Policycommpercentage' => 90, 'Policycomminlocalcurrency' => 91, 'Policycomminusd' => 92, 'Permiumnetofcomminlocalcurrency' => 93, 'Permiumnetofcomminusd' => 94, 'Naiccode' => 95, 'Naictitle' => 96, 'Siccode' => 97, 'Sictitle' => 98, 'Masterpolicynumber' => 99, 'Ofrcreport' => 100, 'Retailbrokername' => 101, 'Retailbrokercountry' => 102, 'Retailbrokerstate' => 103, 'Retailbrokercity' => 104, 'Createddate' => 105, 'Modifieddate' => 106, 'Id' => 107, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('submissionid' => 0, 'qcstatus' => 1, 'mailsendingstatus' => 2, 'submissionnumber' => 3, 'dbnumber' => 4, 'reinsuredcompany' => 5, 'dbaname' => 6, 'effectivedate' => 7, 'expirydate' => 8, 'brokercode' => 9, 'brokercontactperson' => 10, 'brokercontactpersonemail' => 11, 'brokercontactpersonnumber' => 12, 'brokercontactpersonmobile' => 13, 'totalinsuredvalue' => 14, 'totalinsuredvalueinusd' => 15, 'dateofrecievingbybroker' => 16, 'dateofrecievingbyindia' => 17, 'newrenewal' => 18, 'insuredname' => 19, 'insuredaddress1' => 20, 'insuredcity' => 21, 'insuredstate' => 22, 'insuredcountry' => 23, 'insuredzipcode' => 24, 'advisenid' => 25, 'insuredcontactperson' => 26, 'insuredcontactpersonemail' => 27, 'insuredcontactpersonphonenumber' => 28, 'insuredcontactpersonmobilenumber' => 29, 'alternativeaddress1' => 30, 'alternativecity' => 31, 'alternativestate' => 32, 'alternativecountry' => 33, 'alternativezipcode' => 34, 'underwritername' => 35, 'propertytype' => 36, 'propertylinesubtype' => 37, 'sectioncode' => 38, 'profitcode' => 39, 'currentstatus' => 40, 'processdate' => 41, 'grosspremium' => 42, 'statuslimit' => 43, 'attachmentpoint' => 44, 'grosspremiuminusd' => 45, 'limitinusd' => 46, 'attachmentpointinusd' => 47, 'exchangerate' => 48, 'exchangedate' => 49, 'currency' => 50, 'reasoncode' => 51, 'reasoncodemeaning' => 52, 'cabcompanies' => 53, 'projectname' => 54, 'projectcontractorname' => 55, 'projectownername' => 56, 'projectaddressline1' => 57, 'projectcity' => 58, 'projectstate' => 59, 'projectcountry' => 60, 'bidsituation' => 61, 'brokername' => 62, 'brokertype' => 63, 'brokercity' => 64, 'brokerstate' => 65, 'brokercontactpersonstreetaddress' => 66, 'brokercontactpersonzipcode' => 67, 'brokercountry' => 68, 'branchoffice' => 69, 'riskprofile' => 70, 'insuredsubmissiondate' => 71, 'insuredquoteduedate' => 72, 'binddate' => 73, 'renewable' => 74, 'dateofrenewal' => 75, 'policytype' => 76, 'directassumed' => 77, 'companypaper' => 78, 'companypapernumber' => 79, 'coverage' => 80, 'policynumber' => 81, 'suffix' => 82, 'transactionnumber' => 83, 'admittednonadmitted' => 84, 'layeroflimitinlocalcurrency' => 85, 'layeroflimitinusd' => 86, 'percentageoflayer' => 87, 'selfinsuredretentioninlocalcurrency' => 88, 'selfinsuredretentioninusd' => 89, 'policycommpercentage' => 90, 'policycomminlocalcurrency' => 91, 'policycomminusd' => 92, 'permiumnetofcomminlocalcurrency' => 93, 'permiumnetofcomminusd' => 94, 'naiccode' => 95, 'naictitle' => 96, 'siccode' => 97, 'sictitle' => 98, 'masterpolicynumber' => 99, 'ofrcreport' => 100, 'retailbrokername' => 101, 'retailbrokercountry' => 102, 'retailbrokerstate' => 103, 'retailbrokercity' => 104, 'createddate' => 105, 'modifieddate' => 106, 'id' => 107, ),
		BasePeer::TYPE_COLNAME => array (self::SUBMISSIONID => 0, self::QCSTATUS => 1, self::MAILSENDINGSTATUS => 2, self::SUBMISSIONNUMBER => 3, self::DBNUMBER => 4, self::REINSUREDCOMPANY => 5, self::DBANAME => 6, self::EFFECTIVEDATE => 7, self::EXPIRYDATE => 8, self::BROKERCODE => 9, self::BROKERCONTACTPERSON => 10, self::BROKERCONTACTPERSONEMAIL => 11, self::BROKERCONTACTPERSONNUMBER => 12, self::BROKERCONTACTPERSONMOBILE => 13, self::TOTALINSUREDVALUE => 14, self::TOTALINSUREDVALUEINUSD => 15, self::DATEOFRECIEVINGBYBROKER => 16, self::DATEOFRECIEVINGBYINDIA => 17, self::NEWRENEWAL => 18, self::INSUREDNAME => 19, self::INSUREDADDRESS1 => 20, self::INSUREDCITY => 21, self::INSUREDSTATE => 22, self::INSUREDCOUNTRY => 23, self::INSUREDZIPCODE => 24, self::ADVISENID => 25, self::INSUREDCONTACTPERSON => 26, self::INSUREDCONTACTPERSONEMAIL => 27, self::INSUREDCONTACTPERSONPHONENUMBER => 28, self::INSUREDCONTACTPERSONMOBILENUMBER => 29, self::ALTERNATIVEADDRESS1 => 30, self::ALTERNATIVECITY => 31, self::ALTERNATIVESTATE => 32, self::ALTERNATIVECOUNTRY => 33, self::ALTERNATIVEZIPCODE => 34, self::UNDERWRITERNAME => 35, self::PROPERTYTYPE => 36, self::PROPERTYLINESUBTYPE => 37, self::SECTIONCODE => 38, self::PROFITCODE => 39, self::CURRENTSTATUS => 40, self::PROCESSDATE => 41, self::GROSSPREMIUM => 42, self::STATUSLIMIT => 43, self::ATTACHMENTPOINT => 44, self::GROSSPREMIUMINUSD => 45, self::LIMITINUSD => 46, self::ATTACHMENTPOINTINUSD => 47, self::EXCHANGERATE => 48, self::EXCHANGEDATE => 49, self::CURRENCY => 50, self::REASONCODE => 51, self::REASONCODEMEANING => 52, self::CABCOMPANIES => 53, self::PROJECTNAME => 54, self::PROJECTCONTRACTORNAME => 55, self::PROJECTOWNERNAME => 56, self::PROJECTADDRESSLINE1 => 57, self::PROJECTCITY => 58, self::PROJECTSTATE => 59, self::PROJECTCOUNTRY => 60, self::BIDSITUATION => 61, self::BROKERNAME => 62, self::BROKERTYPE => 63, self::BROKERCITY => 64, self::BROKERSTATE => 65, self::BROKERCONTACTPERSONSTREETADDRESS => 66, self::BROKERCONTACTPERSONZIPCODE => 67, self::BROKERCOUNTRY => 68, self::BRANCHOFFICE => 69, self::RISKPROFILE => 70, self::INSUREDSUBMISSIONDATE => 71, self::INSUREDQUOTEDUEDATE => 72, self::BINDDATE => 73, self::RENEWABLE => 74, self::DATEOFRENEWAL => 75, self::POLICYTYPE => 76, self::DIRECTASSUMED => 77, self::COMPANYPAPER => 78, self::COMPANYPAPERNUMBER => 79, self::COVERAGE => 80, self::POLICYNUMBER => 81, self::SUFFIX => 82, self::TRANSACTIONNUMBER => 83, self::ADMITTEDNONADMITTED => 84, self::LAYEROFLIMITINLOCALCURRENCY => 85, self::LAYEROFLIMITINUSD => 86, self::PERCENTAGEOFLAYER => 87, self::SELFINSUREDRETENTIONINLOCALCURRENCY => 88, self::SELFINSUREDRETENTIONINUSD => 89, self::POLICYCOMMPERCENTAGE => 90, self::POLICYCOMMINLOCALCURRENCY => 91, self::POLICYCOMMINUSD => 92, self::PERMIUMNETOFCOMMINLOCALCURRENCY => 93, self::PERMIUMNETOFCOMMINUSD => 94, self::NAICCODE => 95, self::NAICTITLE => 96, self::SICCODE => 97, self::SICTITLE => 98, self::MASTERPOLICYNUMBER => 99, self::OFRCREPORT => 100, self::RETAILBROKERNAME => 101, self::RETAILBROKERCOUNTRY => 102, self::RETAILBROKERSTATE => 103, self::RETAILBROKERCITY => 104, self::CREATEDDATE => 105, self::MODIFIEDDATE => 106, self::ID => 107, ),
		BasePeer::TYPE_FIELDNAME => array ('SubmissionId' => 0, 'QcStatus' => 1, 'MailSendingStatus' => 2, 'SubmissionNumber' => 3, 'DbNumber' => 4, 'ReinsuredCompany' => 5, 'DbaName' => 6, 'EffectiveDate' => 7, 'ExpiryDate' => 8, 'BrokerCode' => 9, 'BrokerContactPerson' => 10, 'BrokerContactPersonEmail' => 11, 'BrokerContactPersonNumber' => 12, 'BrokerContactPersonMobile' => 13, 'TotalInsuredValue' => 14, 'TotalInsuredValueInUSD' => 15, 'DateOfRecievingByBroker' => 16, 'DateOfrecievingByIndia' => 17, 'NewRenewal' => 18, 'InsuredName' => 19, 'InsuredAddress1' => 20, 'InsuredCity' => 21, 'InsuredState' => 22, 'InsuredCountry' => 23, 'InsuredZipCode' => 24, 'AdvisenId' => 25, 'InsuredContactPerson' => 26, 'InsuredContactPersonEmail' => 27, 'InsuredContactPersonPhoneNumber' => 28, 'InsuredContactPersonMobileNumber' => 29, 'AlternativeAddress1' => 30, 'AlternativeCity' => 31, 'AlternativeState' => 32, 'AlternativeCountry' => 33, 'AlternativeZipCode' => 34, 'UnderWriterName' => 35, 'PropertyType' => 36, 'PropertyLineSubType' => 37, 'SectionCode' => 38, 'ProfitCode' => 39, 'CurrentStatus' => 40, 'ProcessDate' => 41, 'GrossPremium' => 42, 'StatusLimit' => 43, 'AttachmentPoint' => 44, 'GrossPremiumInUSD' => 45, 'LimitInUSD' => 46, 'AttachmentPointInUSD' => 47, 'ExchangeRate' => 48, 'ExchangeDate' => 49, 'Currency' => 50, 'ReasonCode' => 51, 'ReasonCodeMeaning' => 52, 'CabCompanies' => 53, 'ProjectName' => 54, 'ProjectContractorName' => 55, 'ProjectOwnerName' => 56, 'ProjectAddressLine1' => 57, 'ProjectCity' => 58, 'ProjectState' => 59, 'ProjectCountry' => 60, 'BidSituation' => 61, 'BrokerName' => 62, 'BrokerType' => 63, 'BrokerCity' => 64, 'BrokerState' => 65, 'BrokerContactPersonStreetAddress' => 66, 'BrokerContactPersonZipCode' => 67, 'BrokerCountry' => 68, 'BranchOffice' => 69, 'RiskProfile' => 70, 'InsuredSubmissionDate' => 71, 'InsuredQuoteDueDate' => 72, 'BindDate' => 73, 'Renewable' => 74, 'DateOfRenewal' => 75, 'PolicyType' => 76, 'DirectAssumed' => 77, 'CompanyPaper' => 78, 'CompanyPaperNumber' => 79, 'Coverage' => 80, 'PolicyNumber' => 81, 'Suffix' => 82, 'TransactionNumber' => 83, 'AdmittedNonAdmitted' => 84, 'LayerofLimitInLocalCurrency' => 85, 'LayerofLimitInUSD' => 86, 'PercentageofLayer' => 87, 'SelfInsuredRetentionInLocalCurrency' => 88, 'SelfInsuredRetentionInUSD' => 89, 'PolicyCommPercentage' => 90, 'PolicyCommInLocalCurrency' => 91, 'PolicyCommInUSD' => 92, 'PermiumNetofCommInLocalCurrency' => 93, 'PermiumNetofCommInUSD' => 94, 'NAICCode' => 95, 'NAICTitle' => 96, 'SICCode' => 97, 'SICTitle' => 98, 'MasterPolicyNumber' => 99, 'OfrcReport' => 100, 'RetailBrokerName' => 101, 'RetailBrokerCountry' => 102, 'RetailBrokerState' => 103, 'RetailBrokerCity' => 104, 'CreatedDate' => 105, 'modifiedDate' => 106, 'id' => 107, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. QcSearchPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(QcSearchPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(QcSearchPeer::SUBMISSIONID);
		$criteria->addSelectColumn(QcSearchPeer::QCSTATUS);
		$criteria->addSelectColumn(QcSearchPeer::MAILSENDINGSTATUS);
		$criteria->addSelectColumn(QcSearchPeer::SUBMISSIONNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::DBNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::REINSUREDCOMPANY);
		$criteria->addSelectColumn(QcSearchPeer::DBANAME);
		$criteria->addSelectColumn(QcSearchPeer::EFFECTIVEDATE);
		$criteria->addSelectColumn(QcSearchPeer::EXPIRYDATE);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCODE);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCONTACTPERSON);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCONTACTPERSONEMAIL);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCONTACTPERSONNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCONTACTPERSONMOBILE);
		$criteria->addSelectColumn(QcSearchPeer::TOTALINSUREDVALUE);
		$criteria->addSelectColumn(QcSearchPeer::TOTALINSUREDVALUEINUSD);
		$criteria->addSelectColumn(QcSearchPeer::DATEOFRECIEVINGBYBROKER);
		$criteria->addSelectColumn(QcSearchPeer::DATEOFRECIEVINGBYINDIA);
		$criteria->addSelectColumn(QcSearchPeer::NEWRENEWAL);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDNAME);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDADDRESS1);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDCITY);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDSTATE);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDCOUNTRY);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDZIPCODE);
		$criteria->addSelectColumn(QcSearchPeer::ADVISENID);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDCONTACTPERSON);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDCONTACTPERSONEMAIL);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDCONTACTPERSONPHONENUMBER);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDCONTACTPERSONMOBILENUMBER);
		$criteria->addSelectColumn(QcSearchPeer::ALTERNATIVEADDRESS1);
		$criteria->addSelectColumn(QcSearchPeer::ALTERNATIVECITY);
		$criteria->addSelectColumn(QcSearchPeer::ALTERNATIVESTATE);
		$criteria->addSelectColumn(QcSearchPeer::ALTERNATIVECOUNTRY);
		$criteria->addSelectColumn(QcSearchPeer::ALTERNATIVEZIPCODE);
		$criteria->addSelectColumn(QcSearchPeer::UNDERWRITERNAME);
		$criteria->addSelectColumn(QcSearchPeer::PROPERTYTYPE);
		$criteria->addSelectColumn(QcSearchPeer::PROPERTYLINESUBTYPE);
		$criteria->addSelectColumn(QcSearchPeer::SECTIONCODE);
		$criteria->addSelectColumn(QcSearchPeer::PROFITCODE);
		$criteria->addSelectColumn(QcSearchPeer::CURRENTSTATUS);
		$criteria->addSelectColumn(QcSearchPeer::PROCESSDATE);
		$criteria->addSelectColumn(QcSearchPeer::GROSSPREMIUM);
		$criteria->addSelectColumn(QcSearchPeer::STATUSLIMIT);
		$criteria->addSelectColumn(QcSearchPeer::ATTACHMENTPOINT);
		$criteria->addSelectColumn(QcSearchPeer::GROSSPREMIUMINUSD);
		$criteria->addSelectColumn(QcSearchPeer::LIMITINUSD);
		$criteria->addSelectColumn(QcSearchPeer::ATTACHMENTPOINTINUSD);
		$criteria->addSelectColumn(QcSearchPeer::EXCHANGERATE);
		$criteria->addSelectColumn(QcSearchPeer::EXCHANGEDATE);
		$criteria->addSelectColumn(QcSearchPeer::CURRENCY);
		$criteria->addSelectColumn(QcSearchPeer::REASONCODE);
		$criteria->addSelectColumn(QcSearchPeer::REASONCODEMEANING);
		$criteria->addSelectColumn(QcSearchPeer::CABCOMPANIES);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTNAME);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTCONTRACTORNAME);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTOWNERNAME);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTADDRESSLINE1);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTCITY);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTSTATE);
		$criteria->addSelectColumn(QcSearchPeer::PROJECTCOUNTRY);
		$criteria->addSelectColumn(QcSearchPeer::BIDSITUATION);
		$criteria->addSelectColumn(QcSearchPeer::BROKERNAME);
		$criteria->addSelectColumn(QcSearchPeer::BROKERTYPE);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCITY);
		$criteria->addSelectColumn(QcSearchPeer::BROKERSTATE);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCONTACTPERSONSTREETADDRESS);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCONTACTPERSONZIPCODE);
		$criteria->addSelectColumn(QcSearchPeer::BROKERCOUNTRY);
		$criteria->addSelectColumn(QcSearchPeer::BRANCHOFFICE);
		$criteria->addSelectColumn(QcSearchPeer::RISKPROFILE);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDSUBMISSIONDATE);
		$criteria->addSelectColumn(QcSearchPeer::INSUREDQUOTEDUEDATE);
		$criteria->addSelectColumn(QcSearchPeer::BINDDATE);
		$criteria->addSelectColumn(QcSearchPeer::RENEWABLE);
		$criteria->addSelectColumn(QcSearchPeer::DATEOFRENEWAL);
		$criteria->addSelectColumn(QcSearchPeer::POLICYTYPE);
		$criteria->addSelectColumn(QcSearchPeer::DIRECTASSUMED);
		$criteria->addSelectColumn(QcSearchPeer::COMPANYPAPER);
		$criteria->addSelectColumn(QcSearchPeer::COMPANYPAPERNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::COVERAGE);
		$criteria->addSelectColumn(QcSearchPeer::POLICYNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::SUFFIX);
		$criteria->addSelectColumn(QcSearchPeer::TRANSACTIONNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::ADMITTEDNONADMITTED);
		$criteria->addSelectColumn(QcSearchPeer::LAYEROFLIMITINLOCALCURRENCY);
		$criteria->addSelectColumn(QcSearchPeer::LAYEROFLIMITINUSD);
		$criteria->addSelectColumn(QcSearchPeer::PERCENTAGEOFLAYER);
		$criteria->addSelectColumn(QcSearchPeer::SELFINSUREDRETENTIONINLOCALCURRENCY);
		$criteria->addSelectColumn(QcSearchPeer::SELFINSUREDRETENTIONINUSD);
		$criteria->addSelectColumn(QcSearchPeer::POLICYCOMMPERCENTAGE);
		$criteria->addSelectColumn(QcSearchPeer::POLICYCOMMINLOCALCURRENCY);
		$criteria->addSelectColumn(QcSearchPeer::POLICYCOMMINUSD);
		$criteria->addSelectColumn(QcSearchPeer::PERMIUMNETOFCOMMINLOCALCURRENCY);
		$criteria->addSelectColumn(QcSearchPeer::PERMIUMNETOFCOMMINUSD);
		$criteria->addSelectColumn(QcSearchPeer::NAICCODE);
		$criteria->addSelectColumn(QcSearchPeer::NAICTITLE);
		$criteria->addSelectColumn(QcSearchPeer::SICCODE);
		$criteria->addSelectColumn(QcSearchPeer::SICTITLE);
		$criteria->addSelectColumn(QcSearchPeer::MASTERPOLICYNUMBER);
		$criteria->addSelectColumn(QcSearchPeer::OFRCREPORT);
		$criteria->addSelectColumn(QcSearchPeer::RETAILBROKERNAME);
		$criteria->addSelectColumn(QcSearchPeer::RETAILBROKERCOUNTRY);
		$criteria->addSelectColumn(QcSearchPeer::RETAILBROKERSTATE);
		$criteria->addSelectColumn(QcSearchPeer::RETAILBROKERCITY);
		$criteria->addSelectColumn(QcSearchPeer::CREATEDDATE);
		$criteria->addSelectColumn(QcSearchPeer::MODIFIEDDATE);
		$criteria->addSelectColumn(QcSearchPeer::ID);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(QcSearchPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			QcSearchPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseQcSearchPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     QcSearch
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = QcSearchPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return QcSearchPeer::populateObjects(QcSearchPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			QcSearchPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseQcSearchPeer', $criteria, $con);
		}


		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      QcSearch $value A QcSearch object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(QcSearch $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A QcSearch object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof QcSearch) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or QcSearch object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     QcSearch Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to Qc_Search
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 107] === null) {
			return null;
		}
		return (string) $row[$startcol + 107];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = QcSearchPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = QcSearchPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = QcSearchPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				QcSearchPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseQcSearchPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseQcSearchPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new QcSearchTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? QcSearchPeer::CLASS_DEFAULT : QcSearchPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a QcSearch or Criteria object.
	 *
	 * @param      mixed $values Criteria or QcSearch object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseQcSearchPeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseQcSearchPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from QcSearch object
		}

		if ($criteria->containsKey(QcSearchPeer::ID) && $criteria->keyContainsValue(QcSearchPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.QcSearchPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseQcSearchPeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseQcSearchPeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a QcSearch or Criteria object.
	 *
	 * @param      mixed $values Criteria or QcSearch object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseQcSearchPeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseQcSearchPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(QcSearchPeer::ID);
			$selectCriteria->add(QcSearchPeer::ID, $criteria->remove(QcSearchPeer::ID), $comparison);

		} else { // $values is QcSearch object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseQcSearchPeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseQcSearchPeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the Qc_Search table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(QcSearchPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			QcSearchPeer::clearInstancePool();
			QcSearchPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a QcSearch or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or QcSearch object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			QcSearchPeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof QcSearch) { // it's a model object
			// invalidate the cache for this single object
			QcSearchPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(QcSearchPeer::ID, (array) $values, Criteria::IN);
			// invalidate the cache for this object(s)
			foreach ((array) $values as $singleval) {
				QcSearchPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			QcSearchPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given QcSearch object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      QcSearch $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(QcSearch $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(QcSearchPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(QcSearchPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(QcSearchPeer::DATABASE_NAME, QcSearchPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     QcSearch
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = QcSearchPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(QcSearchPeer::DATABASE_NAME);
		$criteria->add(QcSearchPeer::ID, $pk);

		$v = QcSearchPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(QcSearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(QcSearchPeer::DATABASE_NAME);
			$criteria->add(QcSearchPeer::ID, $pks, Criteria::IN);
			$objs = QcSearchPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseQcSearchPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseQcSearchPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseQcSearchPeer::buildTableMap();

