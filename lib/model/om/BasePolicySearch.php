<?php

/**
 * Base class that represents a row from the 'Policy_Search' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon Feb  9 01:55:06 2015
 *
 * @package    lib.model.om
 */
abstract class BasePolicySearch extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PolicySearchPeer
	 */
	protected static $peer;

	/**
	 * The value for the policyid field.
	 * @var        int
	 */
	protected $policyid;

	/**
	 * The value for the masterpolicynumber field.
	 * @var        string
	 */
	protected $masterpolicynumber;

	/**
	 * The value for the insuredname field.
	 * @var        string
	 */
	protected $insuredname;

	/**
	 * The value for the productline field.
	 * @var        string
	 */
	protected $productline;

	/**
	 * The value for the productlinesubtype field.
	 * @var        string
	 */
	protected $productlinesubtype;

	/**
	 * The value for the underwritername field.
	 * @var        string
	 */
	protected $underwritername;

	/**
	 * The value for the regionname field.
	 * @var        string
	 */
	protected $regionname;

	/**
	 * The value for the branchname field.
	 * @var        string
	 */
	protected $branchname;

	/**
	 * The value for the reinsuredcompany field.
	 * @var        string
	 */
	protected $reinsuredcompany;

	/**
	 * The value for the remarks field.
	 * @var        string
	 */
	protected $remarks;

	/**
	 * The value for the directassumed field.
	 * @var        string
	 */
	protected $directassumed;

	/**
	 * The value for the admittednotadmitted field.
	 * @var        string
	 */
	protected $admittednotadmitted;

	/**
	 * The value for the admitteddetails field.
	 * @var        string
	 */
	protected $admitteddetails;

	/**
	 * The value for the company field.
	 * @var        string
	 */
	protected $company;

	/**
	 * The value for the companynumber field.
	 * @var        string
	 */
	protected $companynumber;

	/**
	 * The value for the prefix field.
	 * @var        string
	 */
	protected $prefix;

	/**
	 * The value for the suffix field.
	 * @var        string
	 */
	protected $suffix;

	/**
	 * The value for the newrenewal field.
	 * @var        string
	 */
	protected $newrenewal;

	/**
	 * The value for the policyeffectivedate field.
	 * @var        string
	 */
	protected $policyeffectivedate;

	/**
	 * The value for the policyexpirydate field.
	 * @var        string
	 */
	protected $policyexpirydate;

	/**
	 * The value for the policycurrency field.
	 * @var        string
	 */
	protected $policycurrency;

	/**
	 * The value for the policycurrencysymbol field.
	 * @var        string
	 */
	protected $policycurrencysymbol;

	/**
	 * The value for the inceptiongrosspremium field.
	 * @var        string
	 */
	protected $inceptiongrosspremium;

	/**
	 * The value for the commisssionpercentage field.
	 * @var        string
	 */
	protected $commisssionpercentage;

	/**
	 * The value for the commisssiondoller field.
	 * @var        string
	 */
	protected $commisssiondoller;

	/**
	 * The value for the netpremium field.
	 * @var        string
	 */
	protected $netpremium;

	/**
	 * The value for the createdby field.
	 * @var        string
	 */
	protected $createdby;

	/**
	 * The value for the createddate field.
	 * @var        string
	 */
	protected $createddate;

	/**
	 * The value for the modifiedby field.
	 * @var        string
	 */
	protected $modifiedby;

	/**
	 * The value for the modifieddate field.
	 * @var        string
	 */
	protected $modifieddate;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PolicySearchPeer';

	/**
	 * Get the [policyid] column value.
	 * 
	 * @return     int
	 */
	public function getPolicyid()
	{
		return $this->policyid;
	}

	/**
	 * Get the [masterpolicynumber] column value.
	 * 
	 * @return     string
	 */
	public function getMasterpolicynumber()
	{
		return $this->masterpolicynumber;
	}

	/**
	 * Get the [insuredname] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredname()
	{
		return $this->insuredname;
	}

	/**
	 * Get the [productline] column value.
	 * 
	 * @return     string
	 */
	public function getProductline()
	{
		return $this->productline;
	}

	/**
	 * Get the [productlinesubtype] column value.
	 * 
	 * @return     string
	 */
	public function getProductlinesubtype()
	{
		return $this->productlinesubtype;
	}

	/**
	 * Get the [underwritername] column value.
	 * 
	 * @return     string
	 */
	public function getUnderwritername()
	{
		return $this->underwritername;
	}

	/**
	 * Get the [regionname] column value.
	 * 
	 * @return     string
	 */
	public function getRegionname()
	{
		return $this->regionname;
	}

	/**
	 * Get the [branchname] column value.
	 * 
	 * @return     string
	 */
	public function getBranchname()
	{
		return $this->branchname;
	}

	/**
	 * Get the [reinsuredcompany] column value.
	 * 
	 * @return     string
	 */
	public function getReinsuredcompany()
	{
		return $this->reinsuredcompany;
	}

	/**
	 * Get the [remarks] column value.
	 * 
	 * @return     string
	 */
	public function getRemarks()
	{
		return $this->remarks;
	}

	/**
	 * Get the [directassumed] column value.
	 * 
	 * @return     string
	 */
	public function getDirectassumed()
	{
		return $this->directassumed;
	}

	/**
	 * Get the [admittednotadmitted] column value.
	 * 
	 * @return     string
	 */
	public function getAdmittednotadmitted()
	{
		return $this->admittednotadmitted;
	}

	/**
	 * Get the [admitteddetails] column value.
	 * 
	 * @return     string
	 */
	public function getAdmitteddetails()
	{
		return $this->admitteddetails;
	}

	/**
	 * Get the [company] column value.
	 * 
	 * @return     string
	 */
	public function getCompany()
	{
		return $this->company;
	}

	/**
	 * Get the [companynumber] column value.
	 * 
	 * @return     string
	 */
	public function getCompanynumber()
	{
		return $this->companynumber;
	}

	/**
	 * Get the [prefix] column value.
	 * 
	 * @return     string
	 */
	public function getPrefix()
	{
		return $this->prefix;
	}

	/**
	 * Get the [suffix] column value.
	 * 
	 * @return     string
	 */
	public function getSuffix()
	{
		return $this->suffix;
	}

	/**
	 * Get the [newrenewal] column value.
	 * 
	 * @return     string
	 */
	public function getNewrenewal()
	{
		return $this->newrenewal;
	}

	/**
	 * Get the [optionally formatted] temporal [policyeffectivedate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPolicyeffectivedate($format = 'Y-m-d H:i:s')
	{
		if ($this->policyeffectivedate === null) {
			return null;
		}


		if ($this->policyeffectivedate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->policyeffectivedate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->policyeffectivedate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [policyexpirydate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPolicyexpirydate($format = 'Y-m-d H:i:s')
	{
		if ($this->policyexpirydate === null) {
			return null;
		}


		if ($this->policyexpirydate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->policyexpirydate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->policyexpirydate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [policycurrency] column value.
	 * 
	 * @return     string
	 */
	public function getPolicycurrency()
	{
		return $this->policycurrency;
	}

	/**
	 * Get the [policycurrencysymbol] column value.
	 * 
	 * @return     string
	 */
	public function getPolicycurrencysymbol()
	{
		return $this->policycurrencysymbol;
	}

	/**
	 * Get the [inceptiongrosspremium] column value.
	 * 
	 * @return     string
	 */
	public function getInceptiongrosspremium()
	{
		return $this->inceptiongrosspremium;
	}

	/**
	 * Get the [commisssionpercentage] column value.
	 * 
	 * @return     string
	 */
	public function getCommisssionpercentage()
	{
		return $this->commisssionpercentage;
	}

	/**
	 * Get the [commisssiondoller] column value.
	 * 
	 * @return     string
	 */
	public function getCommisssiondoller()
	{
		return $this->commisssiondoller;
	}

	/**
	 * Get the [netpremium] column value.
	 * 
	 * @return     string
	 */
	public function getNetpremium()
	{
		return $this->netpremium;
	}

	/**
	 * Get the [createdby] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedby()
	{
		return $this->createdby;
	}

	/**
	 * Get the [optionally formatted] temporal [createddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreateddate($format = 'Y-m-d H:i:s')
	{
		if ($this->createddate === null) {
			return null;
		}


		if ($this->createddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->createddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->createddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [modifiedby] column value.
	 * 
	 * @return     string
	 */
	public function getModifiedby()
	{
		return $this->modifiedby;
	}

	/**
	 * Get the [optionally formatted] temporal [modifieddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getModifieddate($format = 'Y-m-d H:i:s')
	{
		if ($this->modifieddate === null) {
			return null;
		}


		if ($this->modifieddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->modifieddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->modifieddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [policyid] column.
	 * 
	 * @param      int $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setPolicyid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->policyid !== $v) {
			$this->policyid = $v;
			$this->modifiedColumns[] = PolicySearchPeer::POLICYID;
		}

		return $this;
	} // setPolicyid()

	/**
	 * Set the value of [masterpolicynumber] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setMasterpolicynumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->masterpolicynumber !== $v) {
			$this->masterpolicynumber = $v;
			$this->modifiedColumns[] = PolicySearchPeer::MASTERPOLICYNUMBER;
		}

		return $this;
	} // setMasterpolicynumber()

	/**
	 * Set the value of [insuredname] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setInsuredname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredname !== $v) {
			$this->insuredname = $v;
			$this->modifiedColumns[] = PolicySearchPeer::INSUREDNAME;
		}

		return $this;
	} // setInsuredname()

	/**
	 * Set the value of [productline] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setProductline($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productline !== $v) {
			$this->productline = $v;
			$this->modifiedColumns[] = PolicySearchPeer::PRODUCTLINE;
		}

		return $this;
	} // setProductline()

	/**
	 * Set the value of [productlinesubtype] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setProductlinesubtype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productlinesubtype !== $v) {
			$this->productlinesubtype = $v;
			$this->modifiedColumns[] = PolicySearchPeer::PRODUCTLINESUBTYPE;
		}

		return $this;
	} // setProductlinesubtype()

	/**
	 * Set the value of [underwritername] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setUnderwritername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->underwritername !== $v) {
			$this->underwritername = $v;
			$this->modifiedColumns[] = PolicySearchPeer::UNDERWRITERNAME;
		}

		return $this;
	} // setUnderwritername()

	/**
	 * Set the value of [regionname] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setRegionname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->regionname !== $v) {
			$this->regionname = $v;
			$this->modifiedColumns[] = PolicySearchPeer::REGIONNAME;
		}

		return $this;
	} // setRegionname()

	/**
	 * Set the value of [branchname] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setBranchname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->branchname !== $v) {
			$this->branchname = $v;
			$this->modifiedColumns[] = PolicySearchPeer::BRANCHNAME;
		}

		return $this;
	} // setBranchname()

	/**
	 * Set the value of [reinsuredcompany] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setReinsuredcompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reinsuredcompany !== $v) {
			$this->reinsuredcompany = $v;
			$this->modifiedColumns[] = PolicySearchPeer::REINSUREDCOMPANY;
		}

		return $this;
	} // setReinsuredcompany()

	/**
	 * Set the value of [remarks] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setRemarks($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->remarks !== $v) {
			$this->remarks = $v;
			$this->modifiedColumns[] = PolicySearchPeer::REMARKS;
		}

		return $this;
	} // setRemarks()

	/**
	 * Set the value of [directassumed] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setDirectassumed($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->directassumed !== $v) {
			$this->directassumed = $v;
			$this->modifiedColumns[] = PolicySearchPeer::DIRECTASSUMED;
		}

		return $this;
	} // setDirectassumed()

	/**
	 * Set the value of [admittednotadmitted] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setAdmittednotadmitted($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admittednotadmitted !== $v) {
			$this->admittednotadmitted = $v;
			$this->modifiedColumns[] = PolicySearchPeer::ADMITTEDNOTADMITTED;
		}

		return $this;
	} // setAdmittednotadmitted()

	/**
	 * Set the value of [admitteddetails] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setAdmitteddetails($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admitteddetails !== $v) {
			$this->admitteddetails = $v;
			$this->modifiedColumns[] = PolicySearchPeer::ADMITTEDDETAILS;
		}

		return $this;
	} // setAdmitteddetails()

	/**
	 * Set the value of [company] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setCompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company !== $v) {
			$this->company = $v;
			$this->modifiedColumns[] = PolicySearchPeer::COMPANY;
		}

		return $this;
	} // setCompany()

	/**
	 * Set the value of [companynumber] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setCompanynumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->companynumber !== $v) {
			$this->companynumber = $v;
			$this->modifiedColumns[] = PolicySearchPeer::COMPANYNUMBER;
		}

		return $this;
	} // setCompanynumber()

	/**
	 * Set the value of [prefix] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setPrefix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prefix !== $v) {
			$this->prefix = $v;
			$this->modifiedColumns[] = PolicySearchPeer::PREFIX;
		}

		return $this;
	} // setPrefix()

	/**
	 * Set the value of [suffix] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setSuffix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->suffix !== $v) {
			$this->suffix = $v;
			$this->modifiedColumns[] = PolicySearchPeer::SUFFIX;
		}

		return $this;
	} // setSuffix()

	/**
	 * Set the value of [newrenewal] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setNewrenewal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->newrenewal !== $v) {
			$this->newrenewal = $v;
			$this->modifiedColumns[] = PolicySearchPeer::NEWRENEWAL;
		}

		return $this;
	} // setNewrenewal()

	/**
	 * Sets the value of [policyeffectivedate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setPolicyeffectivedate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->policyeffectivedate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->policyeffectivedate !== null && $tmpDt = new DateTime($this->policyeffectivedate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->policyeffectivedate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PolicySearchPeer::POLICYEFFECTIVEDATE;
			}
		} // if either are not null

		return $this;
	} // setPolicyeffectivedate()

	/**
	 * Sets the value of [policyexpirydate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setPolicyexpirydate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->policyexpirydate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->policyexpirydate !== null && $tmpDt = new DateTime($this->policyexpirydate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->policyexpirydate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PolicySearchPeer::POLICYEXPIRYDATE;
			}
		} // if either are not null

		return $this;
	} // setPolicyexpirydate()

	/**
	 * Set the value of [policycurrency] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setPolicycurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policycurrency !== $v) {
			$this->policycurrency = $v;
			$this->modifiedColumns[] = PolicySearchPeer::POLICYCURRENCY;
		}

		return $this;
	} // setPolicycurrency()

	/**
	 * Set the value of [policycurrencysymbol] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setPolicycurrencysymbol($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policycurrencysymbol !== $v) {
			$this->policycurrencysymbol = $v;
			$this->modifiedColumns[] = PolicySearchPeer::POLICYCURRENCYSYMBOL;
		}

		return $this;
	} // setPolicycurrencysymbol()

	/**
	 * Set the value of [inceptiongrosspremium] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setInceptiongrosspremium($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->inceptiongrosspremium !== $v) {
			$this->inceptiongrosspremium = $v;
			$this->modifiedColumns[] = PolicySearchPeer::INCEPTIONGROSSPREMIUM;
		}

		return $this;
	} // setInceptiongrosspremium()

	/**
	 * Set the value of [commisssionpercentage] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setCommisssionpercentage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->commisssionpercentage !== $v) {
			$this->commisssionpercentage = $v;
			$this->modifiedColumns[] = PolicySearchPeer::COMMISSSIONPERCENTAGE;
		}

		return $this;
	} // setCommisssionpercentage()

	/**
	 * Set the value of [commisssiondoller] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setCommisssiondoller($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->commisssiondoller !== $v) {
			$this->commisssiondoller = $v;
			$this->modifiedColumns[] = PolicySearchPeer::COMMISSSIONDOLLER;
		}

		return $this;
	} // setCommisssiondoller()

	/**
	 * Set the value of [netpremium] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setNetpremium($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->netpremium !== $v) {
			$this->netpremium = $v;
			$this->modifiedColumns[] = PolicySearchPeer::NETPREMIUM;
		}

		return $this;
	} // setNetpremium()

	/**
	 * Set the value of [createdby] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setCreatedby($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->createdby !== $v) {
			$this->createdby = $v;
			$this->modifiedColumns[] = PolicySearchPeer::CREATEDBY;
		}

		return $this;
	} // setCreatedby()

	/**
	 * Sets the value of [createddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setCreateddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->createddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->createddate !== null && $tmpDt = new DateTime($this->createddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->createddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PolicySearchPeer::CREATEDDATE;
			}
		} // if either are not null

		return $this;
	} // setCreateddate()

	/**
	 * Set the value of [modifiedby] column.
	 * 
	 * @param      string $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setModifiedby($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->modifiedby !== $v) {
			$this->modifiedby = $v;
			$this->modifiedColumns[] = PolicySearchPeer::MODIFIEDBY;
		}

		return $this;
	} // setModifiedby()

	/**
	 * Sets the value of [modifieddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setModifieddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->modifieddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->modifieddate !== null && $tmpDt = new DateTime($this->modifieddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->modifieddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PolicySearchPeer::MODIFIEDDATE;
			}
		} // if either are not null

		return $this;
	} // setModifieddate()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     PolicySearch The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PolicySearchPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->policyid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->masterpolicynumber = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->insuredname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->productline = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->productlinesubtype = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->underwritername = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->regionname = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->branchname = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->reinsuredcompany = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->remarks = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->directassumed = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->admittednotadmitted = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->admitteddetails = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->company = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->companynumber = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->prefix = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->suffix = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->newrenewal = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->policyeffectivedate = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->policyexpirydate = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->policycurrency = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->policycurrencysymbol = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->inceptiongrosspremium = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->commisssionpercentage = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->commisssiondoller = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->netpremium = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->createdby = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->createddate = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->modifiedby = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->modifieddate = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->id = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 31; // 31 = PolicySearchPeer::NUM_COLUMNS - PolicySearchPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PolicySearch object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PolicySearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PolicySearchPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PolicySearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePolicySearch:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PolicySearchPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePolicySearch:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PolicySearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePolicySearch:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePolicySearch:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PolicySearchPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PolicySearchPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PolicySearchPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PolicySearchPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PolicySearchPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PolicySearchPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getPolicyid();
				break;
			case 1:
				return $this->getMasterpolicynumber();
				break;
			case 2:
				return $this->getInsuredname();
				break;
			case 3:
				return $this->getProductline();
				break;
			case 4:
				return $this->getProductlinesubtype();
				break;
			case 5:
				return $this->getUnderwritername();
				break;
			case 6:
				return $this->getRegionname();
				break;
			case 7:
				return $this->getBranchname();
				break;
			case 8:
				return $this->getReinsuredcompany();
				break;
			case 9:
				return $this->getRemarks();
				break;
			case 10:
				return $this->getDirectassumed();
				break;
			case 11:
				return $this->getAdmittednotadmitted();
				break;
			case 12:
				return $this->getAdmitteddetails();
				break;
			case 13:
				return $this->getCompany();
				break;
			case 14:
				return $this->getCompanynumber();
				break;
			case 15:
				return $this->getPrefix();
				break;
			case 16:
				return $this->getSuffix();
				break;
			case 17:
				return $this->getNewrenewal();
				break;
			case 18:
				return $this->getPolicyeffectivedate();
				break;
			case 19:
				return $this->getPolicyexpirydate();
				break;
			case 20:
				return $this->getPolicycurrency();
				break;
			case 21:
				return $this->getPolicycurrencysymbol();
				break;
			case 22:
				return $this->getInceptiongrosspremium();
				break;
			case 23:
				return $this->getCommisssionpercentage();
				break;
			case 24:
				return $this->getCommisssiondoller();
				break;
			case 25:
				return $this->getNetpremium();
				break;
			case 26:
				return $this->getCreatedby();
				break;
			case 27:
				return $this->getCreateddate();
				break;
			case 28:
				return $this->getModifiedby();
				break;
			case 29:
				return $this->getModifieddate();
				break;
			case 30:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PolicySearchPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getPolicyid(),
			$keys[1] => $this->getMasterpolicynumber(),
			$keys[2] => $this->getInsuredname(),
			$keys[3] => $this->getProductline(),
			$keys[4] => $this->getProductlinesubtype(),
			$keys[5] => $this->getUnderwritername(),
			$keys[6] => $this->getRegionname(),
			$keys[7] => $this->getBranchname(),
			$keys[8] => $this->getReinsuredcompany(),
			$keys[9] => $this->getRemarks(),
			$keys[10] => $this->getDirectassumed(),
			$keys[11] => $this->getAdmittednotadmitted(),
			$keys[12] => $this->getAdmitteddetails(),
			$keys[13] => $this->getCompany(),
			$keys[14] => $this->getCompanynumber(),
			$keys[15] => $this->getPrefix(),
			$keys[16] => $this->getSuffix(),
			$keys[17] => $this->getNewrenewal(),
			$keys[18] => $this->getPolicyeffectivedate(),
			$keys[19] => $this->getPolicyexpirydate(),
			$keys[20] => $this->getPolicycurrency(),
			$keys[21] => $this->getPolicycurrencysymbol(),
			$keys[22] => $this->getInceptiongrosspremium(),
			$keys[23] => $this->getCommisssionpercentage(),
			$keys[24] => $this->getCommisssiondoller(),
			$keys[25] => $this->getNetpremium(),
			$keys[26] => $this->getCreatedby(),
			$keys[27] => $this->getCreateddate(),
			$keys[28] => $this->getModifiedby(),
			$keys[29] => $this->getModifieddate(),
			$keys[30] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PolicySearchPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setPolicyid($value);
				break;
			case 1:
				$this->setMasterpolicynumber($value);
				break;
			case 2:
				$this->setInsuredname($value);
				break;
			case 3:
				$this->setProductline($value);
				break;
			case 4:
				$this->setProductlinesubtype($value);
				break;
			case 5:
				$this->setUnderwritername($value);
				break;
			case 6:
				$this->setRegionname($value);
				break;
			case 7:
				$this->setBranchname($value);
				break;
			case 8:
				$this->setReinsuredcompany($value);
				break;
			case 9:
				$this->setRemarks($value);
				break;
			case 10:
				$this->setDirectassumed($value);
				break;
			case 11:
				$this->setAdmittednotadmitted($value);
				break;
			case 12:
				$this->setAdmitteddetails($value);
				break;
			case 13:
				$this->setCompany($value);
				break;
			case 14:
				$this->setCompanynumber($value);
				break;
			case 15:
				$this->setPrefix($value);
				break;
			case 16:
				$this->setSuffix($value);
				break;
			case 17:
				$this->setNewrenewal($value);
				break;
			case 18:
				$this->setPolicyeffectivedate($value);
				break;
			case 19:
				$this->setPolicyexpirydate($value);
				break;
			case 20:
				$this->setPolicycurrency($value);
				break;
			case 21:
				$this->setPolicycurrencysymbol($value);
				break;
			case 22:
				$this->setInceptiongrosspremium($value);
				break;
			case 23:
				$this->setCommisssionpercentage($value);
				break;
			case 24:
				$this->setCommisssiondoller($value);
				break;
			case 25:
				$this->setNetpremium($value);
				break;
			case 26:
				$this->setCreatedby($value);
				break;
			case 27:
				$this->setCreateddate($value);
				break;
			case 28:
				$this->setModifiedby($value);
				break;
			case 29:
				$this->setModifieddate($value);
				break;
			case 30:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PolicySearchPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setPolicyid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMasterpolicynumber($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setInsuredname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProductline($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProductlinesubtype($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUnderwritername($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRegionname($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setBranchname($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setReinsuredcompany($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setRemarks($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDirectassumed($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAdmittednotadmitted($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAdmitteddetails($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCompany($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCompanynumber($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPrefix($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setSuffix($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setNewrenewal($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPolicyeffectivedate($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPolicyexpirydate($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPolicycurrency($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPolicycurrencysymbol($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setInceptiongrosspremium($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCommisssionpercentage($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCommisssiondoller($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setNetpremium($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCreatedby($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCreateddate($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setModifiedby($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setModifieddate($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setId($arr[$keys[30]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PolicySearchPeer::DATABASE_NAME);

		if ($this->isColumnModified(PolicySearchPeer::POLICYID)) $criteria->add(PolicySearchPeer::POLICYID, $this->policyid);
		if ($this->isColumnModified(PolicySearchPeer::MASTERPOLICYNUMBER)) $criteria->add(PolicySearchPeer::MASTERPOLICYNUMBER, $this->masterpolicynumber);
		if ($this->isColumnModified(PolicySearchPeer::INSUREDNAME)) $criteria->add(PolicySearchPeer::INSUREDNAME, $this->insuredname);
		if ($this->isColumnModified(PolicySearchPeer::PRODUCTLINE)) $criteria->add(PolicySearchPeer::PRODUCTLINE, $this->productline);
		if ($this->isColumnModified(PolicySearchPeer::PRODUCTLINESUBTYPE)) $criteria->add(PolicySearchPeer::PRODUCTLINESUBTYPE, $this->productlinesubtype);
		if ($this->isColumnModified(PolicySearchPeer::UNDERWRITERNAME)) $criteria->add(PolicySearchPeer::UNDERWRITERNAME, $this->underwritername);
		if ($this->isColumnModified(PolicySearchPeer::REGIONNAME)) $criteria->add(PolicySearchPeer::REGIONNAME, $this->regionname);
		if ($this->isColumnModified(PolicySearchPeer::BRANCHNAME)) $criteria->add(PolicySearchPeer::BRANCHNAME, $this->branchname);
		if ($this->isColumnModified(PolicySearchPeer::REINSUREDCOMPANY)) $criteria->add(PolicySearchPeer::REINSUREDCOMPANY, $this->reinsuredcompany);
		if ($this->isColumnModified(PolicySearchPeer::REMARKS)) $criteria->add(PolicySearchPeer::REMARKS, $this->remarks);
		if ($this->isColumnModified(PolicySearchPeer::DIRECTASSUMED)) $criteria->add(PolicySearchPeer::DIRECTASSUMED, $this->directassumed);
		if ($this->isColumnModified(PolicySearchPeer::ADMITTEDNOTADMITTED)) $criteria->add(PolicySearchPeer::ADMITTEDNOTADMITTED, $this->admittednotadmitted);
		if ($this->isColumnModified(PolicySearchPeer::ADMITTEDDETAILS)) $criteria->add(PolicySearchPeer::ADMITTEDDETAILS, $this->admitteddetails);
		if ($this->isColumnModified(PolicySearchPeer::COMPANY)) $criteria->add(PolicySearchPeer::COMPANY, $this->company);
		if ($this->isColumnModified(PolicySearchPeer::COMPANYNUMBER)) $criteria->add(PolicySearchPeer::COMPANYNUMBER, $this->companynumber);
		if ($this->isColumnModified(PolicySearchPeer::PREFIX)) $criteria->add(PolicySearchPeer::PREFIX, $this->prefix);
		if ($this->isColumnModified(PolicySearchPeer::SUFFIX)) $criteria->add(PolicySearchPeer::SUFFIX, $this->suffix);
		if ($this->isColumnModified(PolicySearchPeer::NEWRENEWAL)) $criteria->add(PolicySearchPeer::NEWRENEWAL, $this->newrenewal);
		if ($this->isColumnModified(PolicySearchPeer::POLICYEFFECTIVEDATE)) $criteria->add(PolicySearchPeer::POLICYEFFECTIVEDATE, $this->policyeffectivedate);
		if ($this->isColumnModified(PolicySearchPeer::POLICYEXPIRYDATE)) $criteria->add(PolicySearchPeer::POLICYEXPIRYDATE, $this->policyexpirydate);
		if ($this->isColumnModified(PolicySearchPeer::POLICYCURRENCY)) $criteria->add(PolicySearchPeer::POLICYCURRENCY, $this->policycurrency);
		if ($this->isColumnModified(PolicySearchPeer::POLICYCURRENCYSYMBOL)) $criteria->add(PolicySearchPeer::POLICYCURRENCYSYMBOL, $this->policycurrencysymbol);
		if ($this->isColumnModified(PolicySearchPeer::INCEPTIONGROSSPREMIUM)) $criteria->add(PolicySearchPeer::INCEPTIONGROSSPREMIUM, $this->inceptiongrosspremium);
		if ($this->isColumnModified(PolicySearchPeer::COMMISSSIONPERCENTAGE)) $criteria->add(PolicySearchPeer::COMMISSSIONPERCENTAGE, $this->commisssionpercentage);
		if ($this->isColumnModified(PolicySearchPeer::COMMISSSIONDOLLER)) $criteria->add(PolicySearchPeer::COMMISSSIONDOLLER, $this->commisssiondoller);
		if ($this->isColumnModified(PolicySearchPeer::NETPREMIUM)) $criteria->add(PolicySearchPeer::NETPREMIUM, $this->netpremium);
		if ($this->isColumnModified(PolicySearchPeer::CREATEDBY)) $criteria->add(PolicySearchPeer::CREATEDBY, $this->createdby);
		if ($this->isColumnModified(PolicySearchPeer::CREATEDDATE)) $criteria->add(PolicySearchPeer::CREATEDDATE, $this->createddate);
		if ($this->isColumnModified(PolicySearchPeer::MODIFIEDBY)) $criteria->add(PolicySearchPeer::MODIFIEDBY, $this->modifiedby);
		if ($this->isColumnModified(PolicySearchPeer::MODIFIEDDATE)) $criteria->add(PolicySearchPeer::MODIFIEDDATE, $this->modifieddate);
		if ($this->isColumnModified(PolicySearchPeer::ID)) $criteria->add(PolicySearchPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PolicySearchPeer::DATABASE_NAME);

		$criteria->add(PolicySearchPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PolicySearch (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPolicyid($this->policyid);

		$copyObj->setMasterpolicynumber($this->masterpolicynumber);

		$copyObj->setInsuredname($this->insuredname);

		$copyObj->setProductline($this->productline);

		$copyObj->setProductlinesubtype($this->productlinesubtype);

		$copyObj->setUnderwritername($this->underwritername);

		$copyObj->setRegionname($this->regionname);

		$copyObj->setBranchname($this->branchname);

		$copyObj->setReinsuredcompany($this->reinsuredcompany);

		$copyObj->setRemarks($this->remarks);

		$copyObj->setDirectassumed($this->directassumed);

		$copyObj->setAdmittednotadmitted($this->admittednotadmitted);

		$copyObj->setAdmitteddetails($this->admitteddetails);

		$copyObj->setCompany($this->company);

		$copyObj->setCompanynumber($this->companynumber);

		$copyObj->setPrefix($this->prefix);

		$copyObj->setSuffix($this->suffix);

		$copyObj->setNewrenewal($this->newrenewal);

		$copyObj->setPolicyeffectivedate($this->policyeffectivedate);

		$copyObj->setPolicyexpirydate($this->policyexpirydate);

		$copyObj->setPolicycurrency($this->policycurrency);

		$copyObj->setPolicycurrencysymbol($this->policycurrencysymbol);

		$copyObj->setInceptiongrosspremium($this->inceptiongrosspremium);

		$copyObj->setCommisssionpercentage($this->commisssionpercentage);

		$copyObj->setCommisssiondoller($this->commisssiondoller);

		$copyObj->setNetpremium($this->netpremium);

		$copyObj->setCreatedby($this->createdby);

		$copyObj->setCreateddate($this->createddate);

		$copyObj->setModifiedby($this->modifiedby);

		$copyObj->setModifieddate($this->modifieddate);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PolicySearch Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PolicySearchPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PolicySearchPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePolicySearch:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePolicySearch::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePolicySearch
