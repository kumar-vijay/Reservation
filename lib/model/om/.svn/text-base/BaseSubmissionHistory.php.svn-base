<?php

/**
 * Base class that represents a row from the 'SUBMISSION_HISTORY' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Mar 19 17:19:31 2014
 *
 * @package    lib.model.om
 */
abstract class BaseSubmissionHistory extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SubmissionHistoryPeer
	 */
	protected static $peer;

	/**
	 * The value for the submission_history_id field.
	 * @var        int
	 */
	protected $submission_history_id;

	/**
	 * The value for the submission_id field.
	 * @var        int
	 */
	protected $submission_id;

	/**
	 * The value for the submission_type field.
	 * @var        string
	 */
	protected $submission_type;

	/**
	 * The value for the submission_branch_id field.
	 * @var        int
	 */
	protected $submission_branch_id;

	/**
	 * The value for the db_number field.
	 * @var        string
	 */
	protected $db_number;

	/**
	 * The value for the insured_name field.
	 * @var        string
	 */
	protected $insured_name;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the underwriter_id field.
	 * @var        int
	 */
	protected $underwriter_id;

	/**
	 * The value for the product_id field.
	 * @var        int
	 */
	protected $product_id;

	/**
	 * The value for the primary_status field.
	 * @var        string
	 */
	protected $primary_status;

	/**
	 * The value for the reason_code field.
	 * @var        int
	 */
	protected $reason_code;

	/**
	 * The value for the naic_code field.
	 * @var        int
	 */
	protected $naic_code;

	/**
	 * The value for the sic_code field.
	 * @var        int
	 */
	protected $sic_code;

	/**
	 * The value for the naic_title field.
	 * @var        string
	 */
	protected $naic_title;

	/**
	 * The value for the bind_date field.
	 * @var        string
	 */
	protected $bind_date;

	/**
	 * The value for the limit field.
	 * @var        int
	 */
	protected $limit;

	/**
	 * The value for the attachment_point field.
	 * @var        string
	 */
	protected $attachment_point;

	/**
	 * The value for the premium field.
	 * @var        int
	 */
	protected $premium;

	/**
	 * The value for the endorsement_premium field.
	 * @var        int
	 */
	protected $endorsement_premium;

	/**
	 * The value for the net_premium field.
	 * @var        int
	 */
	protected $net_premium;

	/**
	 * The value for the commission field.
	 * @var        int
	 */
	protected $commission;

	/**
	 * The value for the total_insured_value field.
	 * @var        int
	 */
	protected $total_insured_value;

	/**
	 * The value for the relativity field.
	 * @var        int
	 */
	protected $relativity;

	/**
	 * The value for the by_berksi_from_broker field.
	 * @var        string
	 */
	protected $by_berksi_from_broker;

	/**
	 * The value for the by_india_by_berksi field.
	 * @var        string
	 */
	protected $by_india_by_berksi;

	/**
	 * The value for the remarks field.
	 * @var        string
	 */
	protected $remarks;

	/**
	 * The value for the broker_code field.
	 * @var        string
	 */
	protected $broker_code;

	/**
	 * The value for the broker_type field.
	 * Note: this column has a database default value of: 'R'
	 * @var        string
	 */
	protected $broker_type;

	/**
	 * The value for the broker_name field.
	 * @var        string
	 */
	protected $broker_name;

	/**
	 * The value for the broker_contact_person field.
	 * @var        string
	 */
	protected $broker_contact_person;

	/**
	 * The value for the insured_name_dnb field.
	 * @var        string
	 */
	protected $insured_name_dnb;

	/**
	 * The value for the is_name_different field.
	 * Note: this column has a database default value of: 'N'
	 * @var        string
	 */
	protected $is_name_different;

	/**
	 * The value for the is_address_different field.
	 * Note: this column has a database default value of: 'N'
	 * @var        string
	 */
	protected $is_address_different;

	/**
	 * The value for the effective_date field.
	 * @var        string
	 */
	protected $effective_date;

	/**
	 * The value for the expiration_date field.
	 * @var        string
	 */
	protected $expiration_date;

	/**
	 * The value for the new_submission_type field.
	 * @var        string
	 */
	protected $new_submission_type;

	/**
	 * The value for the new_submission_branch_id field.
	 * @var        int
	 */
	protected $new_submission_branch_id;

	/**
	 * The value for the new_db_number field.
	 * @var        string
	 */
	protected $new_db_number;

	/**
	 * The value for the new_insured_name field.
	 * @var        string
	 */
	protected $new_insured_name;

	/**
	 * The value for the new_user_id field.
	 * @var        int
	 */
	protected $new_user_id;

	/**
	 * The value for the new_underwriter_id field.
	 * @var        int
	 */
	protected $new_underwriter_id;

	/**
	 * The value for the new_product_id field.
	 * @var        int
	 */
	protected $new_product_id;

	/**
	 * The value for the new_primary_status field.
	 * @var        string
	 */
	protected $new_primary_status;

	/**
	 * The value for the new_reason_code field.
	 * @var        int
	 */
	protected $new_reason_code;

	/**
	 * The value for the new_naic_code field.
	 * @var        int
	 */
	protected $new_naic_code;

	/**
	 * The value for the new_sic_code field.
	 * @var        int
	 */
	protected $new_sic_code;

	/**
	 * The value for the new_naic_title field.
	 * @var        string
	 */
	protected $new_naic_title;

	/**
	 * The value for the new_bind_date field.
	 * @var        string
	 */
	protected $new_bind_date;

	/**
	 * The value for the new_limit field.
	 * @var        int
	 */
	protected $new_limit;

	/**
	 * The value for the new_attachment_point field.
	 * @var        int
	 */
	protected $new_attachment_point;

	/**
	 * The value for the new_premium field.
	 * @var        int
	 */
	protected $new_premium;

	/**
	 * The value for the new_endorsement_premium field.
	 * @var        int
	 */
	protected $new_endorsement_premium;

	/**
	 * The value for the new_net_premium field.
	 * @var        int
	 */
	protected $new_net_premium;

	/**
	 * The value for the new_commission field.
	 * @var        int
	 */
	protected $new_commission;

	/**
	 * The value for the new_total_insured_value field.
	 * @var        int
	 */
	protected $new_total_insured_value;

	/**
	 * The value for the new_relativity field.
	 * @var        int
	 */
	protected $new_relativity;

	/**
	 * The value for the new_by_berksi_from_broker field.
	 * @var        string
	 */
	protected $new_by_berksi_from_broker;

	/**
	 * The value for the new_by_india_by_berksi field.
	 * @var        string
	 */
	protected $new_by_india_by_berksi;

	/**
	 * The value for the new_remarks field.
	 * @var        string
	 */
	protected $new_remarks;

	/**
	 * The value for the new_broker_code field.
	 * @var        string
	 */
	protected $new_broker_code;

	/**
	 * The value for the new_broker_type field.
	 * Note: this column has a database default value of: 'R'
	 * @var        string
	 */
	protected $new_broker_type;

	/**
	 * The value for the new_broker_name field.
	 * @var        string
	 */
	protected $new_broker_name;

	/**
	 * The value for the new_broker_contact_person field.
	 * @var        string
	 */
	protected $new_broker_contact_person;

	/**
	 * The value for the new_insured_name_dnb field.
	 * @var        string
	 */
	protected $new_insured_name_dnb;

	/**
	 * The value for the new_is_name_different field.
	 * Note: this column has a database default value of: 'N'
	 * @var        string
	 */
	protected $new_is_name_different;

	/**
	 * The value for the new_is_address_different field.
	 * Note: this column has a database default value of: 'N'
	 * @var        string
	 */
	protected $new_is_address_different;

	/**
	 * The value for the new_effective_date field.
	 * @var        string
	 */
	protected $new_effective_date;

	/**
	 * The value for the new_expiration_date field.
	 * @var        string
	 */
	protected $new_expiration_date;

	/**
	 * The value for the modify_date field.
	 * @var        string
	 */
	protected $modify_date;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SubmissionHistoryPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->broker_type = 'R';
		$this->is_name_different = 'N';
		$this->is_address_different = 'N';
		$this->new_broker_type = 'R';
		$this->new_is_name_different = 'N';
		$this->new_is_address_different = 'N';
	}

	/**
	 * Initializes internal state of BaseSubmissionHistory object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [submission_history_id] column value.
	 * 
	 * @return     int
	 */
	public function getSubmissionHistoryId()
	{
		return $this->submission_history_id;
	}

	/**
	 * Get the [submission_id] column value.
	 * 
	 * @return     int
	 */
	public function getSubmissionId()
	{
		return $this->submission_id;
	}

	/**
	 * Get the [submission_type] column value.
	 * 
	 * @return     string
	 */
	public function getSubmissionType()
	{
		return $this->submission_type;
	}

	/**
	 * Get the [submission_branch_id] column value.
	 * 
	 * @return     int
	 */
	public function getSubmissionBranchId()
	{
		return $this->submission_branch_id;
	}

	/**
	 * Get the [db_number] column value.
	 * 
	 * @return     string
	 */
	public function getDbNumber()
	{
		return $this->db_number;
	}

	/**
	 * Get the [insured_name] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredName()
	{
		return $this->insured_name;
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [underwriter_id] column value.
	 * 
	 * @return     int
	 */
	public function getUnderwriterId()
	{
		return $this->underwriter_id;
	}

	/**
	 * Get the [product_id] column value.
	 * 
	 * @return     int
	 */
	public function getProductId()
	{
		return $this->product_id;
	}

	/**
	 * Get the [primary_status] column value.
	 * 
	 * @return     string
	 */
	public function getPrimaryStatus()
	{
		return $this->primary_status;
	}

	/**
	 * Get the [reason_code] column value.
	 * 
	 * @return     int
	 */
	public function getReasonCode()
	{
		return $this->reason_code;
	}

	/**
	 * Get the [naic_code] column value.
	 * 
	 * @return     int
	 */
	public function getNaicCode()
	{
		return $this->naic_code;
	}

	/**
	 * Get the [sic_code] column value.
	 * 
	 * @return     int
	 */
	public function getSicCode()
	{
		return $this->sic_code;
	}

	/**
	 * Get the [naic_title] column value.
	 * 
	 * @return     string
	 */
	public function getNaicTitle()
	{
		return $this->naic_title;
	}

	/**
	 * Get the [optionally formatted] temporal [bind_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBindDate($format = 'Y-m-d')
	{
		if ($this->bind_date === null) {
			return null;
		}


		if ($this->bind_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->bind_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->bind_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [limit] column value.
	 * 
	 * @return     int
	 */
	public function getLimit()
	{
		return $this->limit;
	}

	/**
	 * Get the [attachment_point] column value.
	 * 
	 * @return     string
	 */
	public function getAttachmentPoint()
	{
		return $this->attachment_point;
	}

	/**
	 * Get the [premium] column value.
	 * 
	 * @return     int
	 */
	public function getPremium()
	{
		return $this->premium;
	}

	/**
	 * Get the [endorsement_premium] column value.
	 * 
	 * @return     int
	 */
	public function getEndorsementPremium()
	{
		return $this->endorsement_premium;
	}

	/**
	 * Get the [net_premium] column value.
	 * 
	 * @return     int
	 */
	public function getNetPremium()
	{
		return $this->net_premium;
	}

	/**
	 * Get the [commission] column value.
	 * 
	 * @return     int
	 */
	public function getCommission()
	{
		return $this->commission;
	}

	/**
	 * Get the [total_insured_value] column value.
	 * 
	 * @return     int
	 */
	public function getTotalInsuredValue()
	{
		return $this->total_insured_value;
	}

	/**
	 * Get the [relativity] column value.
	 * 
	 * @return     int
	 */
	public function getRelativity()
	{
		return $this->relativity;
	}

	/**
	 * Get the [optionally formatted] temporal [by_berksi_from_broker] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getByBerksiFromBroker($format = 'Y-m-d H:i:s')
	{
		if ($this->by_berksi_from_broker === null) {
			return null;
		}


		if ($this->by_berksi_from_broker === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->by_berksi_from_broker);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->by_berksi_from_broker, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [by_india_by_berksi] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getByIndiaByBerksi($format = 'Y-m-d')
	{
		if ($this->by_india_by_berksi === null) {
			return null;
		}


		if ($this->by_india_by_berksi === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->by_india_by_berksi);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->by_india_by_berksi, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [remarks] column value.
	 * 
	 * @return     string
	 */
	public function getRemarks()
	{
		return $this->remarks;
	}

	/**
	 * Get the [broker_code] column value.
	 * 
	 * @return     string
	 */
	public function getBrokerCode()
	{
		return $this->broker_code;
	}

	/**
	 * Get the [broker_type] column value.
	 * 
	 * @return     string
	 */
	public function getBrokerType()
	{
		return $this->broker_type;
	}

	/**
	 * Get the [broker_name] column value.
	 * 
	 * @return     string
	 */
	public function getBrokerName()
	{
		return $this->broker_name;
	}

	/**
	 * Get the [broker_contact_person] column value.
	 * 
	 * @return     string
	 */
	public function getBrokerContactPerson()
	{
		return $this->broker_contact_person;
	}

	/**
	 * Get the [insured_name_dnb] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredNameDnb()
	{
		return $this->insured_name_dnb;
	}

	/**
	 * Get the [is_name_different] column value.
	 * 
	 * @return     string
	 */
	public function getIsNameDifferent()
	{
		return $this->is_name_different;
	}

	/**
	 * Get the [is_address_different] column value.
	 * 
	 * @return     string
	 */
	public function getIsAddressDifferent()
	{
		return $this->is_address_different;
	}

	/**
	 * Get the [optionally formatted] temporal [effective_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEffectiveDate($format = 'Y-m-d')
	{
		if ($this->effective_date === null) {
			return null;
		}


		if ($this->effective_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->effective_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->effective_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [expiration_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getExpirationDate($format = 'Y-m-d')
	{
		if ($this->expiration_date === null) {
			return null;
		}


		if ($this->expiration_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->expiration_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->expiration_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [new_submission_type] column value.
	 * 
	 * @return     string
	 */
	public function getNewSubmissionType()
	{
		return $this->new_submission_type;
	}

	/**
	 * Get the [new_submission_branch_id] column value.
	 * 
	 * @return     int
	 */
	public function getNewSubmissionBranchId()
	{
		return $this->new_submission_branch_id;
	}

	/**
	 * Get the [new_db_number] column value.
	 * 
	 * @return     string
	 */
	public function getNewDbNumber()
	{
		return $this->new_db_number;
	}

	/**
	 * Get the [new_insured_name] column value.
	 * 
	 * @return     string
	 */
	public function getNewInsuredName()
	{
		return $this->new_insured_name;
	}

	/**
	 * Get the [new_user_id] column value.
	 * 
	 * @return     int
	 */
	public function getNewUserId()
	{
		return $this->new_user_id;
	}

	/**
	 * Get the [new_underwriter_id] column value.
	 * 
	 * @return     int
	 */
	public function getNewUnderwriterId()
	{
		return $this->new_underwriter_id;
	}

	/**
	 * Get the [new_product_id] column value.
	 * 
	 * @return     int
	 */
	public function getNewProductId()
	{
		return $this->new_product_id;
	}

	/**
	 * Get the [new_primary_status] column value.
	 * 
	 * @return     string
	 */
	public function getNewPrimaryStatus()
	{
		return $this->new_primary_status;
	}

	/**
	 * Get the [new_reason_code] column value.
	 * 
	 * @return     int
	 */
	public function getNewReasonCode()
	{
		return $this->new_reason_code;
	}

	/**
	 * Get the [new_naic_code] column value.
	 * 
	 * @return     int
	 */
	public function getNewNaicCode()
	{
		return $this->new_naic_code;
	}

	/**
	 * Get the [new_sic_code] column value.
	 * 
	 * @return     int
	 */
	public function getNewSicCode()
	{
		return $this->new_sic_code;
	}

	/**
	 * Get the [new_naic_title] column value.
	 * 
	 * @return     string
	 */
	public function getNewNaicTitle()
	{
		return $this->new_naic_title;
	}

	/**
	 * Get the [optionally formatted] temporal [new_bind_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNewBindDate($format = 'Y-m-d')
	{
		if ($this->new_bind_date === null) {
			return null;
		}


		if ($this->new_bind_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->new_bind_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->new_bind_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [new_limit] column value.
	 * 
	 * @return     int
	 */
	public function getNewLimit()
	{
		return $this->new_limit;
	}

	/**
	 * Get the [new_attachment_point] column value.
	 * 
	 * @return     int
	 */
	public function getNewAttachmentPoint()
	{
		return $this->new_attachment_point;
	}

	/**
	 * Get the [new_premium] column value.
	 * 
	 * @return     int
	 */
	public function getNewPremium()
	{
		return $this->new_premium;
	}

	/**
	 * Get the [new_endorsement_premium] column value.
	 * 
	 * @return     int
	 */
	public function getNewEndorsementPremium()
	{
		return $this->new_endorsement_premium;
	}

	/**
	 * Get the [new_net_premium] column value.
	 * 
	 * @return     int
	 */
	public function getNewNetPremium()
	{
		return $this->new_net_premium;
	}

	/**
	 * Get the [new_commission] column value.
	 * 
	 * @return     int
	 */
	public function getNewCommission()
	{
		return $this->new_commission;
	}

	/**
	 * Get the [new_total_insured_value] column value.
	 * 
	 * @return     int
	 */
	public function getNewTotalInsuredValue()
	{
		return $this->new_total_insured_value;
	}

	/**
	 * Get the [new_relativity] column value.
	 * 
	 * @return     int
	 */
	public function getNewRelativity()
	{
		return $this->new_relativity;
	}

	/**
	 * Get the [optionally formatted] temporal [new_by_berksi_from_broker] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNewByBerksiFromBroker($format = 'Y-m-d H:i:s')
	{
		if ($this->new_by_berksi_from_broker === null) {
			return null;
		}


		if ($this->new_by_berksi_from_broker === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->new_by_berksi_from_broker);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->new_by_berksi_from_broker, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [new_by_india_by_berksi] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNewByIndiaByBerksi($format = 'Y-m-d')
	{
		if ($this->new_by_india_by_berksi === null) {
			return null;
		}


		if ($this->new_by_india_by_berksi === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->new_by_india_by_berksi);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->new_by_india_by_berksi, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [new_remarks] column value.
	 * 
	 * @return     string
	 */
	public function getNewRemarks()
	{
		return $this->new_remarks;
	}

	/**
	 * Get the [new_broker_code] column value.
	 * 
	 * @return     string
	 */
	public function getNewBrokerCode()
	{
		return $this->new_broker_code;
	}

	/**
	 * Get the [new_broker_type] column value.
	 * 
	 * @return     string
	 */
	public function getNewBrokerType()
	{
		return $this->new_broker_type;
	}

	/**
	 * Get the [new_broker_name] column value.
	 * 
	 * @return     string
	 */
	public function getNewBrokerName()
	{
		return $this->new_broker_name;
	}

	/**
	 * Get the [new_broker_contact_person] column value.
	 * 
	 * @return     string
	 */
	public function getNewBrokerContactPerson()
	{
		return $this->new_broker_contact_person;
	}

	/**
	 * Get the [new_insured_name_dnb] column value.
	 * 
	 * @return     string
	 */
	public function getNewInsuredNameDnb()
	{
		return $this->new_insured_name_dnb;
	}

	/**
	 * Get the [new_is_name_different] column value.
	 * 
	 * @return     string
	 */
	public function getNewIsNameDifferent()
	{
		return $this->new_is_name_different;
	}

	/**
	 * Get the [new_is_address_different] column value.
	 * 
	 * @return     string
	 */
	public function getNewIsAddressDifferent()
	{
		return $this->new_is_address_different;
	}

	/**
	 * Get the [optionally formatted] temporal [new_effective_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNewEffectiveDate($format = 'Y-m-d')
	{
		if ($this->new_effective_date === null) {
			return null;
		}


		if ($this->new_effective_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->new_effective_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->new_effective_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [new_expiration_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNewExpirationDate($format = 'Y-m-d')
	{
		if ($this->new_expiration_date === null) {
			return null;
		}


		if ($this->new_expiration_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->new_expiration_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->new_expiration_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [modify_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getModifyDate($format = 'Y-m-d H:i:s')
	{
		if ($this->modify_date === null) {
			return null;
		}


		if ($this->modify_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->modify_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->modify_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [submission_history_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setSubmissionHistoryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->submission_history_id !== $v) {
			$this->submission_history_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::SUBMISSION_HISTORY_ID;
		}

		return $this;
	} // setSubmissionHistoryId()

	/**
	 * Set the value of [submission_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setSubmissionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->submission_id !== $v) {
			$this->submission_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::SUBMISSION_ID;
		}

		return $this;
	} // setSubmissionId()

	/**
	 * Set the value of [submission_type] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setSubmissionType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->submission_type !== $v) {
			$this->submission_type = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::SUBMISSION_TYPE;
		}

		return $this;
	} // setSubmissionType()

	/**
	 * Set the value of [submission_branch_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setSubmissionBranchId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->submission_branch_id !== $v) {
			$this->submission_branch_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::SUBMISSION_BRANCH_ID;
		}

		return $this;
	} // setSubmissionBranchId()

	/**
	 * Set the value of [db_number] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setDbNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->db_number !== $v) {
			$this->db_number = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::DB_NUMBER;
		}

		return $this;
	} // setDbNumber()

	/**
	 * Set the value of [insured_name] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setInsuredName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insured_name !== $v) {
			$this->insured_name = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::INSURED_NAME;
		}

		return $this;
	} // setInsuredName()

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::USER_ID;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [underwriter_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setUnderwriterId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->underwriter_id !== $v) {
			$this->underwriter_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::UNDERWRITER_ID;
		}

		return $this;
	} // setUnderwriterId()

	/**
	 * Set the value of [product_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setProductId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_id !== $v) {
			$this->product_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::PRODUCT_ID;
		}

		return $this;
	} // setProductId()

	/**
	 * Set the value of [primary_status] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setPrimaryStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->primary_status !== $v) {
			$this->primary_status = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::PRIMARY_STATUS;
		}

		return $this;
	} // setPrimaryStatus()

	/**
	 * Set the value of [reason_code] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setReasonCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reason_code !== $v) {
			$this->reason_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::REASON_CODE;
		}

		return $this;
	} // setReasonCode()

	/**
	 * Set the value of [naic_code] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNaicCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->naic_code !== $v) {
			$this->naic_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NAIC_CODE;
		}

		return $this;
	} // setNaicCode()

	/**
	 * Set the value of [sic_code] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setSicCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sic_code !== $v) {
			$this->sic_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::SIC_CODE;
		}

		return $this;
	} // setSicCode()

	/**
	 * Set the value of [naic_title] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNaicTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->naic_title !== $v) {
			$this->naic_title = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NAIC_TITLE;
		}

		return $this;
	} // setNaicTitle()

	/**
	 * Sets the value of [bind_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setBindDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->bind_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->bind_date !== null && $tmpDt = new DateTime($this->bind_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->bind_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::BIND_DATE;
			}
		} // if either are not null

		return $this;
	} // setBindDate()

	/**
	 * Set the value of [limit] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setLimit($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->limit !== $v) {
			$this->limit = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::LIMIT;
		}

		return $this;
	} // setLimit()

	/**
	 * Set the value of [attachment_point] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setAttachmentPoint($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->attachment_point !== $v) {
			$this->attachment_point = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::ATTACHMENT_POINT;
		}

		return $this;
	} // setAttachmentPoint()

	/**
	 * Set the value of [premium] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setPremium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->premium !== $v) {
			$this->premium = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::PREMIUM;
		}

		return $this;
	} // setPremium()

	/**
	 * Set the value of [endorsement_premium] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setEndorsementPremium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->endorsement_premium !== $v) {
			$this->endorsement_premium = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::ENDORSEMENT_PREMIUM;
		}

		return $this;
	} // setEndorsementPremium()

	/**
	 * Set the value of [net_premium] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNetPremium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->net_premium !== $v) {
			$this->net_premium = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NET_PREMIUM;
		}

		return $this;
	} // setNetPremium()

	/**
	 * Set the value of [commission] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setCommission($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->commission !== $v) {
			$this->commission = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::COMMISSION;
		}

		return $this;
	} // setCommission()

	/**
	 * Set the value of [total_insured_value] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setTotalInsuredValue($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->total_insured_value !== $v) {
			$this->total_insured_value = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::TOTAL_INSURED_VALUE;
		}

		return $this;
	} // setTotalInsuredValue()

	/**
	 * Set the value of [relativity] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setRelativity($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->relativity !== $v) {
			$this->relativity = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::RELATIVITY;
		}

		return $this;
	} // setRelativity()

	/**
	 * Sets the value of [by_berksi_from_broker] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setByBerksiFromBroker($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->by_berksi_from_broker !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->by_berksi_from_broker !== null && $tmpDt = new DateTime($this->by_berksi_from_broker)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->by_berksi_from_broker = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::BY_BERKSI_FROM_BROKER;
			}
		} // if either are not null

		return $this;
	} // setByBerksiFromBroker()

	/**
	 * Sets the value of [by_india_by_berksi] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setByIndiaByBerksi($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->by_india_by_berksi !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->by_india_by_berksi !== null && $tmpDt = new DateTime($this->by_india_by_berksi)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->by_india_by_berksi = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::BY_INDIA_BY_BERKSI;
			}
		} // if either are not null

		return $this;
	} // setByIndiaByBerksi()

	/**
	 * Set the value of [remarks] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setRemarks($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->remarks !== $v) {
			$this->remarks = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::REMARKS;
		}

		return $this;
	} // setRemarks()

	/**
	 * Set the value of [broker_code] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setBrokerCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->broker_code !== $v) {
			$this->broker_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::BROKER_CODE;
		}

		return $this;
	} // setBrokerCode()

	/**
	 * Set the value of [broker_type] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setBrokerType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->broker_type !== $v || $this->isNew()) {
			$this->broker_type = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::BROKER_TYPE;
		}

		return $this;
	} // setBrokerType()

	/**
	 * Set the value of [broker_name] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setBrokerName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->broker_name !== $v) {
			$this->broker_name = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::BROKER_NAME;
		}

		return $this;
	} // setBrokerName()

	/**
	 * Set the value of [broker_contact_person] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setBrokerContactPerson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->broker_contact_person !== $v) {
			$this->broker_contact_person = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::BROKER_CONTACT_PERSON;
		}

		return $this;
	} // setBrokerContactPerson()

	/**
	 * Set the value of [insured_name_dnb] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setInsuredNameDnb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insured_name_dnb !== $v) {
			$this->insured_name_dnb = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::INSURED_NAME_DNB;
		}

		return $this;
	} // setInsuredNameDnb()

	/**
	 * Set the value of [is_name_different] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setIsNameDifferent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->is_name_different !== $v || $this->isNew()) {
			$this->is_name_different = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::IS_NAME_DIFFERENT;
		}

		return $this;
	} // setIsNameDifferent()

	/**
	 * Set the value of [is_address_different] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setIsAddressDifferent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->is_address_different !== $v || $this->isNew()) {
			$this->is_address_different = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::IS_ADDRESS_DIFFERENT;
		}

		return $this;
	} // setIsAddressDifferent()

	/**
	 * Sets the value of [effective_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setEffectiveDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->effective_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->effective_date !== null && $tmpDt = new DateTime($this->effective_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->effective_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::EFFECTIVE_DATE;
			}
		} // if either are not null

		return $this;
	} // setEffectiveDate()

	/**
	 * Sets the value of [expiration_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setExpirationDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->expiration_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->expiration_date !== null && $tmpDt = new DateTime($this->expiration_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->expiration_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::EXPIRATION_DATE;
			}
		} // if either are not null

		return $this;
	} // setExpirationDate()

	/**
	 * Set the value of [new_submission_type] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewSubmissionType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_submission_type !== $v) {
			$this->new_submission_type = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_SUBMISSION_TYPE;
		}

		return $this;
	} // setNewSubmissionType()

	/**
	 * Set the value of [new_submission_branch_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewSubmissionBranchId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_submission_branch_id !== $v) {
			$this->new_submission_branch_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_SUBMISSION_BRANCH_ID;
		}

		return $this;
	} // setNewSubmissionBranchId()

	/**
	 * Set the value of [new_db_number] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewDbNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_db_number !== $v) {
			$this->new_db_number = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_DB_NUMBER;
		}

		return $this;
	} // setNewDbNumber()

	/**
	 * Set the value of [new_insured_name] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewInsuredName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_insured_name !== $v) {
			$this->new_insured_name = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_INSURED_NAME;
		}

		return $this;
	} // setNewInsuredName()

	/**
	 * Set the value of [new_user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_user_id !== $v) {
			$this->new_user_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_USER_ID;
		}

		return $this;
	} // setNewUserId()

	/**
	 * Set the value of [new_underwriter_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewUnderwriterId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_underwriter_id !== $v) {
			$this->new_underwriter_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_UNDERWRITER_ID;
		}

		return $this;
	} // setNewUnderwriterId()

	/**
	 * Set the value of [new_product_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewProductId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_product_id !== $v) {
			$this->new_product_id = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_PRODUCT_ID;
		}

		return $this;
	} // setNewProductId()

	/**
	 * Set the value of [new_primary_status] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewPrimaryStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_primary_status !== $v) {
			$this->new_primary_status = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_PRIMARY_STATUS;
		}

		return $this;
	} // setNewPrimaryStatus()

	/**
	 * Set the value of [new_reason_code] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewReasonCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_reason_code !== $v) {
			$this->new_reason_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_REASON_CODE;
		}

		return $this;
	} // setNewReasonCode()

	/**
	 * Set the value of [new_naic_code] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewNaicCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_naic_code !== $v) {
			$this->new_naic_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_NAIC_CODE;
		}

		return $this;
	} // setNewNaicCode()

	/**
	 * Set the value of [new_sic_code] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewSicCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_sic_code !== $v) {
			$this->new_sic_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_SIC_CODE;
		}

		return $this;
	} // setNewSicCode()

	/**
	 * Set the value of [new_naic_title] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewNaicTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_naic_title !== $v) {
			$this->new_naic_title = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_NAIC_TITLE;
		}

		return $this;
	} // setNewNaicTitle()

	/**
	 * Sets the value of [new_bind_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewBindDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->new_bind_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->new_bind_date !== null && $tmpDt = new DateTime($this->new_bind_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->new_bind_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BIND_DATE;
			}
		} // if either are not null

		return $this;
	} // setNewBindDate()

	/**
	 * Set the value of [new_limit] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewLimit($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_limit !== $v) {
			$this->new_limit = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_LIMIT;
		}

		return $this;
	} // setNewLimit()

	/**
	 * Set the value of [new_attachment_point] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewAttachmentPoint($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_attachment_point !== $v) {
			$this->new_attachment_point = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_ATTACHMENT_POINT;
		}

		return $this;
	} // setNewAttachmentPoint()

	/**
	 * Set the value of [new_premium] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewPremium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_premium !== $v) {
			$this->new_premium = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_PREMIUM;
		}

		return $this;
	} // setNewPremium()

	/**
	 * Set the value of [new_endorsement_premium] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewEndorsementPremium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_endorsement_premium !== $v) {
			$this->new_endorsement_premium = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_ENDORSEMENT_PREMIUM;
		}

		return $this;
	} // setNewEndorsementPremium()

	/**
	 * Set the value of [new_net_premium] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewNetPremium($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_net_premium !== $v) {
			$this->new_net_premium = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_NET_PREMIUM;
		}

		return $this;
	} // setNewNetPremium()

	/**
	 * Set the value of [new_commission] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewCommission($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_commission !== $v) {
			$this->new_commission = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_COMMISSION;
		}

		return $this;
	} // setNewCommission()

	/**
	 * Set the value of [new_total_insured_value] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewTotalInsuredValue($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_total_insured_value !== $v) {
			$this->new_total_insured_value = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_TOTAL_INSURED_VALUE;
		}

		return $this;
	} // setNewTotalInsuredValue()

	/**
	 * Set the value of [new_relativity] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewRelativity($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->new_relativity !== $v) {
			$this->new_relativity = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_RELATIVITY;
		}

		return $this;
	} // setNewRelativity()

	/**
	 * Sets the value of [new_by_berksi_from_broker] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewByBerksiFromBroker($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->new_by_berksi_from_broker !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->new_by_berksi_from_broker !== null && $tmpDt = new DateTime($this->new_by_berksi_from_broker)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->new_by_berksi_from_broker = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BY_BERKSI_FROM_BROKER;
			}
		} // if either are not null

		return $this;
	} // setNewByBerksiFromBroker()

	/**
	 * Sets the value of [new_by_india_by_berksi] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewByIndiaByBerksi($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->new_by_india_by_berksi !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->new_by_india_by_berksi !== null && $tmpDt = new DateTime($this->new_by_india_by_berksi)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->new_by_india_by_berksi = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BY_INDIA_BY_BERKSI;
			}
		} // if either are not null

		return $this;
	} // setNewByIndiaByBerksi()

	/**
	 * Set the value of [new_remarks] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewRemarks($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_remarks !== $v) {
			$this->new_remarks = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_REMARKS;
		}

		return $this;
	} // setNewRemarks()

	/**
	 * Set the value of [new_broker_code] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewBrokerCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_broker_code !== $v) {
			$this->new_broker_code = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BROKER_CODE;
		}

		return $this;
	} // setNewBrokerCode()

	/**
	 * Set the value of [new_broker_type] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewBrokerType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_broker_type !== $v || $this->isNew()) {
			$this->new_broker_type = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BROKER_TYPE;
		}

		return $this;
	} // setNewBrokerType()

	/**
	 * Set the value of [new_broker_name] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewBrokerName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_broker_name !== $v) {
			$this->new_broker_name = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BROKER_NAME;
		}

		return $this;
	} // setNewBrokerName()

	/**
	 * Set the value of [new_broker_contact_person] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewBrokerContactPerson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_broker_contact_person !== $v) {
			$this->new_broker_contact_person = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_BROKER_CONTACT_PERSON;
		}

		return $this;
	} // setNewBrokerContactPerson()

	/**
	 * Set the value of [new_insured_name_dnb] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewInsuredNameDnb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_insured_name_dnb !== $v) {
			$this->new_insured_name_dnb = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_INSURED_NAME_DNB;
		}

		return $this;
	} // setNewInsuredNameDnb()

	/**
	 * Set the value of [new_is_name_different] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewIsNameDifferent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_is_name_different !== $v || $this->isNew()) {
			$this->new_is_name_different = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_IS_NAME_DIFFERENT;
		}

		return $this;
	} // setNewIsNameDifferent()

	/**
	 * Set the value of [new_is_address_different] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewIsAddressDifferent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->new_is_address_different !== $v || $this->isNew()) {
			$this->new_is_address_different = $v;
			$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_IS_ADDRESS_DIFFERENT;
		}

		return $this;
	} // setNewIsAddressDifferent()

	/**
	 * Sets the value of [new_effective_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewEffectiveDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->new_effective_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->new_effective_date !== null && $tmpDt = new DateTime($this->new_effective_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->new_effective_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_EFFECTIVE_DATE;
			}
		} // if either are not null

		return $this;
	} // setNewEffectiveDate()

	/**
	 * Sets the value of [new_expiration_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setNewExpirationDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->new_expiration_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->new_expiration_date !== null && $tmpDt = new DateTime($this->new_expiration_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->new_expiration_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::NEW_EXPIRATION_DATE;
			}
		} // if either are not null

		return $this;
	} // setNewExpirationDate()

	/**
	 * Sets the value of [modify_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionHistory The current object (for fluent API support)
	 */
	public function setModifyDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->modify_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->modify_date !== null && $tmpDt = new DateTime($this->modify_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->modify_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionHistoryPeer::MODIFY_DATE;
			}
		} // if either are not null

		return $this;
	} // setModifyDate()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->broker_type !== 'R') {
				return false;
			}

			if ($this->is_name_different !== 'N') {
				return false;
			}

			if ($this->is_address_different !== 'N') {
				return false;
			}

			if ($this->new_broker_type !== 'R') {
				return false;
			}

			if ($this->new_is_name_different !== 'N') {
				return false;
			}

			if ($this->new_is_address_different !== 'N') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->submission_history_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->submission_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->submission_type = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->submission_branch_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->db_number = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->insured_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->user_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->underwriter_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->product_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->primary_status = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->reason_code = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->naic_code = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->sic_code = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->naic_title = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->bind_date = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->limit = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->attachment_point = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->premium = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->endorsement_premium = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->net_premium = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->commission = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->total_insured_value = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->relativity = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->by_berksi_from_broker = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->by_india_by_berksi = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->remarks = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->broker_code = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->broker_type = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->broker_name = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->broker_contact_person = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->insured_name_dnb = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->is_name_different = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->is_address_different = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->effective_date = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->expiration_date = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->new_submission_type = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->new_submission_branch_id = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->new_db_number = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->new_insured_name = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->new_user_id = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->new_underwriter_id = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->new_product_id = ($row[$startcol + 41] !== null) ? (int) $row[$startcol + 41] : null;
			$this->new_primary_status = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->new_reason_code = ($row[$startcol + 43] !== null) ? (int) $row[$startcol + 43] : null;
			$this->new_naic_code = ($row[$startcol + 44] !== null) ? (int) $row[$startcol + 44] : null;
			$this->new_sic_code = ($row[$startcol + 45] !== null) ? (int) $row[$startcol + 45] : null;
			$this->new_naic_title = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->new_bind_date = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->new_limit = ($row[$startcol + 48] !== null) ? (int) $row[$startcol + 48] : null;
			$this->new_attachment_point = ($row[$startcol + 49] !== null) ? (int) $row[$startcol + 49] : null;
			$this->new_premium = ($row[$startcol + 50] !== null) ? (int) $row[$startcol + 50] : null;
			$this->new_endorsement_premium = ($row[$startcol + 51] !== null) ? (int) $row[$startcol + 51] : null;
			$this->new_net_premium = ($row[$startcol + 52] !== null) ? (int) $row[$startcol + 52] : null;
			$this->new_commission = ($row[$startcol + 53] !== null) ? (int) $row[$startcol + 53] : null;
			$this->new_total_insured_value = ($row[$startcol + 54] !== null) ? (int) $row[$startcol + 54] : null;
			$this->new_relativity = ($row[$startcol + 55] !== null) ? (int) $row[$startcol + 55] : null;
			$this->new_by_berksi_from_broker = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->new_by_india_by_berksi = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
			$this->new_remarks = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->new_broker_code = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->new_broker_type = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
			$this->new_broker_name = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
			$this->new_broker_contact_person = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
			$this->new_insured_name_dnb = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
			$this->new_is_name_different = ($row[$startcol + 64] !== null) ? (string) $row[$startcol + 64] : null;
			$this->new_is_address_different = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->new_effective_date = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->new_expiration_date = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
			$this->modify_date = ($row[$startcol + 68] !== null) ? (string) $row[$startcol + 68] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 69; // 69 = SubmissionHistoryPeer::NUM_COLUMNS - SubmissionHistoryPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SubmissionHistory object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionHistoryPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SubmissionHistoryPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionHistoryPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSubmissionHistory:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				SubmissionHistoryPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSubmissionHistory:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionHistoryPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSubmissionHistory:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSubmissionHistory:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SubmissionHistoryPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SubmissionHistoryPeer::SUBMISSION_HISTORY_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SubmissionHistoryPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setSubmissionHistoryId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SubmissionHistoryPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = SubmissionHistoryPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SubmissionHistoryPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getSubmissionHistoryId();
				break;
			case 1:
				return $this->getSubmissionId();
				break;
			case 2:
				return $this->getSubmissionType();
				break;
			case 3:
				return $this->getSubmissionBranchId();
				break;
			case 4:
				return $this->getDbNumber();
				break;
			case 5:
				return $this->getInsuredName();
				break;
			case 6:
				return $this->getUserId();
				break;
			case 7:
				return $this->getUnderwriterId();
				break;
			case 8:
				return $this->getProductId();
				break;
			case 9:
				return $this->getPrimaryStatus();
				break;
			case 10:
				return $this->getReasonCode();
				break;
			case 11:
				return $this->getNaicCode();
				break;
			case 12:
				return $this->getSicCode();
				break;
			case 13:
				return $this->getNaicTitle();
				break;
			case 14:
				return $this->getBindDate();
				break;
			case 15:
				return $this->getLimit();
				break;
			case 16:
				return $this->getAttachmentPoint();
				break;
			case 17:
				return $this->getPremium();
				break;
			case 18:
				return $this->getEndorsementPremium();
				break;
			case 19:
				return $this->getNetPremium();
				break;
			case 20:
				return $this->getCommission();
				break;
			case 21:
				return $this->getTotalInsuredValue();
				break;
			case 22:
				return $this->getRelativity();
				break;
			case 23:
				return $this->getByBerksiFromBroker();
				break;
			case 24:
				return $this->getByIndiaByBerksi();
				break;
			case 25:
				return $this->getRemarks();
				break;
			case 26:
				return $this->getBrokerCode();
				break;
			case 27:
				return $this->getBrokerType();
				break;
			case 28:
				return $this->getBrokerName();
				break;
			case 29:
				return $this->getBrokerContactPerson();
				break;
			case 30:
				return $this->getInsuredNameDnb();
				break;
			case 31:
				return $this->getIsNameDifferent();
				break;
			case 32:
				return $this->getIsAddressDifferent();
				break;
			case 33:
				return $this->getEffectiveDate();
				break;
			case 34:
				return $this->getExpirationDate();
				break;
			case 35:
				return $this->getNewSubmissionType();
				break;
			case 36:
				return $this->getNewSubmissionBranchId();
				break;
			case 37:
				return $this->getNewDbNumber();
				break;
			case 38:
				return $this->getNewInsuredName();
				break;
			case 39:
				return $this->getNewUserId();
				break;
			case 40:
				return $this->getNewUnderwriterId();
				break;
			case 41:
				return $this->getNewProductId();
				break;
			case 42:
				return $this->getNewPrimaryStatus();
				break;
			case 43:
				return $this->getNewReasonCode();
				break;
			case 44:
				return $this->getNewNaicCode();
				break;
			case 45:
				return $this->getNewSicCode();
				break;
			case 46:
				return $this->getNewNaicTitle();
				break;
			case 47:
				return $this->getNewBindDate();
				break;
			case 48:
				return $this->getNewLimit();
				break;
			case 49:
				return $this->getNewAttachmentPoint();
				break;
			case 50:
				return $this->getNewPremium();
				break;
			case 51:
				return $this->getNewEndorsementPremium();
				break;
			case 52:
				return $this->getNewNetPremium();
				break;
			case 53:
				return $this->getNewCommission();
				break;
			case 54:
				return $this->getNewTotalInsuredValue();
				break;
			case 55:
				return $this->getNewRelativity();
				break;
			case 56:
				return $this->getNewByBerksiFromBroker();
				break;
			case 57:
				return $this->getNewByIndiaByBerksi();
				break;
			case 58:
				return $this->getNewRemarks();
				break;
			case 59:
				return $this->getNewBrokerCode();
				break;
			case 60:
				return $this->getNewBrokerType();
				break;
			case 61:
				return $this->getNewBrokerName();
				break;
			case 62:
				return $this->getNewBrokerContactPerson();
				break;
			case 63:
				return $this->getNewInsuredNameDnb();
				break;
			case 64:
				return $this->getNewIsNameDifferent();
				break;
			case 65:
				return $this->getNewIsAddressDifferent();
				break;
			case 66:
				return $this->getNewEffectiveDate();
				break;
			case 67:
				return $this->getNewExpirationDate();
				break;
			case 68:
				return $this->getModifyDate();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SubmissionHistoryPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getSubmissionHistoryId(),
			$keys[1] => $this->getSubmissionId(),
			$keys[2] => $this->getSubmissionType(),
			$keys[3] => $this->getSubmissionBranchId(),
			$keys[4] => $this->getDbNumber(),
			$keys[5] => $this->getInsuredName(),
			$keys[6] => $this->getUserId(),
			$keys[7] => $this->getUnderwriterId(),
			$keys[8] => $this->getProductId(),
			$keys[9] => $this->getPrimaryStatus(),
			$keys[10] => $this->getReasonCode(),
			$keys[11] => $this->getNaicCode(),
			$keys[12] => $this->getSicCode(),
			$keys[13] => $this->getNaicTitle(),
			$keys[14] => $this->getBindDate(),
			$keys[15] => $this->getLimit(),
			$keys[16] => $this->getAttachmentPoint(),
			$keys[17] => $this->getPremium(),
			$keys[18] => $this->getEndorsementPremium(),
			$keys[19] => $this->getNetPremium(),
			$keys[20] => $this->getCommission(),
			$keys[21] => $this->getTotalInsuredValue(),
			$keys[22] => $this->getRelativity(),
			$keys[23] => $this->getByBerksiFromBroker(),
			$keys[24] => $this->getByIndiaByBerksi(),
			$keys[25] => $this->getRemarks(),
			$keys[26] => $this->getBrokerCode(),
			$keys[27] => $this->getBrokerType(),
			$keys[28] => $this->getBrokerName(),
			$keys[29] => $this->getBrokerContactPerson(),
			$keys[30] => $this->getInsuredNameDnb(),
			$keys[31] => $this->getIsNameDifferent(),
			$keys[32] => $this->getIsAddressDifferent(),
			$keys[33] => $this->getEffectiveDate(),
			$keys[34] => $this->getExpirationDate(),
			$keys[35] => $this->getNewSubmissionType(),
			$keys[36] => $this->getNewSubmissionBranchId(),
			$keys[37] => $this->getNewDbNumber(),
			$keys[38] => $this->getNewInsuredName(),
			$keys[39] => $this->getNewUserId(),
			$keys[40] => $this->getNewUnderwriterId(),
			$keys[41] => $this->getNewProductId(),
			$keys[42] => $this->getNewPrimaryStatus(),
			$keys[43] => $this->getNewReasonCode(),
			$keys[44] => $this->getNewNaicCode(),
			$keys[45] => $this->getNewSicCode(),
			$keys[46] => $this->getNewNaicTitle(),
			$keys[47] => $this->getNewBindDate(),
			$keys[48] => $this->getNewLimit(),
			$keys[49] => $this->getNewAttachmentPoint(),
			$keys[50] => $this->getNewPremium(),
			$keys[51] => $this->getNewEndorsementPremium(),
			$keys[52] => $this->getNewNetPremium(),
			$keys[53] => $this->getNewCommission(),
			$keys[54] => $this->getNewTotalInsuredValue(),
			$keys[55] => $this->getNewRelativity(),
			$keys[56] => $this->getNewByBerksiFromBroker(),
			$keys[57] => $this->getNewByIndiaByBerksi(),
			$keys[58] => $this->getNewRemarks(),
			$keys[59] => $this->getNewBrokerCode(),
			$keys[60] => $this->getNewBrokerType(),
			$keys[61] => $this->getNewBrokerName(),
			$keys[62] => $this->getNewBrokerContactPerson(),
			$keys[63] => $this->getNewInsuredNameDnb(),
			$keys[64] => $this->getNewIsNameDifferent(),
			$keys[65] => $this->getNewIsAddressDifferent(),
			$keys[66] => $this->getNewEffectiveDate(),
			$keys[67] => $this->getNewExpirationDate(),
			$keys[68] => $this->getModifyDate(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SubmissionHistoryPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setSubmissionHistoryId($value);
				break;
			case 1:
				$this->setSubmissionId($value);
				break;
			case 2:
				$this->setSubmissionType($value);
				break;
			case 3:
				$this->setSubmissionBranchId($value);
				break;
			case 4:
				$this->setDbNumber($value);
				break;
			case 5:
				$this->setInsuredName($value);
				break;
			case 6:
				$this->setUserId($value);
				break;
			case 7:
				$this->setUnderwriterId($value);
				break;
			case 8:
				$this->setProductId($value);
				break;
			case 9:
				$this->setPrimaryStatus($value);
				break;
			case 10:
				$this->setReasonCode($value);
				break;
			case 11:
				$this->setNaicCode($value);
				break;
			case 12:
				$this->setSicCode($value);
				break;
			case 13:
				$this->setNaicTitle($value);
				break;
			case 14:
				$this->setBindDate($value);
				break;
			case 15:
				$this->setLimit($value);
				break;
			case 16:
				$this->setAttachmentPoint($value);
				break;
			case 17:
				$this->setPremium($value);
				break;
			case 18:
				$this->setEndorsementPremium($value);
				break;
			case 19:
				$this->setNetPremium($value);
				break;
			case 20:
				$this->setCommission($value);
				break;
			case 21:
				$this->setTotalInsuredValue($value);
				break;
			case 22:
				$this->setRelativity($value);
				break;
			case 23:
				$this->setByBerksiFromBroker($value);
				break;
			case 24:
				$this->setByIndiaByBerksi($value);
				break;
			case 25:
				$this->setRemarks($value);
				break;
			case 26:
				$this->setBrokerCode($value);
				break;
			case 27:
				$this->setBrokerType($value);
				break;
			case 28:
				$this->setBrokerName($value);
				break;
			case 29:
				$this->setBrokerContactPerson($value);
				break;
			case 30:
				$this->setInsuredNameDnb($value);
				break;
			case 31:
				$this->setIsNameDifferent($value);
				break;
			case 32:
				$this->setIsAddressDifferent($value);
				break;
			case 33:
				$this->setEffectiveDate($value);
				break;
			case 34:
				$this->setExpirationDate($value);
				break;
			case 35:
				$this->setNewSubmissionType($value);
				break;
			case 36:
				$this->setNewSubmissionBranchId($value);
				break;
			case 37:
				$this->setNewDbNumber($value);
				break;
			case 38:
				$this->setNewInsuredName($value);
				break;
			case 39:
				$this->setNewUserId($value);
				break;
			case 40:
				$this->setNewUnderwriterId($value);
				break;
			case 41:
				$this->setNewProductId($value);
				break;
			case 42:
				$this->setNewPrimaryStatus($value);
				break;
			case 43:
				$this->setNewReasonCode($value);
				break;
			case 44:
				$this->setNewNaicCode($value);
				break;
			case 45:
				$this->setNewSicCode($value);
				break;
			case 46:
				$this->setNewNaicTitle($value);
				break;
			case 47:
				$this->setNewBindDate($value);
				break;
			case 48:
				$this->setNewLimit($value);
				break;
			case 49:
				$this->setNewAttachmentPoint($value);
				break;
			case 50:
				$this->setNewPremium($value);
				break;
			case 51:
				$this->setNewEndorsementPremium($value);
				break;
			case 52:
				$this->setNewNetPremium($value);
				break;
			case 53:
				$this->setNewCommission($value);
				break;
			case 54:
				$this->setNewTotalInsuredValue($value);
				break;
			case 55:
				$this->setNewRelativity($value);
				break;
			case 56:
				$this->setNewByBerksiFromBroker($value);
				break;
			case 57:
				$this->setNewByIndiaByBerksi($value);
				break;
			case 58:
				$this->setNewRemarks($value);
				break;
			case 59:
				$this->setNewBrokerCode($value);
				break;
			case 60:
				$this->setNewBrokerType($value);
				break;
			case 61:
				$this->setNewBrokerName($value);
				break;
			case 62:
				$this->setNewBrokerContactPerson($value);
				break;
			case 63:
				$this->setNewInsuredNameDnb($value);
				break;
			case 64:
				$this->setNewIsNameDifferent($value);
				break;
			case 65:
				$this->setNewIsAddressDifferent($value);
				break;
			case 66:
				$this->setNewEffectiveDate($value);
				break;
			case 67:
				$this->setNewExpirationDate($value);
				break;
			case 68:
				$this->setModifyDate($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SubmissionHistoryPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setSubmissionHistoryId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSubmissionId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSubmissionType($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSubmissionBranchId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDbNumber($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setInsuredName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUserId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setUnderwriterId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setProductId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPrimaryStatus($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setReasonCode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setNaicCode($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSicCode($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setNaicTitle($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setBindDate($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setLimit($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setAttachmentPoint($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPremium($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setEndorsementPremium($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setNetPremium($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCommission($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setTotalInsuredValue($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setRelativity($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setByBerksiFromBroker($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setByIndiaByBerksi($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setRemarks($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setBrokerCode($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setBrokerType($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setBrokerName($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setBrokerContactPerson($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setInsuredNameDnb($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setIsNameDifferent($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setIsAddressDifferent($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setEffectiveDate($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setExpirationDate($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setNewSubmissionType($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setNewSubmissionBranchId($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setNewDbNumber($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setNewInsuredName($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setNewUserId($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setNewUnderwriterId($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setNewProductId($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setNewPrimaryStatus($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setNewReasonCode($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setNewNaicCode($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setNewSicCode($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setNewNaicTitle($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setNewBindDate($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setNewLimit($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setNewAttachmentPoint($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setNewPremium($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setNewEndorsementPremium($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setNewNetPremium($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setNewCommission($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setNewTotalInsuredValue($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setNewRelativity($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setNewByBerksiFromBroker($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setNewByIndiaByBerksi($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setNewRemarks($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setNewBrokerCode($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setNewBrokerType($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setNewBrokerName($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setNewBrokerContactPerson($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setNewInsuredNameDnb($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setNewIsNameDifferent($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setNewIsAddressDifferent($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setNewEffectiveDate($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setNewExpirationDate($arr[$keys[67]]);
		if (array_key_exists($keys[68], $arr)) $this->setModifyDate($arr[$keys[68]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SubmissionHistoryPeer::DATABASE_NAME);

		if ($this->isColumnModified(SubmissionHistoryPeer::SUBMISSION_HISTORY_ID)) $criteria->add(SubmissionHistoryPeer::SUBMISSION_HISTORY_ID, $this->submission_history_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::SUBMISSION_ID)) $criteria->add(SubmissionHistoryPeer::SUBMISSION_ID, $this->submission_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::SUBMISSION_TYPE)) $criteria->add(SubmissionHistoryPeer::SUBMISSION_TYPE, $this->submission_type);
		if ($this->isColumnModified(SubmissionHistoryPeer::SUBMISSION_BRANCH_ID)) $criteria->add(SubmissionHistoryPeer::SUBMISSION_BRANCH_ID, $this->submission_branch_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::DB_NUMBER)) $criteria->add(SubmissionHistoryPeer::DB_NUMBER, $this->db_number);
		if ($this->isColumnModified(SubmissionHistoryPeer::INSURED_NAME)) $criteria->add(SubmissionHistoryPeer::INSURED_NAME, $this->insured_name);
		if ($this->isColumnModified(SubmissionHistoryPeer::USER_ID)) $criteria->add(SubmissionHistoryPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::UNDERWRITER_ID)) $criteria->add(SubmissionHistoryPeer::UNDERWRITER_ID, $this->underwriter_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::PRODUCT_ID)) $criteria->add(SubmissionHistoryPeer::PRODUCT_ID, $this->product_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::PRIMARY_STATUS)) $criteria->add(SubmissionHistoryPeer::PRIMARY_STATUS, $this->primary_status);
		if ($this->isColumnModified(SubmissionHistoryPeer::REASON_CODE)) $criteria->add(SubmissionHistoryPeer::REASON_CODE, $this->reason_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::NAIC_CODE)) $criteria->add(SubmissionHistoryPeer::NAIC_CODE, $this->naic_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::SIC_CODE)) $criteria->add(SubmissionHistoryPeer::SIC_CODE, $this->sic_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::NAIC_TITLE)) $criteria->add(SubmissionHistoryPeer::NAIC_TITLE, $this->naic_title);
		if ($this->isColumnModified(SubmissionHistoryPeer::BIND_DATE)) $criteria->add(SubmissionHistoryPeer::BIND_DATE, $this->bind_date);
		if ($this->isColumnModified(SubmissionHistoryPeer::LIMIT)) $criteria->add(SubmissionHistoryPeer::LIMIT, $this->limit);
		if ($this->isColumnModified(SubmissionHistoryPeer::ATTACHMENT_POINT)) $criteria->add(SubmissionHistoryPeer::ATTACHMENT_POINT, $this->attachment_point);
		if ($this->isColumnModified(SubmissionHistoryPeer::PREMIUM)) $criteria->add(SubmissionHistoryPeer::PREMIUM, $this->premium);
		if ($this->isColumnModified(SubmissionHistoryPeer::ENDORSEMENT_PREMIUM)) $criteria->add(SubmissionHistoryPeer::ENDORSEMENT_PREMIUM, $this->endorsement_premium);
		if ($this->isColumnModified(SubmissionHistoryPeer::NET_PREMIUM)) $criteria->add(SubmissionHistoryPeer::NET_PREMIUM, $this->net_premium);
		if ($this->isColumnModified(SubmissionHistoryPeer::COMMISSION)) $criteria->add(SubmissionHistoryPeer::COMMISSION, $this->commission);
		if ($this->isColumnModified(SubmissionHistoryPeer::TOTAL_INSURED_VALUE)) $criteria->add(SubmissionHistoryPeer::TOTAL_INSURED_VALUE, $this->total_insured_value);
		if ($this->isColumnModified(SubmissionHistoryPeer::RELATIVITY)) $criteria->add(SubmissionHistoryPeer::RELATIVITY, $this->relativity);
		if ($this->isColumnModified(SubmissionHistoryPeer::BY_BERKSI_FROM_BROKER)) $criteria->add(SubmissionHistoryPeer::BY_BERKSI_FROM_BROKER, $this->by_berksi_from_broker);
		if ($this->isColumnModified(SubmissionHistoryPeer::BY_INDIA_BY_BERKSI)) $criteria->add(SubmissionHistoryPeer::BY_INDIA_BY_BERKSI, $this->by_india_by_berksi);
		if ($this->isColumnModified(SubmissionHistoryPeer::REMARKS)) $criteria->add(SubmissionHistoryPeer::REMARKS, $this->remarks);
		if ($this->isColumnModified(SubmissionHistoryPeer::BROKER_CODE)) $criteria->add(SubmissionHistoryPeer::BROKER_CODE, $this->broker_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::BROKER_TYPE)) $criteria->add(SubmissionHistoryPeer::BROKER_TYPE, $this->broker_type);
		if ($this->isColumnModified(SubmissionHistoryPeer::BROKER_NAME)) $criteria->add(SubmissionHistoryPeer::BROKER_NAME, $this->broker_name);
		if ($this->isColumnModified(SubmissionHistoryPeer::BROKER_CONTACT_PERSON)) $criteria->add(SubmissionHistoryPeer::BROKER_CONTACT_PERSON, $this->broker_contact_person);
		if ($this->isColumnModified(SubmissionHistoryPeer::INSURED_NAME_DNB)) $criteria->add(SubmissionHistoryPeer::INSURED_NAME_DNB, $this->insured_name_dnb);
		if ($this->isColumnModified(SubmissionHistoryPeer::IS_NAME_DIFFERENT)) $criteria->add(SubmissionHistoryPeer::IS_NAME_DIFFERENT, $this->is_name_different);
		if ($this->isColumnModified(SubmissionHistoryPeer::IS_ADDRESS_DIFFERENT)) $criteria->add(SubmissionHistoryPeer::IS_ADDRESS_DIFFERENT, $this->is_address_different);
		if ($this->isColumnModified(SubmissionHistoryPeer::EFFECTIVE_DATE)) $criteria->add(SubmissionHistoryPeer::EFFECTIVE_DATE, $this->effective_date);
		if ($this->isColumnModified(SubmissionHistoryPeer::EXPIRATION_DATE)) $criteria->add(SubmissionHistoryPeer::EXPIRATION_DATE, $this->expiration_date);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_SUBMISSION_TYPE)) $criteria->add(SubmissionHistoryPeer::NEW_SUBMISSION_TYPE, $this->new_submission_type);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_SUBMISSION_BRANCH_ID)) $criteria->add(SubmissionHistoryPeer::NEW_SUBMISSION_BRANCH_ID, $this->new_submission_branch_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_DB_NUMBER)) $criteria->add(SubmissionHistoryPeer::NEW_DB_NUMBER, $this->new_db_number);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_INSURED_NAME)) $criteria->add(SubmissionHistoryPeer::NEW_INSURED_NAME, $this->new_insured_name);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_USER_ID)) $criteria->add(SubmissionHistoryPeer::NEW_USER_ID, $this->new_user_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_UNDERWRITER_ID)) $criteria->add(SubmissionHistoryPeer::NEW_UNDERWRITER_ID, $this->new_underwriter_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_PRODUCT_ID)) $criteria->add(SubmissionHistoryPeer::NEW_PRODUCT_ID, $this->new_product_id);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_PRIMARY_STATUS)) $criteria->add(SubmissionHistoryPeer::NEW_PRIMARY_STATUS, $this->new_primary_status);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_REASON_CODE)) $criteria->add(SubmissionHistoryPeer::NEW_REASON_CODE, $this->new_reason_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_NAIC_CODE)) $criteria->add(SubmissionHistoryPeer::NEW_NAIC_CODE, $this->new_naic_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_SIC_CODE)) $criteria->add(SubmissionHistoryPeer::NEW_SIC_CODE, $this->new_sic_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_NAIC_TITLE)) $criteria->add(SubmissionHistoryPeer::NEW_NAIC_TITLE, $this->new_naic_title);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BIND_DATE)) $criteria->add(SubmissionHistoryPeer::NEW_BIND_DATE, $this->new_bind_date);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_LIMIT)) $criteria->add(SubmissionHistoryPeer::NEW_LIMIT, $this->new_limit);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_ATTACHMENT_POINT)) $criteria->add(SubmissionHistoryPeer::NEW_ATTACHMENT_POINT, $this->new_attachment_point);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_PREMIUM)) $criteria->add(SubmissionHistoryPeer::NEW_PREMIUM, $this->new_premium);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_ENDORSEMENT_PREMIUM)) $criteria->add(SubmissionHistoryPeer::NEW_ENDORSEMENT_PREMIUM, $this->new_endorsement_premium);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_NET_PREMIUM)) $criteria->add(SubmissionHistoryPeer::NEW_NET_PREMIUM, $this->new_net_premium);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_COMMISSION)) $criteria->add(SubmissionHistoryPeer::NEW_COMMISSION, $this->new_commission);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_TOTAL_INSURED_VALUE)) $criteria->add(SubmissionHistoryPeer::NEW_TOTAL_INSURED_VALUE, $this->new_total_insured_value);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_RELATIVITY)) $criteria->add(SubmissionHistoryPeer::NEW_RELATIVITY, $this->new_relativity);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BY_BERKSI_FROM_BROKER)) $criteria->add(SubmissionHistoryPeer::NEW_BY_BERKSI_FROM_BROKER, $this->new_by_berksi_from_broker);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BY_INDIA_BY_BERKSI)) $criteria->add(SubmissionHistoryPeer::NEW_BY_INDIA_BY_BERKSI, $this->new_by_india_by_berksi);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_REMARKS)) $criteria->add(SubmissionHistoryPeer::NEW_REMARKS, $this->new_remarks);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BROKER_CODE)) $criteria->add(SubmissionHistoryPeer::NEW_BROKER_CODE, $this->new_broker_code);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BROKER_TYPE)) $criteria->add(SubmissionHistoryPeer::NEW_BROKER_TYPE, $this->new_broker_type);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BROKER_NAME)) $criteria->add(SubmissionHistoryPeer::NEW_BROKER_NAME, $this->new_broker_name);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_BROKER_CONTACT_PERSON)) $criteria->add(SubmissionHistoryPeer::NEW_BROKER_CONTACT_PERSON, $this->new_broker_contact_person);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_INSURED_NAME_DNB)) $criteria->add(SubmissionHistoryPeer::NEW_INSURED_NAME_DNB, $this->new_insured_name_dnb);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_IS_NAME_DIFFERENT)) $criteria->add(SubmissionHistoryPeer::NEW_IS_NAME_DIFFERENT, $this->new_is_name_different);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_IS_ADDRESS_DIFFERENT)) $criteria->add(SubmissionHistoryPeer::NEW_IS_ADDRESS_DIFFERENT, $this->new_is_address_different);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_EFFECTIVE_DATE)) $criteria->add(SubmissionHistoryPeer::NEW_EFFECTIVE_DATE, $this->new_effective_date);
		if ($this->isColumnModified(SubmissionHistoryPeer::NEW_EXPIRATION_DATE)) $criteria->add(SubmissionHistoryPeer::NEW_EXPIRATION_DATE, $this->new_expiration_date);
		if ($this->isColumnModified(SubmissionHistoryPeer::MODIFY_DATE)) $criteria->add(SubmissionHistoryPeer::MODIFY_DATE, $this->modify_date);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SubmissionHistoryPeer::DATABASE_NAME);

		$criteria->add(SubmissionHistoryPeer::SUBMISSION_HISTORY_ID, $this->submission_history_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getSubmissionHistoryId();
	}

	/**
	 * Generic method to set the primary key (submission_history_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setSubmissionHistoryId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SubmissionHistory (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSubmissionId($this->submission_id);

		$copyObj->setSubmissionType($this->submission_type);

		$copyObj->setSubmissionBranchId($this->submission_branch_id);

		$copyObj->setDbNumber($this->db_number);

		$copyObj->setInsuredName($this->insured_name);

		$copyObj->setUserId($this->user_id);

		$copyObj->setUnderwriterId($this->underwriter_id);

		$copyObj->setProductId($this->product_id);

		$copyObj->setPrimaryStatus($this->primary_status);

		$copyObj->setReasonCode($this->reason_code);

		$copyObj->setNaicCode($this->naic_code);

		$copyObj->setSicCode($this->sic_code);

		$copyObj->setNaicTitle($this->naic_title);

		$copyObj->setBindDate($this->bind_date);

		$copyObj->setLimit($this->limit);

		$copyObj->setAttachmentPoint($this->attachment_point);

		$copyObj->setPremium($this->premium);

		$copyObj->setEndorsementPremium($this->endorsement_premium);

		$copyObj->setNetPremium($this->net_premium);

		$copyObj->setCommission($this->commission);

		$copyObj->setTotalInsuredValue($this->total_insured_value);

		$copyObj->setRelativity($this->relativity);

		$copyObj->setByBerksiFromBroker($this->by_berksi_from_broker);

		$copyObj->setByIndiaByBerksi($this->by_india_by_berksi);

		$copyObj->setRemarks($this->remarks);

		$copyObj->setBrokerCode($this->broker_code);

		$copyObj->setBrokerType($this->broker_type);

		$copyObj->setBrokerName($this->broker_name);

		$copyObj->setBrokerContactPerson($this->broker_contact_person);

		$copyObj->setInsuredNameDnb($this->insured_name_dnb);

		$copyObj->setIsNameDifferent($this->is_name_different);

		$copyObj->setIsAddressDifferent($this->is_address_different);

		$copyObj->setEffectiveDate($this->effective_date);

		$copyObj->setExpirationDate($this->expiration_date);

		$copyObj->setNewSubmissionType($this->new_submission_type);

		$copyObj->setNewSubmissionBranchId($this->new_submission_branch_id);

		$copyObj->setNewDbNumber($this->new_db_number);

		$copyObj->setNewInsuredName($this->new_insured_name);

		$copyObj->setNewUserId($this->new_user_id);

		$copyObj->setNewUnderwriterId($this->new_underwriter_id);

		$copyObj->setNewProductId($this->new_product_id);

		$copyObj->setNewPrimaryStatus($this->new_primary_status);

		$copyObj->setNewReasonCode($this->new_reason_code);

		$copyObj->setNewNaicCode($this->new_naic_code);

		$copyObj->setNewSicCode($this->new_sic_code);

		$copyObj->setNewNaicTitle($this->new_naic_title);

		$copyObj->setNewBindDate($this->new_bind_date);

		$copyObj->setNewLimit($this->new_limit);

		$copyObj->setNewAttachmentPoint($this->new_attachment_point);

		$copyObj->setNewPremium($this->new_premium);

		$copyObj->setNewEndorsementPremium($this->new_endorsement_premium);

		$copyObj->setNewNetPremium($this->new_net_premium);

		$copyObj->setNewCommission($this->new_commission);

		$copyObj->setNewTotalInsuredValue($this->new_total_insured_value);

		$copyObj->setNewRelativity($this->new_relativity);

		$copyObj->setNewByBerksiFromBroker($this->new_by_berksi_from_broker);

		$copyObj->setNewByIndiaByBerksi($this->new_by_india_by_berksi);

		$copyObj->setNewRemarks($this->new_remarks);

		$copyObj->setNewBrokerCode($this->new_broker_code);

		$copyObj->setNewBrokerType($this->new_broker_type);

		$copyObj->setNewBrokerName($this->new_broker_name);

		$copyObj->setNewBrokerContactPerson($this->new_broker_contact_person);

		$copyObj->setNewInsuredNameDnb($this->new_insured_name_dnb);

		$copyObj->setNewIsNameDifferent($this->new_is_name_different);

		$copyObj->setNewIsAddressDifferent($this->new_is_address_different);

		$copyObj->setNewEffectiveDate($this->new_effective_date);

		$copyObj->setNewExpirationDate($this->new_expiration_date);

		$copyObj->setModifyDate($this->modify_date);


		$copyObj->setNew(true);

		$copyObj->setSubmissionHistoryId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SubmissionHistory Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SubmissionHistoryPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SubmissionHistoryPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSubmissionHistory:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSubmissionHistory::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSubmissionHistory
