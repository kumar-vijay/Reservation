<?php

/**
 * Base class that represents a row from the 'Submission' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Apr  1 12:06:52 2014
 *
 * @package    lib.model.om
 */
abstract class BaseSubmission extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SubmissionPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the submissionnumber field.
	 * @var        string
	 */
	protected $submissionnumber;

	/**
	 * The value for the newrenewallookupid field.
	 * @var        int
	 */
	protected $newrenewallookupid;

	/**
	 * The value for the underwriterid field.
	 * @var        int
	 */
	protected $underwriterid;

	/**
	 * The value for the lobid field.
	 * @var        int
	 */
	protected $lobid;

	/**
	 * The value for the lobsubtypeid field.
	 * @var        int
	 */
	protected $lobsubtypeid;

	/**
	 * The value for the sectionid field.
	 * @var        int
	 */
	protected $sectionid;

	/**
	 * The value for the profitcodeid field.
	 * @var        int
	 */
	protected $profitcodeid;

	/**
	 * The value for the currentstatusid field.
	 * @var        int
	 */
	protected $currentstatusid;

	/**
	 * The value for the effectivedate field.
	 * @var        string
	 */
	protected $effectivedate;

	/**
	 * The value for the expirydate field.
	 * @var        string
	 */
	protected $expirydate;

	/**
	 * The value for the insuredid field.
	 * @var        int
	 */
	protected $insuredid;

	/**
	 * The value for the isdifferentdba field.
	 * @var        int
	 */
	protected $isdifferentdba;

	/**
	 * The value for the isdifferentmaillingaddress field.
	 * @var        int
	 */
	protected $isdifferentmaillingaddress;

	/**
	 * The value for the dbaname field.
	 * @var        string
	 */
	protected $dbaname;

	/**
	 * The value for the alternativeaddressid field.
	 * @var        int
	 */
	protected $alternativeaddressid;

	/**
	 * The value for the dbnumber field.
	 * @var        string
	 */
	protected $dbnumber;

	/**
	 * The value for the cabcompanieslookupid field.
	 * @var        int
	 */
	protected $cabcompanieslookupid;

	/**
	 * The value for the reinsuredcompany field.
	 * @var        string
	 */
	protected $reinsuredcompany;

	/**
	 * The value for the businessdependentdetailid field.
	 * @var        int
	 */
	protected $businessdependentdetailid;

	/**
	 * The value for the totalinsuredvalue field.
	 * @var        string
	 */
	protected $totalinsuredvalue;

	/**
	 * The value for the brokerwisecityid field.
	 * @var        int
	 */
	protected $brokerwisecityid;

	/**
	 * The value for the brokercontactperson field.
	 * @var        string
	 */
	protected $brokercontactperson;

	/**
	 * The value for the brokercontactpersonemail field.
	 * @var        string
	 */
	protected $brokercontactpersonemail;

	/**
	 * The value for the brokercontactpersonnumber field.
	 * @var        string
	 */
	protected $brokercontactpersonnumber;

	/**
	 * The value for the brokercode field.
	 * @var        string
	 */
	protected $brokercode;

	/**
	 * The value for the statusdependentdetailsid field.
	 * @var        int
	 */
	protected $statusdependentdetailsid;

	/**
	 * The value for the berksidatefrombroker field.
	 * @var        string
	 */
	protected $berksidatefrombroker;

	/**
	 * The value for the berksidatefromindia field.
	 * @var        string
	 */
	protected $berksidatefromindia;

	/**
	 * The value for the branchid field.
	 * @var        int
	 */
	protected $branchid;

	/**
	 * @var        Lookup
	 */
	protected $aLookupRelatedByNewrenewallookupid;

	/**
	 * @var        Underwriter
	 */
	protected $aUnderwriter;

	/**
	 * @var        Lob
	 */
	protected $aLob;

	/**
	 * @var        Lobsubtype
	 */
	protected $aLobsubtype;

	/**
	 * @var        Sectioncode
	 */
	protected $aSectioncode;

	/**
	 * @var        Profitcode
	 */
	protected $aProfitcode;

	/**
	 * @var        Status
	 */
	protected $aStatus;

	/**
	 * @var        Insured
	 */
	protected $aInsured;

	/**
	 * @var        Address
	 */
	protected $aAddress;

	/**
	 * @var        Lookup
	 */
	protected $aLookupRelatedByCabcompanieslookupid;

	/**
	 * @var        Businessdependentdetail
	 */
	protected $aBusinessdependentdetail;

	/**
	 * @var        Statusdependentdetails
	 */
	protected $aStatusdependentdetails;

	/**
	 * @var        Branch
	 */
	protected $aBranch;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SubmissionPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [submissionnumber] column value.
	 * 
	 * @return     string
	 */
	public function getSubmissionnumber()
	{
		return $this->submissionnumber;
	}

	/**
	 * Get the [newrenewallookupid] column value.
	 * 
	 * @return     int
	 */
	public function getNewrenewallookupid()
	{
		return $this->newrenewallookupid;
	}

	/**
	 * Get the [underwriterid] column value.
	 * 
	 * @return     int
	 */
	public function getUnderwriterid()
	{
		return $this->underwriterid;
	}

	/**
	 * Get the [lobid] column value.
	 * 
	 * @return     int
	 */
	public function getLobid()
	{
		return $this->lobid;
	}

	/**
	 * Get the [lobsubtypeid] column value.
	 * 
	 * @return     int
	 */
	public function getLobsubtypeid()
	{
		return $this->lobsubtypeid;
	}

	/**
	 * Get the [sectionid] column value.
	 * 
	 * @return     int
	 */
	public function getSectionid()
	{
		return $this->sectionid;
	}

	/**
	 * Get the [profitcodeid] column value.
	 * 
	 * @return     int
	 */
	public function getProfitcodeid()
	{
		return $this->profitcodeid;
	}

	/**
	 * Get the [currentstatusid] column value.
	 * 
	 * @return     int
	 */
	public function getCurrentstatusid()
	{
		return $this->currentstatusid;
	}

	/**
	 * Get the [optionally formatted] temporal [effectivedate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEffectivedate($format = 'Y-m-d H:i:s')
	{
		if ($this->effectivedate === null) {
			return null;
		}


		if ($this->effectivedate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->effectivedate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->effectivedate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [expirydate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getExpirydate($format = 'Y-m-d H:i:s')
	{
		if ($this->expirydate === null) {
			return null;
		}


		if ($this->expirydate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->expirydate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->expirydate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [insuredid] column value.
	 * 
	 * @return     int
	 */
	public function getInsuredid()
	{
		return $this->insuredid;
	}

	/**
	 * Get the [isdifferentdba] column value.
	 * 
	 * @return     int
	 */
	public function getIsdifferentdba()
	{
		return $this->isdifferentdba;
	}

	/**
	 * Get the [isdifferentmaillingaddress] column value.
	 * 
	 * @return     int
	 */
	public function getIsdifferentmaillingaddress()
	{
		return $this->isdifferentmaillingaddress;
	}

	/**
	 * Get the [dbaname] column value.
	 * 
	 * @return     string
	 */
	public function getDbaname()
	{
		return $this->dbaname;
	}

	/**
	 * Get the [alternativeaddressid] column value.
	 * 
	 * @return     int
	 */
	public function getAlternativeaddressid()
	{
		return $this->alternativeaddressid;
	}

	/**
	 * Get the [dbnumber] column value.
	 * 
	 * @return     string
	 */
	public function getDbnumber()
	{
		return $this->dbnumber;
	}

	/**
	 * Get the [cabcompanieslookupid] column value.
	 * 
	 * @return     int
	 */
	public function getCabcompanieslookupid()
	{
		return $this->cabcompanieslookupid;
	}

	/**
	 * Get the [reinsuredcompany] column value.
	 * 
	 * @return     string
	 */
	public function getReinsuredcompany()
	{
		return $this->reinsuredcompany;
	}

	/**
	 * Get the [businessdependentdetailid] column value.
	 * 
	 * @return     int
	 */
	public function getBusinessdependentdetailid()
	{
		return $this->businessdependentdetailid;
	}

	/**
	 * Get the [totalinsuredvalue] column value.
	 * 
	 * @return     string
	 */
	public function getTotalinsuredvalue()
	{
		return $this->totalinsuredvalue;
	}

	/**
	 * Get the [brokerwisecityid] column value.
	 * 
	 * @return     int
	 */
	public function getBrokerwisecityid()
	{
		return $this->brokerwisecityid;
	}

	/**
	 * Get the [brokercontactperson] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactperson()
	{
		return $this->brokercontactperson;
	}

	/**
	 * Get the [brokercontactpersonemail] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactpersonemail()
	{
		return $this->brokercontactpersonemail;
	}

	/**
	 * Get the [brokercontactpersonnumber] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactpersonnumber()
	{
		return $this->brokercontactpersonnumber;
	}

	/**
	 * Get the [brokercode] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercode()
	{
		return $this->brokercode;
	}

	/**
	 * Get the [statusdependentdetailsid] column value.
	 * 
	 * @return     int
	 */
	public function getStatusdependentdetailsid()
	{
		return $this->statusdependentdetailsid;
	}

	/**
	 * Get the [optionally formatted] temporal [berksidatefrombroker] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBerksidatefrombroker($format = 'Y-m-d H:i:s')
	{
		if ($this->berksidatefrombroker === null) {
			return null;
		}


		if ($this->berksidatefrombroker === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->berksidatefrombroker);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->berksidatefrombroker, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [berksidatefromindia] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBerksidatefromindia($format = 'Y-m-d H:i:s')
	{
		if ($this->berksidatefromindia === null) {
			return null;
		}


		if ($this->berksidatefromindia === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->berksidatefromindia);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->berksidatefromindia, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [branchid] column value.
	 * 
	 * @return     int
	 */
	public function getBranchid()
	{
		return $this->branchid;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = SubmissionPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [submissionnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setSubmissionnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->submissionnumber !== $v) {
			$this->submissionnumber = $v;
			$this->modifiedColumns[] = SubmissionPeer::SUBMISSIONNUMBER;
		}

		return $this;
	} // setSubmissionnumber()

	/**
	 * Set the value of [newrenewallookupid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setNewrenewallookupid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->newrenewallookupid !== $v) {
			$this->newrenewallookupid = $v;
			$this->modifiedColumns[] = SubmissionPeer::NEWRENEWALLOOKUPID;
		}

		if ($this->aLookupRelatedByNewrenewallookupid !== null && $this->aLookupRelatedByNewrenewallookupid->getId() !== $v) {
			$this->aLookupRelatedByNewrenewallookupid = null;
		}

		return $this;
	} // setNewrenewallookupid()

	/**
	 * Set the value of [underwriterid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setUnderwriterid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->underwriterid !== $v) {
			$this->underwriterid = $v;
			$this->modifiedColumns[] = SubmissionPeer::UNDERWRITERID;
		}

		if ($this->aUnderwriter !== null && $this->aUnderwriter->getId() !== $v) {
			$this->aUnderwriter = null;
		}

		return $this;
	} // setUnderwriterid()

	/**
	 * Set the value of [lobid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setLobid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->lobid !== $v) {
			$this->lobid = $v;
			$this->modifiedColumns[] = SubmissionPeer::LOBID;
		}

		if ($this->aLob !== null && $this->aLob->getId() !== $v) {
			$this->aLob = null;
		}

		return $this;
	} // setLobid()

	/**
	 * Set the value of [lobsubtypeid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setLobsubtypeid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->lobsubtypeid !== $v) {
			$this->lobsubtypeid = $v;
			$this->modifiedColumns[] = SubmissionPeer::LOBSUBTYPEID;
		}

		if ($this->aLobsubtype !== null && $this->aLobsubtype->getId() !== $v) {
			$this->aLobsubtype = null;
		}

		return $this;
	} // setLobsubtypeid()

	/**
	 * Set the value of [sectionid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setSectionid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sectionid !== $v) {
			$this->sectionid = $v;
			$this->modifiedColumns[] = SubmissionPeer::SECTIONID;
		}

		if ($this->aSectioncode !== null && $this->aSectioncode->getId() !== $v) {
			$this->aSectioncode = null;
		}

		return $this;
	} // setSectionid()

	/**
	 * Set the value of [profitcodeid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setProfitcodeid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profitcodeid !== $v) {
			$this->profitcodeid = $v;
			$this->modifiedColumns[] = SubmissionPeer::PROFITCODEID;
		}

		if ($this->aProfitcode !== null && $this->aProfitcode->getId() !== $v) {
			$this->aProfitcode = null;
		}

		return $this;
	} // setProfitcodeid()

	/**
	 * Set the value of [currentstatusid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setCurrentstatusid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->currentstatusid !== $v) {
			$this->currentstatusid = $v;
			$this->modifiedColumns[] = SubmissionPeer::CURRENTSTATUSID;
		}

		if ($this->aStatus !== null && $this->aStatus->getId() !== $v) {
			$this->aStatus = null;
		}

		return $this;
	} // setCurrentstatusid()

	/**
	 * Sets the value of [effectivedate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setEffectivedate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->effectivedate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->effectivedate !== null && $tmpDt = new DateTime($this->effectivedate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->effectivedate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionPeer::EFFECTIVEDATE;
			}
		} // if either are not null

		return $this;
	} // setEffectivedate()

	/**
	 * Sets the value of [expirydate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setExpirydate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->expirydate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->expirydate !== null && $tmpDt = new DateTime($this->expirydate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->expirydate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionPeer::EXPIRYDATE;
			}
		} // if either are not null

		return $this;
	} // setExpirydate()

	/**
	 * Set the value of [insuredid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setInsuredid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->insuredid !== $v) {
			$this->insuredid = $v;
			$this->modifiedColumns[] = SubmissionPeer::INSUREDID;
		}

		if ($this->aInsured !== null && $this->aInsured->getId() !== $v) {
			$this->aInsured = null;
		}

		return $this;
	} // setInsuredid()

	/**
	 * Set the value of [isdifferentdba] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setIsdifferentdba($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isdifferentdba !== $v) {
			$this->isdifferentdba = $v;
			$this->modifiedColumns[] = SubmissionPeer::ISDIFFERENTDBA;
		}

		return $this;
	} // setIsdifferentdba()

	/**
	 * Set the value of [isdifferentmaillingaddress] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setIsdifferentmaillingaddress($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isdifferentmaillingaddress !== $v) {
			$this->isdifferentmaillingaddress = $v;
			$this->modifiedColumns[] = SubmissionPeer::ISDIFFERENTMAILLINGADDRESS;
		}

		return $this;
	} // setIsdifferentmaillingaddress()

	/**
	 * Set the value of [dbaname] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setDbaname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dbaname !== $v) {
			$this->dbaname = $v;
			$this->modifiedColumns[] = SubmissionPeer::DBANAME;
		}

		return $this;
	} // setDbaname()

	/**
	 * Set the value of [alternativeaddressid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setAlternativeaddressid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->alternativeaddressid !== $v) {
			$this->alternativeaddressid = $v;
			$this->modifiedColumns[] = SubmissionPeer::ALTERNATIVEADDRESSID;
		}

		if ($this->aAddress !== null && $this->aAddress->getId() !== $v) {
			$this->aAddress = null;
		}

		return $this;
	} // setAlternativeaddressid()

	/**
	 * Set the value of [dbnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setDbnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dbnumber !== $v) {
			$this->dbnumber = $v;
			$this->modifiedColumns[] = SubmissionPeer::DBNUMBER;
		}

		return $this;
	} // setDbnumber()

	/**
	 * Set the value of [cabcompanieslookupid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setCabcompanieslookupid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cabcompanieslookupid !== $v) {
			$this->cabcompanieslookupid = $v;
			$this->modifiedColumns[] = SubmissionPeer::CABCOMPANIESLOOKUPID;
		}

		if ($this->aLookupRelatedByCabcompanieslookupid !== null && $this->aLookupRelatedByCabcompanieslookupid->getId() !== $v) {
			$this->aLookupRelatedByCabcompanieslookupid = null;
		}

		return $this;
	} // setCabcompanieslookupid()

	/**
	 * Set the value of [reinsuredcompany] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setReinsuredcompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reinsuredcompany !== $v) {
			$this->reinsuredcompany = $v;
			$this->modifiedColumns[] = SubmissionPeer::REINSUREDCOMPANY;
		}

		return $this;
	} // setReinsuredcompany()

	/**
	 * Set the value of [businessdependentdetailid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBusinessdependentdetailid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->businessdependentdetailid !== $v) {
			$this->businessdependentdetailid = $v;
			$this->modifiedColumns[] = SubmissionPeer::BUSINESSDEPENDENTDETAILID;
		}

		if ($this->aBusinessdependentdetail !== null && $this->aBusinessdependentdetail->getId() !== $v) {
			$this->aBusinessdependentdetail = null;
		}

		return $this;
	} // setBusinessdependentdetailid()

	/**
	 * Set the value of [totalinsuredvalue] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setTotalinsuredvalue($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->totalinsuredvalue !== $v) {
			$this->totalinsuredvalue = $v;
			$this->modifiedColumns[] = SubmissionPeer::TOTALINSUREDVALUE;
		}

		return $this;
	} // setTotalinsuredvalue()

	/**
	 * Set the value of [brokerwisecityid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBrokerwisecityid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->brokerwisecityid !== $v) {
			$this->brokerwisecityid = $v;
			$this->modifiedColumns[] = SubmissionPeer::BROKERWISECITYID;
		}

		return $this;
	} // setBrokerwisecityid()

	/**
	 * Set the value of [brokercontactperson] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBrokercontactperson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactperson !== $v) {
			$this->brokercontactperson = $v;
			$this->modifiedColumns[] = SubmissionPeer::BROKERCONTACTPERSON;
		}

		return $this;
	} // setBrokercontactperson()

	/**
	 * Set the value of [brokercontactpersonemail] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBrokercontactpersonemail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonemail !== $v) {
			$this->brokercontactpersonemail = $v;
			$this->modifiedColumns[] = SubmissionPeer::BROKERCONTACTPERSONEMAIL;
		}

		return $this;
	} // setBrokercontactpersonemail()

	/**
	 * Set the value of [brokercontactpersonnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBrokercontactpersonnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonnumber !== $v) {
			$this->brokercontactpersonnumber = $v;
			$this->modifiedColumns[] = SubmissionPeer::BROKERCONTACTPERSONNUMBER;
		}

		return $this;
	} // setBrokercontactpersonnumber()

	/**
	 * Set the value of [brokercode] column.
	 * 
	 * @param      string $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBrokercode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercode !== $v) {
			$this->brokercode = $v;
			$this->modifiedColumns[] = SubmissionPeer::BROKERCODE;
		}

		return $this;
	} // setBrokercode()

	/**
	 * Set the value of [statusdependentdetailsid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setStatusdependentdetailsid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->statusdependentdetailsid !== $v) {
			$this->statusdependentdetailsid = $v;
			$this->modifiedColumns[] = SubmissionPeer::STATUSDEPENDENTDETAILSID;
		}

		if ($this->aStatusdependentdetails !== null && $this->aStatusdependentdetails->getId() !== $v) {
			$this->aStatusdependentdetails = null;
		}

		return $this;
	} // setStatusdependentdetailsid()

	/**
	 * Sets the value of [berksidatefrombroker] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBerksidatefrombroker($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->berksidatefrombroker !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->berksidatefrombroker !== null && $tmpDt = new DateTime($this->berksidatefrombroker)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->berksidatefrombroker = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionPeer::BERKSIDATEFROMBROKER;
			}
		} // if either are not null

		return $this;
	} // setBerksidatefrombroker()

	/**
	 * Sets the value of [berksidatefromindia] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBerksidatefromindia($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->berksidatefromindia !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->berksidatefromindia !== null && $tmpDt = new DateTime($this->berksidatefromindia)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->berksidatefromindia = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionPeer::BERKSIDATEFROMINDIA;
			}
		} // if either are not null

		return $this;
	} // setBerksidatefromindia()

	/**
	 * Set the value of [branchid] column.
	 * 
	 * @param      int $v new value
	 * @return     Submission The current object (for fluent API support)
	 */
	public function setBranchid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->branchid !== $v) {
			$this->branchid = $v;
			$this->modifiedColumns[] = SubmissionPeer::BRANCHID;
		}

		if ($this->aBranch !== null && $this->aBranch->getId() !== $v) {
			$this->aBranch = null;
		}

		return $this;
	} // setBranchid()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->submissionnumber = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->newrenewallookupid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->underwriterid = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->lobid = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->lobsubtypeid = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->sectionid = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->profitcodeid = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->currentstatusid = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->effectivedate = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->expirydate = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->insuredid = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->isdifferentdba = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->isdifferentmaillingaddress = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->dbaname = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->alternativeaddressid = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->dbnumber = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->cabcompanieslookupid = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->reinsuredcompany = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->businessdependentdetailid = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->totalinsuredvalue = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->brokerwisecityid = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->brokercontactperson = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->brokercontactpersonemail = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->brokercontactpersonnumber = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->brokercode = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->statusdependentdetailsid = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->berksidatefrombroker = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->berksidatefromindia = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->branchid = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 30; // 30 = SubmissionPeer::NUM_COLUMNS - SubmissionPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Submission object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aLookupRelatedByNewrenewallookupid !== null && $this->newrenewallookupid !== $this->aLookupRelatedByNewrenewallookupid->getId()) {
			$this->aLookupRelatedByNewrenewallookupid = null;
		}
		if ($this->aUnderwriter !== null && $this->underwriterid !== $this->aUnderwriter->getId()) {
			$this->aUnderwriter = null;
		}
		if ($this->aLob !== null && $this->lobid !== $this->aLob->getId()) {
			$this->aLob = null;
		}
		if ($this->aLobsubtype !== null && $this->lobsubtypeid !== $this->aLobsubtype->getId()) {
			$this->aLobsubtype = null;
		}
		if ($this->aSectioncode !== null && $this->sectionid !== $this->aSectioncode->getId()) {
			$this->aSectioncode = null;
		}
		if ($this->aProfitcode !== null && $this->profitcodeid !== $this->aProfitcode->getId()) {
			$this->aProfitcode = null;
		}
		if ($this->aStatus !== null && $this->currentstatusid !== $this->aStatus->getId()) {
			$this->aStatus = null;
		}
		if ($this->aInsured !== null && $this->insuredid !== $this->aInsured->getId()) {
			$this->aInsured = null;
		}
		if ($this->aAddress !== null && $this->alternativeaddressid !== $this->aAddress->getId()) {
			$this->aAddress = null;
		}
		if ($this->aLookupRelatedByCabcompanieslookupid !== null && $this->cabcompanieslookupid !== $this->aLookupRelatedByCabcompanieslookupid->getId()) {
			$this->aLookupRelatedByCabcompanieslookupid = null;
		}
		if ($this->aBusinessdependentdetail !== null && $this->businessdependentdetailid !== $this->aBusinessdependentdetail->getId()) {
			$this->aBusinessdependentdetail = null;
		}
		if ($this->aStatusdependentdetails !== null && $this->statusdependentdetailsid !== $this->aStatusdependentdetails->getId()) {
			$this->aStatusdependentdetails = null;
		}
		if ($this->aBranch !== null && $this->branchid !== $this->aBranch->getId()) {
			$this->aBranch = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SubmissionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aLookupRelatedByNewrenewallookupid = null;
			$this->aUnderwriter = null;
			$this->aLob = null;
			$this->aLobsubtype = null;
			$this->aSectioncode = null;
			$this->aProfitcode = null;
			$this->aStatus = null;
			$this->aInsured = null;
			$this->aAddress = null;
			$this->aLookupRelatedByCabcompanieslookupid = null;
			$this->aBusinessdependentdetail = null;
			$this->aStatusdependentdetails = null;
			$this->aBranch = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSubmission:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				SubmissionPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSubmission:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSubmission:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSubmission:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SubmissionPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aLookupRelatedByNewrenewallookupid !== null) {
				if ($this->aLookupRelatedByNewrenewallookupid->isModified() || $this->aLookupRelatedByNewrenewallookupid->isNew()) {
					$affectedRows += $this->aLookupRelatedByNewrenewallookupid->save($con);
				}
				$this->setLookupRelatedByNewrenewallookupid($this->aLookupRelatedByNewrenewallookupid);
			}

			if ($this->aUnderwriter !== null) {
				if ($this->aUnderwriter->isModified() || $this->aUnderwriter->isNew()) {
					$affectedRows += $this->aUnderwriter->save($con);
				}
				$this->setUnderwriter($this->aUnderwriter);
			}

			if ($this->aLob !== null) {
				if ($this->aLob->isModified() || $this->aLob->isNew()) {
					$affectedRows += $this->aLob->save($con);
				}
				$this->setLob($this->aLob);
			}

			if ($this->aLobsubtype !== null) {
				if ($this->aLobsubtype->isModified() || $this->aLobsubtype->isNew()) {
					$affectedRows += $this->aLobsubtype->save($con);
				}
				$this->setLobsubtype($this->aLobsubtype);
			}

			if ($this->aSectioncode !== null) {
				if ($this->aSectioncode->isModified() || $this->aSectioncode->isNew()) {
					$affectedRows += $this->aSectioncode->save($con);
				}
				$this->setSectioncode($this->aSectioncode);
			}

			if ($this->aProfitcode !== null) {
				if ($this->aProfitcode->isModified() || $this->aProfitcode->isNew()) {
					$affectedRows += $this->aProfitcode->save($con);
				}
				$this->setProfitcode($this->aProfitcode);
			}

			if ($this->aStatus !== null) {
				if ($this->aStatus->isModified() || $this->aStatus->isNew()) {
					$affectedRows += $this->aStatus->save($con);
				}
				$this->setStatus($this->aStatus);
			}

			if ($this->aInsured !== null) {
				if ($this->aInsured->isModified() || $this->aInsured->isNew()) {
					$affectedRows += $this->aInsured->save($con);
				}
				$this->setInsured($this->aInsured);
			}

			if ($this->aAddress !== null) {
				if ($this->aAddress->isModified() || $this->aAddress->isNew()) {
					$affectedRows += $this->aAddress->save($con);
				}
				$this->setAddress($this->aAddress);
			}

			if ($this->aLookupRelatedByCabcompanieslookupid !== null) {
				if ($this->aLookupRelatedByCabcompanieslookupid->isModified() || $this->aLookupRelatedByCabcompanieslookupid->isNew()) {
					$affectedRows += $this->aLookupRelatedByCabcompanieslookupid->save($con);
				}
				$this->setLookupRelatedByCabcompanieslookupid($this->aLookupRelatedByCabcompanieslookupid);
			}

			if ($this->aBusinessdependentdetail !== null) {
				if ($this->aBusinessdependentdetail->isModified() || $this->aBusinessdependentdetail->isNew()) {
					$affectedRows += $this->aBusinessdependentdetail->save($con);
				}
				$this->setBusinessdependentdetail($this->aBusinessdependentdetail);
			}

			if ($this->aStatusdependentdetails !== null) {
				if ($this->aStatusdependentdetails->isModified() || $this->aStatusdependentdetails->isNew()) {
					$affectedRows += $this->aStatusdependentdetails->save($con);
				}
				$this->setStatusdependentdetails($this->aStatusdependentdetails);
			}

			if ($this->aBranch !== null) {
				if ($this->aBranch->isModified() || $this->aBranch->isNew()) {
					$affectedRows += $this->aBranch->save($con);
				}
				$this->setBranch($this->aBranch);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SubmissionPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SubmissionPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SubmissionPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aLookupRelatedByNewrenewallookupid !== null) {
				if (!$this->aLookupRelatedByNewrenewallookupid->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLookupRelatedByNewrenewallookupid->getValidationFailures());
				}
			}

			if ($this->aUnderwriter !== null) {
				if (!$this->aUnderwriter->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUnderwriter->getValidationFailures());
				}
			}

			if ($this->aLob !== null) {
				if (!$this->aLob->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLob->getValidationFailures());
				}
			}

			if ($this->aLobsubtype !== null) {
				if (!$this->aLobsubtype->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLobsubtype->getValidationFailures());
				}
			}

			if ($this->aSectioncode !== null) {
				if (!$this->aSectioncode->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSectioncode->getValidationFailures());
				}
			}

			if ($this->aProfitcode !== null) {
				if (!$this->aProfitcode->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProfitcode->getValidationFailures());
				}
			}

			if ($this->aStatus !== null) {
				if (!$this->aStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatus->getValidationFailures());
				}
			}

			if ($this->aInsured !== null) {
				if (!$this->aInsured->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aInsured->getValidationFailures());
				}
			}

			if ($this->aAddress !== null) {
				if (!$this->aAddress->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAddress->getValidationFailures());
				}
			}

			if ($this->aLookupRelatedByCabcompanieslookupid !== null) {
				if (!$this->aLookupRelatedByCabcompanieslookupid->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLookupRelatedByCabcompanieslookupid->getValidationFailures());
				}
			}

			if ($this->aBusinessdependentdetail !== null) {
				if (!$this->aBusinessdependentdetail->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aBusinessdependentdetail->getValidationFailures());
				}
			}

			if ($this->aStatusdependentdetails !== null) {
				if (!$this->aStatusdependentdetails->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatusdependentdetails->getValidationFailures());
				}
			}

			if ($this->aBranch !== null) {
				if (!$this->aBranch->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aBranch->getValidationFailures());
				}
			}


			if (($retval = SubmissionPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SubmissionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getSubmissionnumber();
				break;
			case 2:
				return $this->getNewrenewallookupid();
				break;
			case 3:
				return $this->getUnderwriterid();
				break;
			case 4:
				return $this->getLobid();
				break;
			case 5:
				return $this->getLobsubtypeid();
				break;
			case 6:
				return $this->getSectionid();
				break;
			case 7:
				return $this->getProfitcodeid();
				break;
			case 8:
				return $this->getCurrentstatusid();
				break;
			case 9:
				return $this->getEffectivedate();
				break;
			case 10:
				return $this->getExpirydate();
				break;
			case 11:
				return $this->getInsuredid();
				break;
			case 12:
				return $this->getIsdifferentdba();
				break;
			case 13:
				return $this->getIsdifferentmaillingaddress();
				break;
			case 14:
				return $this->getDbaname();
				break;
			case 15:
				return $this->getAlternativeaddressid();
				break;
			case 16:
				return $this->getDbnumber();
				break;
			case 17:
				return $this->getCabcompanieslookupid();
				break;
			case 18:
				return $this->getReinsuredcompany();
				break;
			case 19:
				return $this->getBusinessdependentdetailid();
				break;
			case 20:
				return $this->getTotalinsuredvalue();
				break;
			case 21:
				return $this->getBrokerwisecityid();
				break;
			case 22:
				return $this->getBrokercontactperson();
				break;
			case 23:
				return $this->getBrokercontactpersonemail();
				break;
			case 24:
				return $this->getBrokercontactpersonnumber();
				break;
			case 25:
				return $this->getBrokercode();
				break;
			case 26:
				return $this->getStatusdependentdetailsid();
				break;
			case 27:
				return $this->getBerksidatefrombroker();
				break;
			case 28:
				return $this->getBerksidatefromindia();
				break;
			case 29:
				return $this->getBranchid();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SubmissionPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getSubmissionnumber(),
			$keys[2] => $this->getNewrenewallookupid(),
			$keys[3] => $this->getUnderwriterid(),
			$keys[4] => $this->getLobid(),
			$keys[5] => $this->getLobsubtypeid(),
			$keys[6] => $this->getSectionid(),
			$keys[7] => $this->getProfitcodeid(),
			$keys[8] => $this->getCurrentstatusid(),
			$keys[9] => $this->getEffectivedate(),
			$keys[10] => $this->getExpirydate(),
			$keys[11] => $this->getInsuredid(),
			$keys[12] => $this->getIsdifferentdba(),
			$keys[13] => $this->getIsdifferentmaillingaddress(),
			$keys[14] => $this->getDbaname(),
			$keys[15] => $this->getAlternativeaddressid(),
			$keys[16] => $this->getDbnumber(),
			$keys[17] => $this->getCabcompanieslookupid(),
			$keys[18] => $this->getReinsuredcompany(),
			$keys[19] => $this->getBusinessdependentdetailid(),
			$keys[20] => $this->getTotalinsuredvalue(),
			$keys[21] => $this->getBrokerwisecityid(),
			$keys[22] => $this->getBrokercontactperson(),
			$keys[23] => $this->getBrokercontactpersonemail(),
			$keys[24] => $this->getBrokercontactpersonnumber(),
			$keys[25] => $this->getBrokercode(),
			$keys[26] => $this->getStatusdependentdetailsid(),
			$keys[27] => $this->getBerksidatefrombroker(),
			$keys[28] => $this->getBerksidatefromindia(),
			$keys[29] => $this->getBranchid(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SubmissionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setSubmissionnumber($value);
				break;
			case 2:
				$this->setNewrenewallookupid($value);
				break;
			case 3:
				$this->setUnderwriterid($value);
				break;
			case 4:
				$this->setLobid($value);
				break;
			case 5:
				$this->setLobsubtypeid($value);
				break;
			case 6:
				$this->setSectionid($value);
				break;
			case 7:
				$this->setProfitcodeid($value);
				break;
			case 8:
				$this->setCurrentstatusid($value);
				break;
			case 9:
				$this->setEffectivedate($value);
				break;
			case 10:
				$this->setExpirydate($value);
				break;
			case 11:
				$this->setInsuredid($value);
				break;
			case 12:
				$this->setIsdifferentdba($value);
				break;
			case 13:
				$this->setIsdifferentmaillingaddress($value);
				break;
			case 14:
				$this->setDbaname($value);
				break;
			case 15:
				$this->setAlternativeaddressid($value);
				break;
			case 16:
				$this->setDbnumber($value);
				break;
			case 17:
				$this->setCabcompanieslookupid($value);
				break;
			case 18:
				$this->setReinsuredcompany($value);
				break;
			case 19:
				$this->setBusinessdependentdetailid($value);
				break;
			case 20:
				$this->setTotalinsuredvalue($value);
				break;
			case 21:
				$this->setBrokerwisecityid($value);
				break;
			case 22:
				$this->setBrokercontactperson($value);
				break;
			case 23:
				$this->setBrokercontactpersonemail($value);
				break;
			case 24:
				$this->setBrokercontactpersonnumber($value);
				break;
			case 25:
				$this->setBrokercode($value);
				break;
			case 26:
				$this->setStatusdependentdetailsid($value);
				break;
			case 27:
				$this->setBerksidatefrombroker($value);
				break;
			case 28:
				$this->setBerksidatefromindia($value);
				break;
			case 29:
				$this->setBranchid($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SubmissionPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSubmissionnumber($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNewrenewallookupid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setUnderwriterid($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLobid($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setLobsubtypeid($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setSectionid($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setProfitcodeid($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCurrentstatusid($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEffectivedate($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setExpirydate($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setInsuredid($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIsdifferentdba($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIsdifferentmaillingaddress($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDbaname($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setAlternativeaddressid($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDbnumber($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCabcompanieslookupid($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setReinsuredcompany($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setBusinessdependentdetailid($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTotalinsuredvalue($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setBrokerwisecityid($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setBrokercontactperson($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBrokercontactpersonemail($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setBrokercontactpersonnumber($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setBrokercode($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setStatusdependentdetailsid($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setBerksidatefrombroker($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setBerksidatefromindia($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setBranchid($arr[$keys[29]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SubmissionPeer::DATABASE_NAME);

		if ($this->isColumnModified(SubmissionPeer::ID)) $criteria->add(SubmissionPeer::ID, $this->id);
		if ($this->isColumnModified(SubmissionPeer::SUBMISSIONNUMBER)) $criteria->add(SubmissionPeer::SUBMISSIONNUMBER, $this->submissionnumber);
		if ($this->isColumnModified(SubmissionPeer::NEWRENEWALLOOKUPID)) $criteria->add(SubmissionPeer::NEWRENEWALLOOKUPID, $this->newrenewallookupid);
		if ($this->isColumnModified(SubmissionPeer::UNDERWRITERID)) $criteria->add(SubmissionPeer::UNDERWRITERID, $this->underwriterid);
		if ($this->isColumnModified(SubmissionPeer::LOBID)) $criteria->add(SubmissionPeer::LOBID, $this->lobid);
		if ($this->isColumnModified(SubmissionPeer::LOBSUBTYPEID)) $criteria->add(SubmissionPeer::LOBSUBTYPEID, $this->lobsubtypeid);
		if ($this->isColumnModified(SubmissionPeer::SECTIONID)) $criteria->add(SubmissionPeer::SECTIONID, $this->sectionid);
		if ($this->isColumnModified(SubmissionPeer::PROFITCODEID)) $criteria->add(SubmissionPeer::PROFITCODEID, $this->profitcodeid);
		if ($this->isColumnModified(SubmissionPeer::CURRENTSTATUSID)) $criteria->add(SubmissionPeer::CURRENTSTATUSID, $this->currentstatusid);
		if ($this->isColumnModified(SubmissionPeer::EFFECTIVEDATE)) $criteria->add(SubmissionPeer::EFFECTIVEDATE, $this->effectivedate);
		if ($this->isColumnModified(SubmissionPeer::EXPIRYDATE)) $criteria->add(SubmissionPeer::EXPIRYDATE, $this->expirydate);
		if ($this->isColumnModified(SubmissionPeer::INSUREDID)) $criteria->add(SubmissionPeer::INSUREDID, $this->insuredid);
		if ($this->isColumnModified(SubmissionPeer::ISDIFFERENTDBA)) $criteria->add(SubmissionPeer::ISDIFFERENTDBA, $this->isdifferentdba);
		if ($this->isColumnModified(SubmissionPeer::ISDIFFERENTMAILLINGADDRESS)) $criteria->add(SubmissionPeer::ISDIFFERENTMAILLINGADDRESS, $this->isdifferentmaillingaddress);
		if ($this->isColumnModified(SubmissionPeer::DBANAME)) $criteria->add(SubmissionPeer::DBANAME, $this->dbaname);
		if ($this->isColumnModified(SubmissionPeer::ALTERNATIVEADDRESSID)) $criteria->add(SubmissionPeer::ALTERNATIVEADDRESSID, $this->alternativeaddressid);
		if ($this->isColumnModified(SubmissionPeer::DBNUMBER)) $criteria->add(SubmissionPeer::DBNUMBER, $this->dbnumber);
		if ($this->isColumnModified(SubmissionPeer::CABCOMPANIESLOOKUPID)) $criteria->add(SubmissionPeer::CABCOMPANIESLOOKUPID, $this->cabcompanieslookupid);
		if ($this->isColumnModified(SubmissionPeer::REINSUREDCOMPANY)) $criteria->add(SubmissionPeer::REINSUREDCOMPANY, $this->reinsuredcompany);
		if ($this->isColumnModified(SubmissionPeer::BUSINESSDEPENDENTDETAILID)) $criteria->add(SubmissionPeer::BUSINESSDEPENDENTDETAILID, $this->businessdependentdetailid);
		if ($this->isColumnModified(SubmissionPeer::TOTALINSUREDVALUE)) $criteria->add(SubmissionPeer::TOTALINSUREDVALUE, $this->totalinsuredvalue);
		if ($this->isColumnModified(SubmissionPeer::BROKERWISECITYID)) $criteria->add(SubmissionPeer::BROKERWISECITYID, $this->brokerwisecityid);
		if ($this->isColumnModified(SubmissionPeer::BROKERCONTACTPERSON)) $criteria->add(SubmissionPeer::BROKERCONTACTPERSON, $this->brokercontactperson);
		if ($this->isColumnModified(SubmissionPeer::BROKERCONTACTPERSONEMAIL)) $criteria->add(SubmissionPeer::BROKERCONTACTPERSONEMAIL, $this->brokercontactpersonemail);
		if ($this->isColumnModified(SubmissionPeer::BROKERCONTACTPERSONNUMBER)) $criteria->add(SubmissionPeer::BROKERCONTACTPERSONNUMBER, $this->brokercontactpersonnumber);
		if ($this->isColumnModified(SubmissionPeer::BROKERCODE)) $criteria->add(SubmissionPeer::BROKERCODE, $this->brokercode);
		if ($this->isColumnModified(SubmissionPeer::STATUSDEPENDENTDETAILSID)) $criteria->add(SubmissionPeer::STATUSDEPENDENTDETAILSID, $this->statusdependentdetailsid);
		if ($this->isColumnModified(SubmissionPeer::BERKSIDATEFROMBROKER)) $criteria->add(SubmissionPeer::BERKSIDATEFROMBROKER, $this->berksidatefrombroker);
		if ($this->isColumnModified(SubmissionPeer::BERKSIDATEFROMINDIA)) $criteria->add(SubmissionPeer::BERKSIDATEFROMINDIA, $this->berksidatefromindia);
		if ($this->isColumnModified(SubmissionPeer::BRANCHID)) $criteria->add(SubmissionPeer::BRANCHID, $this->branchid);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SubmissionPeer::DATABASE_NAME);

		$criteria->add(SubmissionPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Submission (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSubmissionnumber($this->submissionnumber);

		$copyObj->setNewrenewallookupid($this->newrenewallookupid);

		$copyObj->setUnderwriterid($this->underwriterid);

		$copyObj->setLobid($this->lobid);

		$copyObj->setLobsubtypeid($this->lobsubtypeid);

		$copyObj->setSectionid($this->sectionid);

		$copyObj->setProfitcodeid($this->profitcodeid);

		$copyObj->setCurrentstatusid($this->currentstatusid);

		$copyObj->setEffectivedate($this->effectivedate);

		$copyObj->setExpirydate($this->expirydate);

		$copyObj->setInsuredid($this->insuredid);

		$copyObj->setIsdifferentdba($this->isdifferentdba);

		$copyObj->setIsdifferentmaillingaddress($this->isdifferentmaillingaddress);

		$copyObj->setDbaname($this->dbaname);

		$copyObj->setAlternativeaddressid($this->alternativeaddressid);

		$copyObj->setDbnumber($this->dbnumber);

		$copyObj->setCabcompanieslookupid($this->cabcompanieslookupid);

		$copyObj->setReinsuredcompany($this->reinsuredcompany);

		$copyObj->setBusinessdependentdetailid($this->businessdependentdetailid);

		$copyObj->setTotalinsuredvalue($this->totalinsuredvalue);

		$copyObj->setBrokerwisecityid($this->brokerwisecityid);

		$copyObj->setBrokercontactperson($this->brokercontactperson);

		$copyObj->setBrokercontactpersonemail($this->brokercontactpersonemail);

		$copyObj->setBrokercontactpersonnumber($this->brokercontactpersonnumber);

		$copyObj->setBrokercode($this->brokercode);

		$copyObj->setStatusdependentdetailsid($this->statusdependentdetailsid);

		$copyObj->setBerksidatefrombroker($this->berksidatefrombroker);

		$copyObj->setBerksidatefromindia($this->berksidatefromindia);

		$copyObj->setBranchid($this->branchid);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Submission Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SubmissionPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SubmissionPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Lookup object.
	 *
	 * @param      Lookup $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLookupRelatedByNewrenewallookupid(Lookup $v = null)
	{
		if ($v === null) {
			$this->setNewrenewallookupid(NULL);
		} else {
			$this->setNewrenewallookupid($v->getId());
		}

		$this->aLookupRelatedByNewrenewallookupid = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Lookup object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmissionRelatedByNewrenewallookupid($this);
		}

		return $this;
	}


	/**
	 * Get the associated Lookup object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Lookup The associated Lookup object.
	 * @throws     PropelException
	 */
	public function getLookupRelatedByNewrenewallookupid(PropelPDO $con = null)
	{
		if ($this->aLookupRelatedByNewrenewallookupid === null && ($this->newrenewallookupid !== null)) {
			$this->aLookupRelatedByNewrenewallookupid = LookupPeer::retrieveByPk($this->newrenewallookupid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLookupRelatedByNewrenewallookupid->addSubmissionsRelatedByNewrenewallookupid($this);
			 */
		}
		return $this->aLookupRelatedByNewrenewallookupid;
	}

	/**
	 * Declares an association between this object and a Underwriter object.
	 *
	 * @param      Underwriter $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUnderwriter(Underwriter $v = null)
	{
		if ($v === null) {
			$this->setUnderwriterid(NULL);
		} else {
			$this->setUnderwriterid($v->getId());
		}

		$this->aUnderwriter = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Underwriter object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Underwriter object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Underwriter The associated Underwriter object.
	 * @throws     PropelException
	 */
	public function getUnderwriter(PropelPDO $con = null)
	{
		if ($this->aUnderwriter === null && ($this->underwriterid !== null)) {
			$this->aUnderwriter = UnderwriterPeer::retrieveByPk($this->underwriterid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUnderwriter->addSubmissions($this);
			 */
		}
		return $this->aUnderwriter;
	}

	/**
	 * Declares an association between this object and a Lob object.
	 *
	 * @param      Lob $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLob(Lob $v = null)
	{
		if ($v === null) {
			$this->setLobid(NULL);
		} else {
			$this->setLobid($v->getId());
		}

		$this->aLob = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Lob object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Lob object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Lob The associated Lob object.
	 * @throws     PropelException
	 */
	public function getLob(PropelPDO $con = null)
	{
		if ($this->aLob === null && ($this->lobid !== null)) {
			$this->aLob = LobPeer::retrieveByPk($this->lobid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLob->addSubmissions($this);
			 */
		}
		return $this->aLob;
	}

	/**
	 * Declares an association between this object and a Lobsubtype object.
	 *
	 * @param      Lobsubtype $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLobsubtype(Lobsubtype $v = null)
	{
		if ($v === null) {
			$this->setLobsubtypeid(NULL);
		} else {
			$this->setLobsubtypeid($v->getId());
		}

		$this->aLobsubtype = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Lobsubtype object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Lobsubtype object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Lobsubtype The associated Lobsubtype object.
	 * @throws     PropelException
	 */
	public function getLobsubtype(PropelPDO $con = null)
	{
		if ($this->aLobsubtype === null && ($this->lobsubtypeid !== null)) {
			$this->aLobsubtype = LobsubtypePeer::retrieveByPk($this->lobsubtypeid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLobsubtype->addSubmissions($this);
			 */
		}
		return $this->aLobsubtype;
	}

	/**
	 * Declares an association between this object and a Sectioncode object.
	 *
	 * @param      Sectioncode $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSectioncode(Sectioncode $v = null)
	{
		if ($v === null) {
			$this->setSectionid(NULL);
		} else {
			$this->setSectionid($v->getId());
		}

		$this->aSectioncode = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Sectioncode object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Sectioncode object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Sectioncode The associated Sectioncode object.
	 * @throws     PropelException
	 */
	public function getSectioncode(PropelPDO $con = null)
	{
		if ($this->aSectioncode === null && ($this->sectionid !== null)) {
			$this->aSectioncode = SectioncodePeer::retrieveByPk($this->sectionid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSectioncode->addSubmissions($this);
			 */
		}
		return $this->aSectioncode;
	}

	/**
	 * Declares an association between this object and a Profitcode object.
	 *
	 * @param      Profitcode $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProfitcode(Profitcode $v = null)
	{
		if ($v === null) {
			$this->setProfitcodeid(NULL);
		} else {
			$this->setProfitcodeid($v->getId());
		}

		$this->aProfitcode = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Profitcode object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Profitcode object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Profitcode The associated Profitcode object.
	 * @throws     PropelException
	 */
	public function getProfitcode(PropelPDO $con = null)
	{
		if ($this->aProfitcode === null && ($this->profitcodeid !== null)) {
			$this->aProfitcode = ProfitcodePeer::retrieveByPk($this->profitcodeid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProfitcode->addSubmissions($this);
			 */
		}
		return $this->aProfitcode;
	}

	/**
	 * Declares an association between this object and a Status object.
	 *
	 * @param      Status $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatus(Status $v = null)
	{
		if ($v === null) {
			$this->setCurrentstatusid(NULL);
		} else {
			$this->setCurrentstatusid($v->getId());
		}

		$this->aStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Status object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Status object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Status The associated Status object.
	 * @throws     PropelException
	 */
	public function getStatus(PropelPDO $con = null)
	{
		if ($this->aStatus === null && ($this->currentstatusid !== null)) {
			$this->aStatus = StatusPeer::retrieveByPk($this->currentstatusid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aStatus->addSubmissions($this);
			 */
		}
		return $this->aStatus;
	}

	/**
	 * Declares an association between this object and a Insured object.
	 *
	 * @param      Insured $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setInsured(Insured $v = null)
	{
		if ($v === null) {
			$this->setInsuredid(NULL);
		} else {
			$this->setInsuredid($v->getId());
		}

		$this->aInsured = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Insured object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Insured object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Insured The associated Insured object.
	 * @throws     PropelException
	 */
	public function getInsured(PropelPDO $con = null)
	{
		if ($this->aInsured === null && ($this->insuredid !== null)) {
			$this->aInsured = InsuredPeer::retrieveByPk($this->insuredid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aInsured->addSubmissions($this);
			 */
		}
		return $this->aInsured;
	}

	/**
	 * Declares an association between this object and a Address object.
	 *
	 * @param      Address $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAddress(Address $v = null)
	{
		if ($v === null) {
			$this->setAlternativeaddressid(NULL);
		} else {
			$this->setAlternativeaddressid($v->getId());
		}

		$this->aAddress = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Address object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Address object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Address The associated Address object.
	 * @throws     PropelException
	 */
	public function getAddress(PropelPDO $con = null)
	{
		if ($this->aAddress === null && ($this->alternativeaddressid !== null)) {
			$this->aAddress = AddressPeer::retrieveByPk($this->alternativeaddressid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAddress->addSubmissions($this);
			 */
		}
		return $this->aAddress;
	}

	/**
	 * Declares an association between this object and a Lookup object.
	 *
	 * @param      Lookup $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLookupRelatedByCabcompanieslookupid(Lookup $v = null)
	{
		if ($v === null) {
			$this->setCabcompanieslookupid(NULL);
		} else {
			$this->setCabcompanieslookupid($v->getId());
		}

		$this->aLookupRelatedByCabcompanieslookupid = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Lookup object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmissionRelatedByCabcompanieslookupid($this);
		}

		return $this;
	}


	/**
	 * Get the associated Lookup object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Lookup The associated Lookup object.
	 * @throws     PropelException
	 */
	public function getLookupRelatedByCabcompanieslookupid(PropelPDO $con = null)
	{
		if ($this->aLookupRelatedByCabcompanieslookupid === null && ($this->cabcompanieslookupid !== null)) {
			$this->aLookupRelatedByCabcompanieslookupid = LookupPeer::retrieveByPk($this->cabcompanieslookupid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLookupRelatedByCabcompanieslookupid->addSubmissionsRelatedByCabcompanieslookupid($this);
			 */
		}
		return $this->aLookupRelatedByCabcompanieslookupid;
	}

	/**
	 * Declares an association between this object and a Businessdependentdetail object.
	 *
	 * @param      Businessdependentdetail $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setBusinessdependentdetail(Businessdependentdetail $v = null)
	{
		if ($v === null) {
			$this->setBusinessdependentdetailid(NULL);
		} else {
			$this->setBusinessdependentdetailid($v->getId());
		}

		$this->aBusinessdependentdetail = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Businessdependentdetail object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Businessdependentdetail object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Businessdependentdetail The associated Businessdependentdetail object.
	 * @throws     PropelException
	 */
	public function getBusinessdependentdetail(PropelPDO $con = null)
	{
		if ($this->aBusinessdependentdetail === null && ($this->businessdependentdetailid !== null)) {
			$this->aBusinessdependentdetail = BusinessdependentdetailPeer::retrieveByPk($this->businessdependentdetailid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aBusinessdependentdetail->addSubmissions($this);
			 */
		}
		return $this->aBusinessdependentdetail;
	}

	/**
	 * Declares an association between this object and a Statusdependentdetails object.
	 *
	 * @param      Statusdependentdetails $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatusdependentdetails(Statusdependentdetails $v = null)
	{
		if ($v === null) {
			$this->setStatusdependentdetailsid(NULL);
		} else {
			$this->setStatusdependentdetailsid($v->getId());
		}

		$this->aStatusdependentdetails = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Statusdependentdetails object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Statusdependentdetails object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Statusdependentdetails The associated Statusdependentdetails object.
	 * @throws     PropelException
	 */
	public function getStatusdependentdetails(PropelPDO $con = null)
	{
		if ($this->aStatusdependentdetails === null && ($this->statusdependentdetailsid !== null)) {
			$this->aStatusdependentdetails = StatusdependentdetailsPeer::retrieveByPk($this->statusdependentdetailsid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aStatusdependentdetails->addSubmissions($this);
			 */
		}
		return $this->aStatusdependentdetails;
	}

	/**
	 * Declares an association between this object and a Branch object.
	 *
	 * @param      Branch $v
	 * @return     Submission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setBranch(Branch $v = null)
	{
		if ($v === null) {
			$this->setBranchid(NULL);
		} else {
			$this->setBranchid($v->getId());
		}

		$this->aBranch = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Branch object, it will not be re-added.
		if ($v !== null) {
			$v->addSubmission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Branch object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Branch The associated Branch object.
	 * @throws     PropelException
	 */
	public function getBranch(PropelPDO $con = null)
	{
		if ($this->aBranch === null && ($this->branchid !== null)) {
			$this->aBranch = BranchPeer::retrieveByPk($this->branchid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aBranch->addSubmissions($this);
			 */
		}
		return $this->aBranch;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aLookupRelatedByNewrenewallookupid = null;
			$this->aUnderwriter = null;
			$this->aLob = null;
			$this->aLobsubtype = null;
			$this->aSectioncode = null;
			$this->aProfitcode = null;
			$this->aStatus = null;
			$this->aInsured = null;
			$this->aAddress = null;
			$this->aLookupRelatedByCabcompanieslookupid = null;
			$this->aBusinessdependentdetail = null;
			$this->aStatusdependentdetails = null;
			$this->aBranch = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSubmission:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSubmission::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSubmission
