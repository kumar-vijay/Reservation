<?php

/**
 * Base class that represents a row from the 'Submission_Search' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Nov  2 23:34:52 2014
 *
 * @package    lib.model.om
 */
abstract class BaseSubmissionSearch extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SubmissionSearchPeer
	 */
	protected static $peer;

	/**
	 * The value for the submissionid field.
	 * @var        int
	 */
	protected $submissionid;

	/**
	 * The value for the qcstatus field.
	 * @var        string
	 */
	protected $qcstatus;

	/**
	 * The value for the submissionnumber field.
	 * @var        string
	 */
	protected $submissionnumber;

	/**
	 * The value for the dbnumber field.
	 * @var        string
	 */
	protected $dbnumber;

	/**
	 * The value for the reinsuredcompany field.
	 * @var        string
	 */
	protected $reinsuredcompany;

	/**
	 * The value for the dbaname field.
	 * @var        string
	 */
	protected $dbaname;

	/**
	 * The value for the effectivedate field.
	 * @var        string
	 */
	protected $effectivedate;

	/**
	 * The value for the expirydate field.
	 * @var        string
	 */
	protected $expirydate;

	/**
	 * The value for the brokercode field.
	 * @var        string
	 */
	protected $brokercode;

	/**
	 * The value for the brokercontactperson field.
	 * @var        string
	 */
	protected $brokercontactperson;

	/**
	 * The value for the brokercontactpersonemail field.
	 * @var        string
	 */
	protected $brokercontactpersonemail;

	/**
	 * The value for the brokercontactpersonnumber field.
	 * @var        int
	 */
	protected $brokercontactpersonnumber;

	/**
	 * The value for the brokercontactpersonmobile field.
	 * @var        int
	 */
	protected $brokercontactpersonmobile;

	/**
	 * The value for the totalinsuredvalue field.
	 * @var        string
	 */
	protected $totalinsuredvalue;

	/**
	 * The value for the totalinsuredvalueinusd field.
	 * @var        string
	 */
	protected $totalinsuredvalueinusd;

	/**
	 * The value for the dateofrecievingbybroker field.
	 * @var        string
	 */
	protected $dateofrecievingbybroker;

	/**
	 * The value for the dateofrecievingbyindia field.
	 * @var        string
	 */
	protected $dateofrecievingbyindia;

	/**
	 * The value for the newrenewal field.
	 * @var        string
	 */
	protected $newrenewal;

	/**
	 * The value for the insuredname field.
	 * @var        string
	 */
	protected $insuredname;

	/**
	 * The value for the insuredaddress1 field.
	 * @var        string
	 */
	protected $insuredaddress1;

	/**
	 * The value for the insuredcity field.
	 * @var        string
	 */
	protected $insuredcity;

	/**
	 * The value for the insuredstate field.
	 * @var        string
	 */
	protected $insuredstate;

	/**
	 * The value for the insuredcountry field.
	 * @var        string
	 */
	protected $insuredcountry;

	/**
	 * The value for the insuredzipcode field.
	 * @var        string
	 */
	protected $insuredzipcode;

	/**
	 * The value for the advisenid field.
	 * @var        int
	 */
	protected $advisenid;

	/**
	 * The value for the insuredcontactperson field.
	 * @var        string
	 */
	protected $insuredcontactperson;

	/**
	 * The value for the insuredcontactpersonemail field.
	 * @var        string
	 */
	protected $insuredcontactpersonemail;

	/**
	 * The value for the insuredcontactpersonphonenumber field.
	 * @var        int
	 */
	protected $insuredcontactpersonphonenumber;

	/**
	 * The value for the insuredcontactpersonmobilenumber field.
	 * @var        int
	 */
	protected $insuredcontactpersonmobilenumber;

	/**
	 * The value for the alternativeaddress1 field.
	 * @var        string
	 */
	protected $alternativeaddress1;

	/**
	 * The value for the alternativecity field.
	 * @var        string
	 */
	protected $alternativecity;

	/**
	 * The value for the alternativestate field.
	 * @var        string
	 */
	protected $alternativestate;

	/**
	 * The value for the alternativecountry field.
	 * @var        string
	 */
	protected $alternativecountry;

	/**
	 * The value for the alternativezipcode field.
	 * @var        string
	 */
	protected $alternativezipcode;

	/**
	 * The value for the underwritername field.
	 * @var        string
	 */
	protected $underwritername;

	/**
	 * The value for the propertytype field.
	 * @var        string
	 */
	protected $propertytype;

	/**
	 * The value for the propertylinesubtype field.
	 * @var        string
	 */
	protected $propertylinesubtype;

	/**
	 * The value for the sectioncode field.
	 * @var        string
	 */
	protected $sectioncode;

	/**
	 * The value for the profitcode field.
	 * @var        string
	 */
	protected $profitcode;

	/**
	 * The value for the currentstatus field.
	 * @var        string
	 */
	protected $currentstatus;

	/**
	 * The value for the processdate field.
	 * @var        string
	 */
	protected $processdate;

	/**
	 * The value for the grosspremium field.
	 * @var        string
	 */
	protected $grosspremium;

	/**
	 * The value for the statuslimit field.
	 * @var        string
	 */
	protected $statuslimit;

	/**
	 * The value for the attachmentpoint field.
	 * @var        string
	 */
	protected $attachmentpoint;

	/**
	 * The value for the grosspremiuminusd field.
	 * @var        string
	 */
	protected $grosspremiuminusd;

	/**
	 * The value for the limitinusd field.
	 * @var        string
	 */
	protected $limitinusd;

	/**
	 * The value for the attachmentpointinusd field.
	 * @var        string
	 */
	protected $attachmentpointinusd;

	/**
	 * The value for the exchangerate field.
	 * @var        string
	 */
	protected $exchangerate;

	/**
	 * The value for the exchangedate field.
	 * @var        string
	 */
	protected $exchangedate;

	/**
	 * The value for the currency field.
	 * @var        string
	 */
	protected $currency;

	/**
	 * The value for the reasoncode field.
	 * @var        string
	 */
	protected $reasoncode;

	/**
	 * The value for the reasoncodemeaning field.
	 * @var        string
	 */
	protected $reasoncodemeaning;

	/**
	 * The value for the cabcompanies field.
	 * @var        string
	 */
	protected $cabcompanies;

	/**
	 * The value for the projectname field.
	 * @var        string
	 */
	protected $projectname;

	/**
	 * The value for the projectcontractorname field.
	 * @var        string
	 */
	protected $projectcontractorname;

	/**
	 * The value for the projectownername field.
	 * @var        string
	 */
	protected $projectownername;

	/**
	 * The value for the projectaddressline1 field.
	 * @var        string
	 */
	protected $projectaddressline1;

	/**
	 * The value for the projectcity field.
	 * @var        string
	 */
	protected $projectcity;

	/**
	 * The value for the projectstate field.
	 * @var        string
	 */
	protected $projectstate;

	/**
	 * The value for the projectcountry field.
	 * @var        string
	 */
	protected $projectcountry;

	/**
	 * The value for the bidsituation field.
	 * @var        string
	 */
	protected $bidsituation;

	/**
	 * The value for the brokername field.
	 * @var        string
	 */
	protected $brokername;

	/**
	 * The value for the brokertype field.
	 * @var        string
	 */
	protected $brokertype;

	/**
	 * The value for the brokercity field.
	 * @var        string
	 */
	protected $brokercity;

	/**
	 * The value for the brokerstate field.
	 * @var        string
	 */
	protected $brokerstate;

	/**
	 * The value for the brokercontactpersonstreetaddress field.
	 * @var        string
	 */
	protected $brokercontactpersonstreetaddress;

	/**
	 * The value for the brokercontactpersonzipcode field.
	 * @var        string
	 */
	protected $brokercontactpersonzipcode;

	/**
	 * The value for the brokercountry field.
	 * @var        string
	 */
	protected $brokercountry;

	/**
	 * The value for the branchoffice field.
	 * @var        string
	 */
	protected $branchoffice;

	/**
	 * The value for the riskprofile field.
	 * @var        string
	 */
	protected $riskprofile;

	/**
	 * The value for the insuredsubmissiondate field.
	 * @var        string
	 */
	protected $insuredsubmissiondate;

	/**
	 * The value for the insuredquoteduedate field.
	 * @var        string
	 */
	protected $insuredquoteduedate;

	/**
	 * The value for the binddate field.
	 * @var        string
	 */
	protected $binddate;

	/**
	 * The value for the renewable field.
	 * @var        string
	 */
	protected $renewable;

	/**
	 * The value for the dateofrenewal field.
	 * @var        string
	 */
	protected $dateofrenewal;

	/**
	 * The value for the policytype field.
	 * @var        string
	 */
	protected $policytype;

	/**
	 * The value for the directassumed field.
	 * @var        string
	 */
	protected $directassumed;

	/**
	 * The value for the companypaper field.
	 * @var        string
	 */
	protected $companypaper;

	/**
	 * The value for the companypapernumber field.
	 * @var        string
	 */
	protected $companypapernumber;

	/**
	 * The value for the coverage field.
	 * @var        string
	 */
	protected $coverage;

	/**
	 * The value for the policynumber field.
	 * @var        int
	 */
	protected $policynumber;

	/**
	 * The value for the suffix field.
	 * @var        string
	 */
	protected $suffix;

	/**
	 * The value for the transactionnumber field.
	 * @var        string
	 */
	protected $transactionnumber;

	/**
	 * The value for the admittednonadmitted field.
	 * @var        string
	 */
	protected $admittednonadmitted;

	/**
	 * The value for the layeroflimitinlocalcurrency field.
	 * @var        int
	 */
	protected $layeroflimitinlocalcurrency;

	/**
	 * The value for the layeroflimitinusd field.
	 * @var        int
	 */
	protected $layeroflimitinusd;

	/**
	 * The value for the percentageoflayer field.
	 * @var        int
	 */
	protected $percentageoflayer;

	/**
	 * The value for the selfinsuredretentioninlocalcurrency field.
	 * @var        int
	 */
	protected $selfinsuredretentioninlocalcurrency;

	/**
	 * The value for the selfinsuredretentioninusd field.
	 * @var        int
	 */
	protected $selfinsuredretentioninusd;

	/**
	 * The value for the policycommpercentage field.
	 * @var        int
	 */
	protected $policycommpercentage;

	/**
	 * The value for the policycomminlocalcurrency field.
	 * @var        int
	 */
	protected $policycomminlocalcurrency;

	/**
	 * The value for the policycomminusd field.
	 * @var        int
	 */
	protected $policycomminusd;

	/**
	 * The value for the permiumnetofcomminlocalcurrency field.
	 * @var        int
	 */
	protected $permiumnetofcomminlocalcurrency;

	/**
	 * The value for the permiumnetofcomminusd field.
	 * @var        int
	 */
	protected $permiumnetofcomminusd;

	/**
	 * The value for the naiccode field.
	 * @var        int
	 */
	protected $naiccode;

	/**
	 * The value for the naictitle field.
	 * @var        string
	 */
	protected $naictitle;

	/**
	 * The value for the siccode field.
	 * @var        int
	 */
	protected $siccode;

	/**
	 * The value for the sictitle field.
	 * @var        string
	 */
	protected $sictitle;

	/**
	 * The value for the masterpolicynumber field.
	 * @var        string
	 */
	protected $masterpolicynumber;

	/**
	 * The value for the ofrcreport field.
	 * @var        string
	 */
	protected $ofrcreport;

	/**
	 * The value for the retailbrokername field.
	 * @var        string
	 */
	protected $retailbrokername;

	/**
	 * The value for the retailbrokercountry field.
	 * @var        string
	 */
	protected $retailbrokercountry;

	/**
	 * The value for the retailbrokerstate field.
	 * @var        string
	 */
	protected $retailbrokerstate;

	/**
	 * The value for the retailbrokercity field.
	 * @var        string
	 */
	protected $retailbrokercity;

	/**
	 * The value for the createddate field.
	 * @var        string
	 */
	protected $createddate;

	/**
	 * The value for the modifieddate field.
	 * @var        string
	 */
	protected $modifieddate;
        
	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;
        
        /**
	 * The value for the amendmentcount field.
	 * @var        string
	 */
	protected $amendmentcount;

         /**
	 * The value for the AmendmentCancelationCount field.
	 * @var        string
	 */
	protected $amendmentcancelationcount;
	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SubmissionSearchPeer';

	/**
	 * Get the [submissionid] column value.
	 * 
	 * @return     int
	 */
	public function getSubmissionid()
	{
		return $this->submissionid;
	}

	/**
	 * Get the [qcstatus] column value.
	 * 
	 * @return     string
	 */
	public function getQcstatus()
	{
		return $this->qcstatus;
	}

	/**
	 * Get the [submissionnumber] column value.
	 * 
	 * @return     string
	 */
	public function getSubmissionnumber()
	{
		return $this->submissionnumber;
	}

	/**
	 * Get the [dbnumber] column value.
	 * 
	 * @return     string
	 */
	public function getDbnumber()
	{
		return $this->dbnumber;
	}

	/**
	 * Get the [reinsuredcompany] column value.
	 * 
	 * @return     string
	 */
	public function getReinsuredcompany()
	{
		return $this->reinsuredcompany;
	}

	/**
	 * Get the [dbaname] column value.
	 * 
	 * @return     string
	 */
	public function getDbaname()
	{
		return $this->dbaname;
	}

	/**
	 * Get the [optionally formatted] temporal [effectivedate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEffectivedate($format = 'Y-m-d H:i:s')
	{
		if ($this->effectivedate === null) {
			return null;
		}


		if ($this->effectivedate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->effectivedate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->effectivedate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [expirydate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getExpirydate($format = 'Y-m-d H:i:s')
	{
		if ($this->expirydate === null) {
			return null;
		}


		if ($this->expirydate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->expirydate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->expirydate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [brokercode] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercode()
	{
		return $this->brokercode;
	}

	/**
	 * Get the [brokercontactperson] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactperson()
	{
		return $this->brokercontactperson;
	}

	/**
	 * Get the [brokercontactpersonemail] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactpersonemail()
	{
		return $this->brokercontactpersonemail;
	}

	/**
	 * Get the [brokercontactpersonnumber] column value.
	 * 
	 * @return     int
	 */
	public function getBrokercontactpersonnumber()
	{
		return $this->brokercontactpersonnumber;
	}

	/**
	 * Get the [brokercontactpersonmobile] column value.
	 * 
	 * @return     int
	 */
	public function getBrokercontactpersonmobile()
	{
		return $this->brokercontactpersonmobile;
	}

	/**
	 * Get the [totalinsuredvalue] column value.
	 * 
	 * @return     string
	 */
	public function getTotalinsuredvalue()
	{
		return $this->totalinsuredvalue;
	}

	/**
	 * Get the [totalinsuredvalueinusd] column value.
	 * 
	 * @return     string
	 */
	public function getTotalinsuredvalueinusd()
	{
		return $this->totalinsuredvalueinusd;
	}

	/**
	 * Get the [optionally formatted] temporal [dateofrecievingbybroker] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateofrecievingbybroker($format = 'Y-m-d H:i:s')
	{
		if ($this->dateofrecievingbybroker === null) {
			return null;
		}


		if ($this->dateofrecievingbybroker === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dateofrecievingbybroker);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dateofrecievingbybroker, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dateofrecievingbyindia] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateofrecievingbyindia($format = 'Y-m-d H:i:s')
	{
		if ($this->dateofrecievingbyindia === null) {
			return null;
		}


		if ($this->dateofrecievingbyindia === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dateofrecievingbyindia);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dateofrecievingbyindia, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [newrenewal] column value.
	 * 
	 * @return     string
	 */
	public function getNewrenewal()
	{
		return $this->newrenewal;
	}

	/**
	 * Get the [insuredname] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredname()
	{
		return $this->insuredname;
	}

	/**
	 * Get the [insuredaddress1] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredaddress1()
	{
		return $this->insuredaddress1;
	}

	/**
	 * Get the [insuredcity] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredcity()
	{
		return $this->insuredcity;
	}

	/**
	 * Get the [insuredstate] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredstate()
	{
		return $this->insuredstate;
	}

	/**
	 * Get the [insuredcountry] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredcountry()
	{
		return $this->insuredcountry;
	}

	/**
	 * Get the [insuredzipcode] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredzipcode()
	{
		return $this->insuredzipcode;
	}

	/**
	 * Get the [advisenid] column value.
	 * 
	 * @return     int
	 */
	public function getAdvisenid()
	{
		return $this->advisenid;
	}

	/**
	 * Get the [insuredcontactperson] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredcontactperson()
	{
		return $this->insuredcontactperson;
	}

	/**
	 * Get the [insuredcontactpersonemail] column value.
	 * 
	 * @return     string
	 */
	public function getInsuredcontactpersonemail()
	{
		return $this->insuredcontactpersonemail;
	}

	/**
	 * Get the [insuredcontactpersonphonenumber] column value.
	 * 
	 * @return     int
	 */
	public function getInsuredcontactpersonphonenumber()
	{
		return $this->insuredcontactpersonphonenumber;
	}

	/**
	 * Get the [insuredcontactpersonmobilenumber] column value.
	 * 
	 * @return     int
	 */
	public function getInsuredcontactpersonmobilenumber()
	{
		return $this->insuredcontactpersonmobilenumber;
	}

	/**
	 * Get the [alternativeaddress1] column value.
	 * 
	 * @return     string
	 */
	public function getAlternativeaddress1()
	{
		return $this->alternativeaddress1;
	}

	/**
	 * Get the [alternativecity] column value.
	 * 
	 * @return     string
	 */
	public function getAlternativecity()
	{
		return $this->alternativecity;
	}

	/**
	 * Get the [alternativestate] column value.
	 * 
	 * @return     string
	 */
	public function getAlternativestate()
	{
		return $this->alternativestate;
	}

	/**
	 * Get the [alternativecountry] column value.
	 * 
	 * @return     string
	 */
	public function getAlternativecountry()
	{
		return $this->alternativecountry;
	}

	/**
	 * Get the [alternativezipcode] column value.
	 * 
	 * @return     string
	 */
	public function getAlternativezipcode()
	{
		return $this->alternativezipcode;
	}

	/**
	 * Get the [underwritername] column value.
	 * 
	 * @return     string
	 */
	public function getUnderwritername()
	{
		return $this->underwritername;
	}

	/**
	 * Get the [propertytype] column value.
	 * 
	 * @return     string
	 */
	public function getPropertytype()
	{
		return $this->propertytype;
	}

	/**
	 * Get the [propertylinesubtype] column value.
	 * 
	 * @return     string
	 */
	public function getPropertylinesubtype()
	{
		return $this->propertylinesubtype;
	}

	/**
	 * Get the [sectioncode] column value.
	 * 
	 * @return     string
	 */
	public function getSectioncode()
	{
		return $this->sectioncode;
	}

	/**
	 * Get the [profitcode] column value.
	 * 
	 * @return     string
	 */
	public function getProfitcode()
	{
		return $this->profitcode;
	}

	/**
	 * Get the [currentstatus] column value.
	 * 
	 * @return     string
	 */
	public function getCurrentstatus()
	{
		return $this->currentstatus;
	}

	/**
	 * Get the [optionally formatted] temporal [processdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProcessdate($format = 'Y-m-d H:i:s')
	{
		if ($this->processdate === null) {
			return null;
		}


		if ($this->processdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->processdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->processdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [grosspremium] column value.
	 * 
	 * @return     string
	 */
	public function getGrosspremium()
	{
		return $this->grosspremium;
	}

	/**
	 * Get the [statuslimit] column value.
	 * 
	 * @return     string
	 */
	public function getStatuslimit()
	{
		return $this->statuslimit;
	}

	/**
	 * Get the [attachmentpoint] column value.
	 * 
	 * @return     string
	 */
	public function getAttachmentpoint()
	{
		return $this->attachmentpoint;
	}

	/**
	 * Get the [grosspremiuminusd] column value.
	 * 
	 * @return     string
	 */
	public function getGrosspremiuminusd()
	{
		return $this->grosspremiuminusd;
	}

	/**
	 * Get the [limitinusd] column value.
	 * 
	 * @return     string
	 */
	public function getLimitinusd()
	{
		return $this->limitinusd;
	}

	/**
	 * Get the [attachmentpointinusd] column value.
	 * 
	 * @return     string
	 */
	public function getAttachmentpointinusd()
	{
		return $this->attachmentpointinusd;
	}

	/**
	 * Get the [exchangerate] column value.
	 * 
	 * @return     string
	 */
	public function getExchangerate()
	{
		return $this->exchangerate;
	}

	/**
	 * Get the [optionally formatted] temporal [exchangedate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getExchangedate($format = 'Y-m-d H:i:s')
	{
		if ($this->exchangedate === null) {
			return null;
		}


		if ($this->exchangedate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->exchangedate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->exchangedate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [currency] column value.
	 * 
	 * @return     string
	 */
	public function getCurrency()
	{
		return $this->currency;
	}

	/**
	 * Get the [reasoncode] column value.
	 * 
	 * @return     string
	 */
	public function getReasoncode()
	{
		return $this->reasoncode;
	}

	/**
	 * Get the [reasoncodemeaning] column value.
	 * 
	 * @return     string
	 */
	public function getReasoncodemeaning()
	{
		return $this->reasoncodemeaning;
	}

	/**
	 * Get the [cabcompanies] column value.
	 * 
	 * @return     string
	 */
	public function getCabcompanies()
	{
		return $this->cabcompanies;
	}

	/**
	 * Get the [projectname] column value.
	 * 
	 * @return     string
	 */
	public function getProjectname()
	{
		return $this->projectname;
	}

	/**
	 * Get the [projectcontractorname] column value.
	 * 
	 * @return     string
	 */
	public function getProjectcontractorname()
	{
		return $this->projectcontractorname;
	}

	/**
	 * Get the [projectownername] column value.
	 * 
	 * @return     string
	 */
	public function getProjectownername()
	{
		return $this->projectownername;
	}

	/**
	 * Get the [projectaddressline1] column value.
	 * 
	 * @return     string
	 */
	public function getProjectaddressline1()
	{
		return $this->projectaddressline1;
	}

	/**
	 * Get the [projectcity] column value.
	 * 
	 * @return     string
	 */
	public function getProjectcity()
	{
		return $this->projectcity;
	}

	/**
	 * Get the [projectstate] column value.
	 * 
	 * @return     string
	 */
	public function getProjectstate()
	{
		return $this->projectstate;
	}

	/**
	 * Get the [projectcountry] column value.
	 * 
	 * @return     string
	 */
	public function getProjectcountry()
	{
		return $this->projectcountry;
	}

	/**
	 * Get the [bidsituation] column value.
	 * 
	 * @return     string
	 */
	public function getBidsituation()
	{
		return $this->bidsituation;
	}

	/**
	 * Get the [brokername] column value.
	 * 
	 * @return     string
	 */
	public function getBrokername()
	{
		return $this->brokername;
	}

	/**
	 * Get the [brokertype] column value.
	 * 
	 * @return     string
	 */
	public function getBrokertype()
	{
		return $this->brokertype;
	}

	/**
	 * Get the [brokercity] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercity()
	{
		return $this->brokercity;
	}

	/**
	 * Get the [brokerstate] column value.
	 * 
	 * @return     string
	 */
	public function getBrokerstate()
	{
		return $this->brokerstate;
	}

	/**
	 * Get the [brokercontactpersonstreetaddress] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactpersonstreetaddress()
	{
		return $this->brokercontactpersonstreetaddress;
	}

	/**
	 * Get the [brokercontactpersonzipcode] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercontactpersonzipcode()
	{
		return $this->brokercontactpersonzipcode;
	}

	/**
	 * Get the [brokercountry] column value.
	 * 
	 * @return     string
	 */
	public function getBrokercountry()
	{
		return $this->brokercountry;
	}

	/**
	 * Get the [branchoffice] column value.
	 * 
	 * @return     string
	 */
	public function getBranchoffice()
	{
		return $this->branchoffice;
	}

	/**
	 * Get the [riskprofile] column value.
	 * 
	 * @return     string
	 */
	public function getRiskprofile()
	{
		return $this->riskprofile;
	}

	/**
	 * Get the [optionally formatted] temporal [insuredsubmissiondate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getInsuredsubmissiondate($format = 'Y-m-d H:i:s')
	{
		if ($this->insuredsubmissiondate === null) {
			return null;
		}


		if ($this->insuredsubmissiondate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->insuredsubmissiondate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->insuredsubmissiondate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [insuredquoteduedate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getInsuredquoteduedate($format = 'Y-m-d H:i:s')
	{
		if ($this->insuredquoteduedate === null) {
			return null;
		}


		if ($this->insuredquoteduedate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->insuredquoteduedate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->insuredquoteduedate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [binddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBinddate($format = 'Y-m-d H:i:s')
	{
		if ($this->binddate === null) {
			return null;
		}


		if ($this->binddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->binddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->binddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [renewable] column value.
	 * 
	 * @return     string
	 */
	public function getRenewable()
	{
		return $this->renewable;
	}

	/**
	 * Get the [optionally formatted] temporal [dateofrenewal] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateofrenewal($format = 'Y-m-d H:i:s')
	{
		if ($this->dateofrenewal === null) {
			return null;
		}


		if ($this->dateofrenewal === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dateofrenewal);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dateofrenewal, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [policytype] column value.
	 * 
	 * @return     string
	 */
	public function getPolicytype()
	{
		return $this->policytype;
	}

	/**
	 * Get the [directassumed] column value.
	 * 
	 * @return     string
	 */
	public function getDirectassumed()
	{
		return $this->directassumed;
	}

	/**
	 * Get the [companypaper] column value.
	 * 
	 * @return     string
	 */
	public function getCompanypaper()
	{
		return $this->companypaper;
	}

	/**
	 * Get the [companypapernumber] column value.
	 * 
	 * @return     string
	 */
	public function getCompanypapernumber()
	{
		return $this->companypapernumber;
	}

	/**
	 * Get the [coverage] column value.
	 * 
	 * @return     string
	 */
	public function getCoverage()
	{
		return $this->coverage;
	}

	/**
	 * Get the [policynumber] column value.
	 * 
	 * @return     int
	 */
	public function getPolicynumber()
	{
		return $this->policynumber;
	}

	/**
	 * Get the [suffix] column value.
	 * 
	 * @return     string
	 */
	public function getSuffix()
	{
		return $this->suffix;
	}

	/**
	 * Get the [transactionnumber] column value.
	 * 
	 * @return     string
	 */
	public function getTransactionnumber()
	{
		return $this->transactionnumber;
	}

	/**
	 * Get the [admittednonadmitted] column value.
	 * 
	 * @return     string
	 */
	public function getAdmittednonadmitted()
	{
		return $this->admittednonadmitted;
	}

	/**
	 * Get the [layeroflimitinlocalcurrency] column value.
	 * 
	 * @return     int
	 */
	public function getLayeroflimitinlocalcurrency()
	{
		return $this->layeroflimitinlocalcurrency;
	}

	/**
	 * Get the [layeroflimitinusd] column value.
	 * 
	 * @return     int
	 */
	public function getLayeroflimitinusd()
	{
		return $this->layeroflimitinusd;
	}

	/**
	 * Get the [percentageoflayer] column value.
	 * 
	 * @return     int
	 */
	public function getPercentageoflayer()
	{
		return $this->percentageoflayer;
	}

	/**
	 * Get the [selfinsuredretentioninlocalcurrency] column value.
	 * 
	 * @return     int
	 */
	public function getSelfinsuredretentioninlocalcurrency()
	{
		return $this->selfinsuredretentioninlocalcurrency;
	}

	/**
	 * Get the [selfinsuredretentioninusd] column value.
	 * 
	 * @return     int
	 */
	public function getSelfinsuredretentioninusd()
	{
		return $this->selfinsuredretentioninusd;
	}

	/**
	 * Get the [policycommpercentage] column value.
	 * 
	 * @return     int
	 */
	public function getPolicycommpercentage()
	{
		return $this->policycommpercentage;
	}

	/**
	 * Get the [policycomminlocalcurrency] column value.
	 * 
	 * @return     int
	 */
	public function getPolicycomminlocalcurrency()
	{
		return $this->policycomminlocalcurrency;
	}

	/**
	 * Get the [policycomminusd] column value.
	 * 
	 * @return     int
	 */
	public function getPolicycomminusd()
	{
		return $this->policycomminusd;
	}

	/**
	 * Get the [permiumnetofcomminlocalcurrency] column value.
	 * 
	 * @return     int
	 */
	public function getPermiumnetofcomminlocalcurrency()
	{
		return $this->permiumnetofcomminlocalcurrency;
	}

	/**
	 * Get the [permiumnetofcomminusd] column value.
	 * 
	 * @return     int
	 */
	public function getPermiumnetofcomminusd()
	{
		return $this->permiumnetofcomminusd;
	}

	/**
	 * Get the [naiccode] column value.
	 * 
	 * @return     int
	 */
	public function getNaiccode()
	{
		return $this->naiccode;
	}

	/**
	 * Get the [naictitle] column value.
	 * 
	 * @return     string
	 */
	public function getNaictitle()
	{
		return $this->naictitle;
	}

	/**
	 * Get the [siccode] column value.
	 * 
	 * @return     int
	 */
	public function getSiccode()
	{
		return $this->siccode;
	}

	/**
	 * Get the [sictitle] column value.
	 * 
	 * @return     string
	 */
	public function getSictitle()
	{
		return $this->sictitle;
	}

	/**
	 * Get the [masterpolicynumber] column value.
	 * 
	 * @return     string
	 */
	public function getMasterpolicynumber()
	{
		return $this->masterpolicynumber;
	}

	/**
	 * Get the [ofrcreport] column value.
	 * 
	 * @return     string
	 */
	public function getOfrcreport()
	{
		return $this->ofrcreport;
	}

	/**
	 * Get the [retailbrokername] column value.
	 * 
	 * @return     string
	 */
	public function getRetailbrokername()
	{
		return $this->retailbrokername;
	}

	/**
	 * Get the [retailbrokercountry] column value.
	 * 
	 * @return     string
	 */
	public function getRetailbrokercountry()
	{
		return $this->retailbrokercountry;
	}

	/**
	 * Get the [retailbrokerstate] column value.
	 * 
	 * @return     string
	 */
	public function getRetailbrokerstate()
	{
		return $this->retailbrokerstate;
	}

	/**
	 * Get the [retailbrokercity] column value.
	 * 
	 * @return     string
	 */
	public function getRetailbrokercity()
	{
		return $this->retailbrokercity;
	}

	/**
	 * Get the [optionally formatted] temporal [createddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreateddate($format = 'Y-m-d H:i:s')
	{
		if ($this->createddate === null) {
			return null;
		}


		if ($this->createddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->createddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->createddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [modifieddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getModifieddate($format = 'Y-m-d H:i:s')
	{
		if ($this->modifieddate === null) {
			return null;
		}


		if ($this->modifieddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->modifieddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->modifieddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}
        
        public function getAmendmentCount()
	{
		return $this->amendmentcount;
	}
        
        public function getAmendmentCountCancelation()
	{
		return $this->amendmentcancelationcount;
	}
        
	/**
	 * Set the value of [submissionid] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSubmissionid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->submissionid !== $v) {
			$this->submissionid = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SUBMISSIONID;
		}

		return $this;
	} // setSubmissionid()

	/**
	 * Set the value of [qcstatus] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setQcstatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->qcstatus !== $v) {
			$this->qcstatus = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::QCSTATUS;
		}

		return $this;
	} // setQcstatus()

	/**
	 * Set the value of [submissionnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSubmissionnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->submissionnumber !== $v) {
			$this->submissionnumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SUBMISSIONNUMBER;
		}

		return $this;
	} // setSubmissionnumber()

	/**
	 * Set the value of [dbnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setDbnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dbnumber !== $v) {
			$this->dbnumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::DBNUMBER;
		}

		return $this;
	} // setDbnumber()

	/**
	 * Set the value of [reinsuredcompany] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setReinsuredcompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reinsuredcompany !== $v) {
			$this->reinsuredcompany = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::REINSUREDCOMPANY;
		}

		return $this;
	} // setReinsuredcompany()

	/**
	 * Set the value of [dbaname] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setDbaname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dbaname !== $v) {
			$this->dbaname = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::DBANAME;
		}

		return $this;
	} // setDbaname()

	/**
	 * Sets the value of [effectivedate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setEffectivedate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->effectivedate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->effectivedate !== null && $tmpDt = new DateTime($this->effectivedate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->effectivedate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::EFFECTIVEDATE;
			}
		} // if either are not null

		return $this;
	} // setEffectivedate()

	/**
	 * Sets the value of [expirydate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setExpirydate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->expirydate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->expirydate !== null && $tmpDt = new DateTime($this->expirydate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->expirydate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::EXPIRYDATE;
			}
		} // if either are not null

		return $this;
	} // setExpirydate()

	/**
	 * Set the value of [brokercode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercode !== $v) {
			$this->brokercode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCODE;
		}

		return $this;
	} // setBrokercode()

	/**
	 * Set the value of [brokercontactperson] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercontactperson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactperson !== $v) {
			$this->brokercontactperson = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCONTACTPERSON;
		}

		return $this;
	} // setBrokercontactperson()

	/**
	 * Set the value of [brokercontactpersonemail] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercontactpersonemail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonemail !== $v) {
			$this->brokercontactpersonemail = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCONTACTPERSONEMAIL;
		}

		return $this;
	} // setBrokercontactpersonemail()

	/**
	 * Set the value of [brokercontactpersonnumber] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercontactpersonnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonnumber !== $v) {
			$this->brokercontactpersonnumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCONTACTPERSONNUMBER;
		}

		return $this;
	} // setBrokercontactpersonnumber()

	/**
	 * Set the value of [brokercontactpersonmobile] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercontactpersonmobile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonmobile !== $v) {
			$this->brokercontactpersonmobile = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCONTACTPERSONMOBILE;
		}

		return $this;
	} // setBrokercontactpersonmobile()

	/**
	 * Set the value of [totalinsuredvalue] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setTotalinsuredvalue($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->totalinsuredvalue !== $v) {
			$this->totalinsuredvalue = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::TOTALINSUREDVALUE;
		}

		return $this;
	} // setTotalinsuredvalue()

	/**
	 * Set the value of [totalinsuredvalueinusd] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setTotalinsuredvalueinusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->totalinsuredvalueinusd !== $v) {
			$this->totalinsuredvalueinusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::TOTALINSUREDVALUEINUSD;
		}

		return $this;
	} // setTotalinsuredvalueinusd()

	/**
	 * Sets the value of [dateofrecievingbybroker] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setDateofrecievingbybroker($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dateofrecievingbybroker !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dateofrecievingbybroker !== null && $tmpDt = new DateTime($this->dateofrecievingbybroker)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dateofrecievingbybroker = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::DATEOFRECIEVINGBYBROKER;
			}
		} // if either are not null

		return $this;
	} // setDateofrecievingbybroker()

	/**
	 * Sets the value of [dateofrecievingbyindia] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setDateofrecievingbyindia($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dateofrecievingbyindia !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dateofrecievingbyindia !== null && $tmpDt = new DateTime($this->dateofrecievingbyindia)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dateofrecievingbyindia = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::DATEOFRECIEVINGBYINDIA;
			}
		} // if either are not null

		return $this;
	} // setDateofrecievingbyindia()

	/**
	 * Set the value of [newrenewal] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setNewrenewal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->newrenewal !== $v) {
			$this->newrenewal = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::NEWRENEWAL;
		}

		return $this;
	} // setNewrenewal()

	/**
	 * Set the value of [insuredname] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredname !== $v) {
			$this->insuredname = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDNAME;
		}

		return $this;
	} // setInsuredname()

	/**
	 * Set the value of [insuredaddress1] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredaddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredaddress1 !== $v) {
			$this->insuredaddress1 = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDADDRESS1;
		}

		return $this;
	} // setInsuredaddress1()

	/**
	 * Set the value of [insuredcity] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredcity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredcity !== $v) {
			$this->insuredcity = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDCITY;
		}

		return $this;
	} // setInsuredcity()

	/**
	 * Set the value of [insuredstate] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredstate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredstate !== $v) {
			$this->insuredstate = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDSTATE;
		}

		return $this;
	} // setInsuredstate()

	/**
	 * Set the value of [insuredcountry] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredcountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredcountry !== $v) {
			$this->insuredcountry = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDCOUNTRY;
		}

		return $this;
	} // setInsuredcountry()

	/**
	 * Set the value of [insuredzipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredzipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredzipcode !== $v) {
			$this->insuredzipcode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDZIPCODE;
		}

		return $this;
	} // setInsuredzipcode()

	/**
	 * Set the value of [advisenid] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAdvisenid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->advisenid !== $v) {
			$this->advisenid = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ADVISENID;
		}

		return $this;
	} // setAdvisenid()

	/**
	 * Set the value of [insuredcontactperson] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredcontactperson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredcontactperson !== $v) {
			$this->insuredcontactperson = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDCONTACTPERSON;
		}

		return $this;
	} // setInsuredcontactperson()

	/**
	 * Set the value of [insuredcontactpersonemail] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredcontactpersonemail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredcontactpersonemail !== $v) {
			$this->insuredcontactpersonemail = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDCONTACTPERSONEMAIL;
		}

		return $this;
	} // setInsuredcontactpersonemail()

	/**
	 * Set the value of [insuredcontactpersonphonenumber] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredcontactpersonphonenumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredcontactpersonphonenumber !== $v) {
			$this->insuredcontactpersonphonenumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDCONTACTPERSONPHONENUMBER;
		}

		return $this;
	} // setInsuredcontactpersonphonenumber()

	/**
	 * Set the value of [insuredcontactpersonmobilenumber] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredcontactpersonmobilenumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->insuredcontactpersonmobilenumber !== $v) {
			$this->insuredcontactpersonmobilenumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDCONTACTPERSONMOBILENUMBER;
		}

		return $this;
	} // setInsuredcontactpersonmobilenumber()

	/**
	 * Set the value of [alternativeaddress1] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAlternativeaddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternativeaddress1 !== $v) {
			$this->alternativeaddress1 = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ALTERNATIVEADDRESS1;
		}

		return $this;
	} // setAlternativeaddress1()

	/**
	 * Set the value of [alternativecity] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAlternativecity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternativecity !== $v) {
			$this->alternativecity = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ALTERNATIVECITY;
		}

		return $this;
	} // setAlternativecity()

	/**
	 * Set the value of [alternativestate] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAlternativestate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternativestate !== $v) {
			$this->alternativestate = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ALTERNATIVESTATE;
		}

		return $this;
	} // setAlternativestate()

	/**
	 * Set the value of [alternativecountry] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAlternativecountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternativecountry !== $v) {
			$this->alternativecountry = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ALTERNATIVECOUNTRY;
		}

		return $this;
	} // setAlternativecountry()

	/**
	 * Set the value of [alternativezipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAlternativezipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alternativezipcode !== $v) {
			$this->alternativezipcode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ALTERNATIVEZIPCODE;
		}

		return $this;
	} // setAlternativezipcode()

	/**
	 * Set the value of [underwritername] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setUnderwritername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->underwritername !== $v) {
			$this->underwritername = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::UNDERWRITERNAME;
		}

		return $this;
	} // setUnderwritername()

	/**
	 * Set the value of [propertytype] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPropertytype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->propertytype !== $v) {
			$this->propertytype = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROPERTYTYPE;
		}

		return $this;
	} // setPropertytype()

	/**
	 * Set the value of [propertylinesubtype] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPropertylinesubtype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->propertylinesubtype !== $v) {
			$this->propertylinesubtype = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROPERTYLINESUBTYPE;
		}

		return $this;
	} // setPropertylinesubtype()

	/**
	 * Set the value of [sectioncode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSectioncode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sectioncode !== $v) {
			$this->sectioncode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SECTIONCODE;
		}

		return $this;
	} // setSectioncode()

	/**
	 * Set the value of [profitcode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProfitcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profitcode !== $v) {
			$this->profitcode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROFITCODE;
		}

		return $this;
	} // setProfitcode()

	/**
	 * Set the value of [currentstatus] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCurrentstatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->currentstatus !== $v) {
			$this->currentstatus = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::CURRENTSTATUS;
		}

		return $this;
	} // setCurrentstatus()

	/**
	 * Sets the value of [processdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProcessdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->processdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->processdate !== null && $tmpDt = new DateTime($this->processdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->processdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::PROCESSDATE;
			}
		} // if either are not null

		return $this;
	} // setProcessdate()

	/**
	 * Set the value of [grosspremium] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setGrosspremium($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->grosspremium !== $v) {
			$this->grosspremium = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::GROSSPREMIUM;
		}

		return $this;
	} // setGrosspremium()

	/**
	 * Set the value of [statuslimit] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setStatuslimit($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->statuslimit !== $v) {
			$this->statuslimit = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::STATUSLIMIT;
		}

		return $this;
	} // setStatuslimit()

	/**
	 * Set the value of [attachmentpoint] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAttachmentpoint($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->attachmentpoint !== $v) {
			$this->attachmentpoint = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ATTACHMENTPOINT;
		}

		return $this;
	} // setAttachmentpoint()

	/**
	 * Set the value of [grosspremiuminusd] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setGrosspremiuminusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->grosspremiuminusd !== $v) {
			$this->grosspremiuminusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::GROSSPREMIUMINUSD;
		}

		return $this;
	} // setGrosspremiuminusd()

	/**
	 * Set the value of [limitinusd] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setLimitinusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->limitinusd !== $v) {
			$this->limitinusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::LIMITINUSD;
		}

		return $this;
	} // setLimitinusd()

	/**
	 * Set the value of [attachmentpointinusd] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAttachmentpointinusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->attachmentpointinusd !== $v) {
			$this->attachmentpointinusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ATTACHMENTPOINTINUSD;
		}

		return $this;
	} // setAttachmentpointinusd()

	/**
	 * Set the value of [exchangerate] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setExchangerate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->exchangerate !== $v) {
			$this->exchangerate = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::EXCHANGERATE;
		}

		return $this;
	} // setExchangerate()

	/**
	 * Sets the value of [exchangedate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setExchangedate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->exchangedate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->exchangedate !== null && $tmpDt = new DateTime($this->exchangedate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->exchangedate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::EXCHANGEDATE;
			}
		} // if either are not null

		return $this;
	} // setExchangedate()

	/**
	 * Set the value of [currency] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->currency !== $v) {
			$this->currency = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::CURRENCY;
		}

		return $this;
	} // setCurrency()

	/**
	 * Set the value of [reasoncode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setReasoncode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reasoncode !== $v) {
			$this->reasoncode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::REASONCODE;
		}

		return $this;
	} // setReasoncode()

	/**
	 * Set the value of [reasoncodemeaning] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setReasoncodemeaning($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reasoncodemeaning !== $v) {
			$this->reasoncodemeaning = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::REASONCODEMEANING;
		}

		return $this;
	} // setReasoncodemeaning()

	/**
	 * Set the value of [cabcompanies] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCabcompanies($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cabcompanies !== $v) {
			$this->cabcompanies = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::CABCOMPANIES;
		}

		return $this;
	} // setCabcompanies()

	/**
	 * Set the value of [projectname] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectname !== $v) {
			$this->projectname = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTNAME;
		}

		return $this;
	} // setProjectname()

	/**
	 * Set the value of [projectcontractorname] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectcontractorname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectcontractorname !== $v) {
			$this->projectcontractorname = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTCONTRACTORNAME;
		}

		return $this;
	} // setProjectcontractorname()

	/**
	 * Set the value of [projectownername] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectownername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectownername !== $v) {
			$this->projectownername = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTOWNERNAME;
		}

		return $this;
	} // setProjectownername()

	/**
	 * Set the value of [projectaddressline1] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectaddressline1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectaddressline1 !== $v) {
			$this->projectaddressline1 = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTADDRESSLINE1;
		}

		return $this;
	} // setProjectaddressline1()

	/**
	 * Set the value of [projectcity] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectcity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectcity !== $v) {
			$this->projectcity = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTCITY;
		}

		return $this;
	} // setProjectcity()

	/**
	 * Set the value of [projectstate] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectstate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectstate !== $v) {
			$this->projectstate = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTSTATE;
		}

		return $this;
	} // setProjectstate()

	/**
	 * Set the value of [projectcountry] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setProjectcountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->projectcountry !== $v) {
			$this->projectcountry = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PROJECTCOUNTRY;
		}

		return $this;
	} // setProjectcountry()

	/**
	 * Set the value of [bidsituation] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBidsituation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bidsituation !== $v) {
			$this->bidsituation = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BIDSITUATION;
		}

		return $this;
	} // setBidsituation()

	/**
	 * Set the value of [brokername] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokername !== $v) {
			$this->brokername = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERNAME;
		}

		return $this;
	} // setBrokername()

	/**
	 * Set the value of [brokertype] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokertype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokertype !== $v) {
			$this->brokertype = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERTYPE;
		}

		return $this;
	} // setBrokertype()

	/**
	 * Set the value of [brokercity] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercity !== $v) {
			$this->brokercity = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCITY;
		}

		return $this;
	} // setBrokercity()

	/**
	 * Set the value of [brokerstate] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokerstate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokerstate !== $v) {
			$this->brokerstate = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERSTATE;
		}

		return $this;
	} // setBrokerstate()

	/**
	 * Set the value of [brokercontactpersonstreetaddress] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercontactpersonstreetaddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonstreetaddress !== $v) {
			$this->brokercontactpersonstreetaddress = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCONTACTPERSONSTREETADDRESS;
		}

		return $this;
	} // setBrokercontactpersonstreetaddress()

	/**
	 * Set the value of [brokercontactpersonzipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercontactpersonzipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercontactpersonzipcode !== $v) {
			$this->brokercontactpersonzipcode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCONTACTPERSONZIPCODE;
		}

		return $this;
	} // setBrokercontactpersonzipcode()

	/**
	 * Set the value of [brokercountry] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBrokercountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->brokercountry !== $v) {
			$this->brokercountry = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BROKERCOUNTRY;
		}

		return $this;
	} // setBrokercountry()

	/**
	 * Set the value of [branchoffice] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBranchoffice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->branchoffice !== $v) {
			$this->branchoffice = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::BRANCHOFFICE;
		}

		return $this;
	} // setBranchoffice()

	/**
	 * Set the value of [riskprofile] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setRiskprofile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->riskprofile !== $v) {
			$this->riskprofile = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::RISKPROFILE;
		}

		return $this;
	} // setRiskprofile()

	/**
	 * Sets the value of [insuredsubmissiondate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredsubmissiondate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->insuredsubmissiondate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->insuredsubmissiondate !== null && $tmpDt = new DateTime($this->insuredsubmissiondate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->insuredsubmissiondate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDSUBMISSIONDATE;
			}
		} // if either are not null

		return $this;
	} // setInsuredsubmissiondate()

	/**
	 * Sets the value of [insuredquoteduedate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setInsuredquoteduedate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->insuredquoteduedate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->insuredquoteduedate !== null && $tmpDt = new DateTime($this->insuredquoteduedate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->insuredquoteduedate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::INSUREDQUOTEDUEDATE;
			}
		} // if either are not null

		return $this;
	} // setInsuredquoteduedate()

	/**
	 * Sets the value of [binddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setBinddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->binddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->binddate !== null && $tmpDt = new DateTime($this->binddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->binddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::BINDDATE;
			}
		} // if either are not null

		return $this;
	} // setBinddate()

	/**
	 * Set the value of [renewable] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setRenewable($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->renewable !== $v) {
			$this->renewable = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::RENEWABLE;
		}

		return $this;
	} // setRenewable()

	/**
	 * Sets the value of [dateofrenewal] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setDateofrenewal($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dateofrenewal !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dateofrenewal !== null && $tmpDt = new DateTime($this->dateofrenewal)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dateofrenewal = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::DATEOFRENEWAL;
			}
		} // if either are not null

		return $this;
	} // setDateofrenewal()

	/**
	 * Set the value of [policytype] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPolicytype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policytype !== $v) {
			$this->policytype = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::POLICYTYPE;
		}

		return $this;
	} // setPolicytype()

	/**
	 * Set the value of [directassumed] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setDirectassumed($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->directassumed !== $v) {
			$this->directassumed = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::DIRECTASSUMED;
		}

		return $this;
	} // setDirectassumed()

	/**
	 * Set the value of [companypaper] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCompanypaper($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->companypaper !== $v) {
			$this->companypaper = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::COMPANYPAPER;
		}

		return $this;
	} // setCompanypaper()

	/**
	 * Set the value of [companypapernumber] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCompanypapernumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->companypapernumber !== $v) {
			$this->companypapernumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::COMPANYPAPERNUMBER;
		}

		return $this;
	} // setCompanypapernumber()

	/**
	 * Set the value of [coverage] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCoverage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coverage !== $v) {
			$this->coverage = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::COVERAGE;
		}

		return $this;
	} // setCoverage()

	/**
	 * Set the value of [policynumber] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPolicynumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policynumber !== $v) {
			$this->policynumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::POLICYNUMBER;
		}

		return $this;
	} // setPolicynumber()

	/**
	 * Set the value of [suffix] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSuffix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->suffix !== $v) {
			$this->suffix = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SUFFIX;
		}

		return $this;
	} // setSuffix()

	/**
	 * Set the value of [transactionnumber] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setTransactionnumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->transactionnumber !== $v) {
			$this->transactionnumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::TRANSACTIONNUMBER;
		}

		return $this;
	} // setTransactionnumber()

	/**
	 * Set the value of [admittednonadmitted] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setAdmittednonadmitted($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admittednonadmitted !== $v) {
			$this->admittednonadmitted = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ADMITTEDNONADMITTED;
		}

		return $this;
	} // setAdmittednonadmitted()

	/**
	 * Set the value of [layeroflimitinlocalcurrency] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setLayeroflimitinlocalcurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->layeroflimitinlocalcurrency !== $v) {
			$this->layeroflimitinlocalcurrency = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::LAYEROFLIMITINLOCALCURRENCY;
		}

		return $this;
	} // setLayeroflimitinlocalcurrency()

	/**
	 * Set the value of [layeroflimitinusd] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setLayeroflimitinusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->layeroflimitinusd !== $v) {
			$this->layeroflimitinusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::LAYEROFLIMITINUSD;
		}

		return $this;
	} // setLayeroflimitinusd()

	/**
	 * Set the value of [percentageoflayer] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPercentageoflayer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->percentageoflayer !== $v) {
			$this->percentageoflayer = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PERCENTAGEOFLAYER;
		}

		return $this;
	} // setPercentageoflayer()

	/**
	 * Set the value of [selfinsuredretentioninlocalcurrency] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSelfinsuredretentioninlocalcurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selfinsuredretentioninlocalcurrency !== $v) {
			$this->selfinsuredretentioninlocalcurrency = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SELFINSUREDRETENTIONINLOCALCURRENCY;
		}

		return $this;
	} // setSelfinsuredretentioninlocalcurrency()

	/**
	 * Set the value of [selfinsuredretentioninusd] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSelfinsuredretentioninusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selfinsuredretentioninusd !== $v) {
			$this->selfinsuredretentioninusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SELFINSUREDRETENTIONINUSD;
		}

		return $this;
	} // setSelfinsuredretentioninusd()

	/**
	 * Set the value of [policycommpercentage] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPolicycommpercentage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policycommpercentage !== $v) {
			$this->policycommpercentage = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::POLICYCOMMPERCENTAGE;
		}

		return $this;
	} // setPolicycommpercentage()

	/**
	 * Set the value of [policycomminlocalcurrency] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPolicycomminlocalcurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policycomminlocalcurrency !== $v) {
			$this->policycomminlocalcurrency = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::POLICYCOMMINLOCALCURRENCY;
		}

		return $this;
	} // setPolicycomminlocalcurrency()

	/**
	 * Set the value of [policycomminusd] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPolicycomminusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policycomminusd !== $v) {
			$this->policycomminusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::POLICYCOMMINUSD;
		}

		return $this;
	} // setPolicycomminusd()

	/**
	 * Set the value of [permiumnetofcomminlocalcurrency] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPermiumnetofcomminlocalcurrency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->permiumnetofcomminlocalcurrency !== $v) {
			$this->permiumnetofcomminlocalcurrency = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PERMIUMNETOFCOMMINLOCALCURRENCY;
		}

		return $this;
	} // setPermiumnetofcomminlocalcurrency()

	/**
	 * Set the value of [permiumnetofcomminusd] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setPermiumnetofcomminusd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->permiumnetofcomminusd !== $v) {
			$this->permiumnetofcomminusd = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::PERMIUMNETOFCOMMINUSD;
		}

		return $this;
	} // setPermiumnetofcomminusd()

	/**
	 * Set the value of [naiccode] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setNaiccode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->naiccode !== $v) {
			$this->naiccode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::NAICCODE;
		}

		return $this;
	} // setNaiccode()

	/**
	 * Set the value of [naictitle] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setNaictitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->naictitle !== $v) {
			$this->naictitle = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::NAICTITLE;
		}

		return $this;
	} // setNaictitle()

	/**
	 * Set the value of [siccode] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSiccode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->siccode !== $v) {
			$this->siccode = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SICCODE;
		}

		return $this;
	} // setSiccode()

	/**
	 * Set the value of [sictitle] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setSictitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sictitle !== $v) {
			$this->sictitle = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::SICTITLE;
		}

		return $this;
	} // setSictitle()

	/**
	 * Set the value of [masterpolicynumber] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setMasterpolicynumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->masterpolicynumber !== $v) {
			$this->masterpolicynumber = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::MASTERPOLICYNUMBER;
		}

		return $this;
	} // setMasterpolicynumber()

	/**
	 * Set the value of [ofrcreport] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setOfrcreport($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ofrcreport !== $v) {
			$this->ofrcreport = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::OFRCREPORT;
		}

		return $this;
	} // setOfrcreport()

	/**
	 * Set the value of [retailbrokername] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setRetailbrokername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->retailbrokername !== $v) {
			$this->retailbrokername = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::RETAILBROKERNAME;
		}

		return $this;
	} // setRetailbrokername()

	/**
	 * Set the value of [retailbrokercountry] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setRetailbrokercountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->retailbrokercountry !== $v) {
			$this->retailbrokercountry = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::RETAILBROKERCOUNTRY;
		}

		return $this;
	} // setRetailbrokercountry()

	/**
	 * Set the value of [retailbrokerstate] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setRetailbrokerstate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->retailbrokerstate !== $v) {
			$this->retailbrokerstate = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::RETAILBROKERSTATE;
		}

		return $this;
	} // setRetailbrokerstate()

	/**
	 * Set the value of [retailbrokercity] column.
	 * 
	 * @param      string $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setRetailbrokercity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->retailbrokercity !== $v) {
			$this->retailbrokercity = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::RETAILBROKERCITY;
		}

		return $this;
	} // setRetailbrokercity()

	/**
	 * Sets the value of [createddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setCreateddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->createddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->createddate !== null && $tmpDt = new DateTime($this->createddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->createddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::CREATEDDATE;
			}
		} // if either are not null

		return $this;
	} // setCreateddate()

	/**
	 * Sets the value of [modifieddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setModifieddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->modifieddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->modifieddate !== null && $tmpDt = new DateTime($this->modifieddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->modifieddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SubmissionSearchPeer::MODIFIEDDATE;
			}
		} // if either are not null

		return $this;
	} // setModifieddate()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     SubmissionSearch The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::ID;
		}

		return $this;
	} // setId()
        
        public function setAmendmentCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->amendmentcount !== $v) {
			$this->amendmentcount = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::AMENDMENTCOUNT;
		}

		return $this;
	}
        
        public function setAmendmentCountCalcelation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->amendmentcancelationcount !== $v) {
			$this->amendmentcancelationcount = $v;
			$this->modifiedColumns[] = SubmissionSearchPeer::AMENDMENTCANCELATIONCOUNT;
		}

		return $this;
	}
	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->submissionid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->qcstatus = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->submissionnumber = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->dbnumber = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->reinsuredcompany = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->dbaname = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->effectivedate = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->expirydate = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->brokercode = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->brokercontactperson = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->brokercontactpersonemail = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->brokercontactpersonnumber = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->brokercontactpersonmobile = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->totalinsuredvalue = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->totalinsuredvalueinusd = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->dateofrecievingbybroker = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->dateofrecievingbyindia = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->newrenewal = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->insuredname = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->insuredaddress1 = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->insuredcity = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->insuredstate = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->insuredcountry = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->insuredzipcode = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->advisenid = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->insuredcontactperson = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->insuredcontactpersonemail = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->insuredcontactpersonphonenumber = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->insuredcontactpersonmobilenumber = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->alternativeaddress1 = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->alternativecity = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->alternativestate = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->alternativecountry = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->alternativezipcode = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->underwritername = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->propertytype = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->propertylinesubtype = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->sectioncode = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->profitcode = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->currentstatus = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->processdate = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->grosspremium = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->statuslimit = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->attachmentpoint = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->grosspremiuminusd = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->limitinusd = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->attachmentpointinusd = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->exchangerate = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->exchangedate = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->currency = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->reasoncode = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->reasoncodemeaning = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->cabcompanies = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
			$this->projectname = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->projectcontractorname = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->projectownername = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->projectaddressline1 = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->projectcity = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
			$this->projectstate = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->projectcountry = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->bidsituation = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
			$this->brokername = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
			$this->brokertype = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
			$this->brokercity = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
			$this->brokerstate = ($row[$startcol + 64] !== null) ? (string) $row[$startcol + 64] : null;
			$this->brokercontactpersonstreetaddress = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->brokercontactpersonzipcode = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->brokercountry = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
			$this->branchoffice = ($row[$startcol + 68] !== null) ? (string) $row[$startcol + 68] : null;
			$this->riskprofile = ($row[$startcol + 69] !== null) ? (string) $row[$startcol + 69] : null;
			$this->insuredsubmissiondate = ($row[$startcol + 70] !== null) ? (string) $row[$startcol + 70] : null;
			$this->insuredquoteduedate = ($row[$startcol + 71] !== null) ? (string) $row[$startcol + 71] : null;
			$this->binddate = ($row[$startcol + 72] !== null) ? (string) $row[$startcol + 72] : null;
			$this->renewable = ($row[$startcol + 73] !== null) ? (string) $row[$startcol + 73] : null;
			$this->dateofrenewal = ($row[$startcol + 74] !== null) ? (string) $row[$startcol + 74] : null;
			$this->policytype = ($row[$startcol + 75] !== null) ? (string) $row[$startcol + 75] : null;
			$this->directassumed = ($row[$startcol + 76] !== null) ? (string) $row[$startcol + 76] : null;
			$this->companypaper = ($row[$startcol + 77] !== null) ? (string) $row[$startcol + 77] : null;
			$this->companypapernumber = ($row[$startcol + 78] !== null) ? (string) $row[$startcol + 78] : null;
			$this->coverage = ($row[$startcol + 79] !== null) ? (string) $row[$startcol + 79] : null;
			$this->policynumber = ($row[$startcol + 80] !== null) ? (string) $row[$startcol + 80] : null;
			$this->suffix = ($row[$startcol + 81] !== null) ? (string) $row[$startcol + 81] : null;
			$this->transactionnumber = ($row[$startcol + 82] !== null) ? (string) $row[$startcol + 82] : null;
			$this->admittednonadmitted = ($row[$startcol + 83] !== null) ? (string) $row[$startcol + 83] : null;
			$this->layeroflimitinlocalcurrency = ($row[$startcol + 84] !== null) ? (string) $row[$startcol + 84] : null;
			$this->layeroflimitinusd = ($row[$startcol + 85] !== null) ? (string) $row[$startcol + 85] : null;
			$this->percentageoflayer = ($row[$startcol + 86] !== null) ? (string) $row[$startcol + 86] : null;
			$this->selfinsuredretentioninlocalcurrency = ($row[$startcol + 87] !== null) ? (string) $row[$startcol + 87] : null;
			$this->selfinsuredretentioninusd = ($row[$startcol + 88] !== null) ? (string) $row[$startcol + 88] : null;
			$this->policycommpercentage = ($row[$startcol + 89] !== null) ? (string) $row[$startcol + 89] : null;
			$this->policycomminlocalcurrency = ($row[$startcol + 90] !== null) ? (string) $row[$startcol + 90] : null;
			$this->policycomminusd = ($row[$startcol + 91] !== null) ? (string) $row[$startcol + 91] : null;
			$this->permiumnetofcomminlocalcurrency = ($row[$startcol + 92] !== null) ? (string) $row[$startcol + 92] : null;
			$this->permiumnetofcomminusd = ($row[$startcol + 93] !== null) ? (string) $row[$startcol + 93] : null;
			$this->naiccode = ($row[$startcol + 94] !== null) ? (string) $row[$startcol + 94] : null;
			$this->naictitle = ($row[$startcol + 95] !== null) ? (string) $row[$startcol + 95] : null;
			$this->siccode = ($row[$startcol + 96] !== null) ? (string) $row[$startcol + 96] : null;
			$this->sictitle = ($row[$startcol + 97] !== null) ? (string) $row[$startcol + 97] : null;
			$this->masterpolicynumber = ($row[$startcol + 98] !== null) ? (string) $row[$startcol + 98] : null;
			$this->ofrcreport = ($row[$startcol + 99] !== null) ? (string) $row[$startcol + 99] : null;
			$this->retailbrokername = ($row[$startcol + 100] !== null) ? (string) $row[$startcol + 100] : null;
			$this->retailbrokercountry = ($row[$startcol + 101] !== null) ? (string) $row[$startcol + 101] : null;
			$this->retailbrokerstate = ($row[$startcol + 102] !== null) ? (string) $row[$startcol + 102] : null;
			$this->retailbrokercity = ($row[$startcol + 103] !== null) ? (string) $row[$startcol + 103] : null;
			$this->createddate = ($row[$startcol + 104] !== null) ? (string) $row[$startcol + 104] : null;
			$this->modifieddate = ($row[$startcol + 105] !== null) ? (string) $row[$startcol + 105] : null;
			$this->id = ($row[$startcol + 106] !== null) ? (int) $row[$startcol + 106] : null;
                        $this->amendmentcount = ($row[$startcol + 107] !== null) ? (string) $row[$startcol + 107] : null;
                        $this->amendmentcancelationcount = ($row[$startcol + 108] !== null) ? (string) $row[$startcol + 108] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 108; // 107 = SubmissionSearchPeer::NUM_COLUMNS - SubmissionSearchPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SubmissionSearch object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionSearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SubmissionSearchPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSubmissionSearch:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				SubmissionSearchPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSubmissionSearch:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SubmissionSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSubmissionSearch:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSubmissionSearch:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SubmissionSearchPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SubmissionSearchPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SubmissionSearchPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SubmissionSearchPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = SubmissionSearchPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SubmissionSearchPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getSubmissionid();
				break;
			case 1:
				return $this->getQcstatus();
				break;
			case 2:
				return $this->getSubmissionnumber();
				break;
			case 3:
				return $this->getDbnumber();
				break;
			case 4:
				return $this->getReinsuredcompany();
				break;
			case 5:
				return $this->getDbaname();
				break;
			case 6:
				return $this->getEffectivedate();
				break;
			case 7:
				return $this->getExpirydate();
				break;
			case 8:
				return $this->getBrokercode();
				break;
			case 9:
				return $this->getBrokercontactperson();
				break;
			case 10:
				return $this->getBrokercontactpersonemail();
				break;
			case 11:
				return $this->getBrokercontactpersonnumber();
				break;
			case 12:
				return $this->getBrokercontactpersonmobile();
				break;
			case 13:
				return $this->getTotalinsuredvalue();
				break;
			case 14:
				return $this->getTotalinsuredvalueinusd();
				break;
			case 15:
				return $this->getDateofrecievingbybroker();
				break;
			case 16:
				return $this->getDateofrecievingbyindia();
				break;
			case 17:
				return $this->getNewrenewal();
				break;
			case 18:
				return $this->getInsuredname();
				break;
			case 19:
				return $this->getInsuredaddress1();
				break;
			case 20:
				return $this->getInsuredcity();
				break;
			case 21:
				return $this->getInsuredstate();
				break;
			case 22:
				return $this->getInsuredcountry();
				break;
			case 23:
				return $this->getInsuredzipcode();
				break;
			case 24:
				return $this->getAdvisenid();
				break;
			case 25:
				return $this->getInsuredcontactperson();
				break;
			case 26:
				return $this->getInsuredcontactpersonemail();
				break;
			case 27:
				return $this->getInsuredcontactpersonphonenumber();
				break;
			case 28:
				return $this->getInsuredcontactpersonmobilenumber();
				break;
			case 29:
				return $this->getAlternativeaddress1();
				break;
			case 30:
				return $this->getAlternativecity();
				break;
			case 31:
				return $this->getAlternativestate();
				break;
			case 32:
				return $this->getAlternativecountry();
				break;
			case 33:
				return $this->getAlternativezipcode();
				break;
			case 34:
				return $this->getUnderwritername();
				break;
			case 35:
				return $this->getPropertytype();
				break;
			case 36:
				return $this->getPropertylinesubtype();
				break;
			case 37:
				return $this->getSectioncode();
				break;
			case 38:
				return $this->getProfitcode();
				break;
			case 39:
				return $this->getCurrentstatus();
				break;
			case 40:
				return $this->getProcessdate();
				break;
			case 41:
				return $this->getGrosspremium();
				break;
			case 42:
				return $this->getStatuslimit();
				break;
			case 43:
				return $this->getAttachmentpoint();
				break;
			case 44:
				return $this->getGrosspremiuminusd();
				break;
			case 45:
				return $this->getLimitinusd();
				break;
			case 46:
				return $this->getAttachmentpointinusd();
				break;
			case 47:
				return $this->getExchangerate();
				break;
			case 48:
				return $this->getExchangedate();
				break;
			case 49:
				return $this->getCurrency();
				break;
			case 50:
				return $this->getReasoncode();
				break;
			case 51:
				return $this->getReasoncodemeaning();
				break;
			case 52:
				return $this->getCabcompanies();
				break;
			case 53:
				return $this->getProjectname();
				break;
			case 54:
				return $this->getProjectcontractorname();
				break;
			case 55:
				return $this->getProjectownername();
				break;
			case 56:
				return $this->getProjectaddressline1();
				break;
			case 57:
				return $this->getProjectcity();
				break;
			case 58:
				return $this->getProjectstate();
				break;
			case 59:
				return $this->getProjectcountry();
				break;
			case 60:
				return $this->getBidsituation();
				break;
			case 61:
				return $this->getBrokername();
				break;
			case 62:
				return $this->getBrokertype();
				break;
			case 63:
				return $this->getBrokercity();
				break;
			case 64:
				return $this->getBrokerstate();
				break;
			case 65:
				return $this->getBrokercontactpersonstreetaddress();
				break;
			case 66:
				return $this->getBrokercontactpersonzipcode();
				break;
			case 67:
				return $this->getBrokercountry();
				break;
			case 68:
				return $this->getBranchoffice();
				break;
			case 69:
				return $this->getRiskprofile();
				break;
			case 70:
				return $this->getInsuredsubmissiondate();
				break;
			case 71:
				return $this->getInsuredquoteduedate();
				break;
			case 72:
				return $this->getBinddate();
				break;
			case 73:
				return $this->getRenewable();
				break;
			case 74:
				return $this->getDateofrenewal();
				break;
			case 75:
				return $this->getPolicytype();
				break;
			case 76:
				return $this->getDirectassumed();
				break;
			case 77:
				return $this->getCompanypaper();
				break;
			case 78:
				return $this->getCompanypapernumber();
				break;
			case 79:
				return $this->getCoverage();
				break;
			case 80:
				return $this->getPolicynumber();
				break;
			case 81:
				return $this->getSuffix();
				break;
			case 82:
				return $this->getTransactionnumber();
				break;
			case 83:
				return $this->getAdmittednonadmitted();
				break;
			case 84:
				return $this->getLayeroflimitinlocalcurrency();
				break;
			case 85:
				return $this->getLayeroflimitinusd();
				break;
			case 86:
				return $this->getPercentageoflayer();
				break;
			case 87:
				return $this->getSelfinsuredretentioninlocalcurrency();
				break;
			case 88:
				return $this->getSelfinsuredretentioninusd();
				break;
			case 89:
				return $this->getPolicycommpercentage();
				break;
			case 90:
				return $this->getPolicycomminlocalcurrency();
				break;
			case 91:
				return $this->getPolicycomminusd();
				break;
			case 92:
				return $this->getPermiumnetofcomminlocalcurrency();
				break;
			case 93:
				return $this->getPermiumnetofcomminusd();
				break;
			case 94:
				return $this->getNaiccode();
				break;
			case 95:
				return $this->getNaictitle();
				break;
			case 96:
				return $this->getSiccode();
				break;
			case 97:
				return $this->getSictitle();
				break;
			case 98:
				return $this->getMasterpolicynumber();
				break;
			case 99:
				return $this->getOfrcreport();
				break;
			case 100:
				return $this->getRetailbrokername();
				break;
			case 101:
				return $this->getRetailbrokercountry();
				break;
			case 102:
				return $this->getRetailbrokerstate();
				break;
			case 103:
				return $this->getRetailbrokercity();
				break;
			case 104:
				return $this->getCreateddate();
				break;
			case 105:
				return $this->getModifieddate();
				break;
			case 106:
				return $this->getId();
				break;
                        case 107:
				return $this->getAmendmentCount();
				break;
                        case 108:
				return $this->getAmendmentCountCancelation();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SubmissionSearchPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getSubmissionid(),
			$keys[1] => $this->getQcstatus(),
			$keys[2] => $this->getSubmissionnumber(),
			$keys[3] => $this->getDbnumber(),
			$keys[4] => $this->getReinsuredcompany(),
			$keys[5] => $this->getDbaname(),
			$keys[6] => $this->getEffectivedate(),
			$keys[7] => $this->getExpirydate(),
			$keys[8] => $this->getBrokercode(),
			$keys[9] => $this->getBrokercontactperson(),
			$keys[10] => $this->getBrokercontactpersonemail(),
			$keys[11] => $this->getBrokercontactpersonnumber(),
			$keys[12] => $this->getBrokercontactpersonmobile(),
			$keys[13] => $this->getTotalinsuredvalue(),
			$keys[14] => $this->getTotalinsuredvalueinusd(),
			$keys[15] => $this->getDateofrecievingbybroker(),
			$keys[16] => $this->getDateofrecievingbyindia(),
			$keys[17] => $this->getNewrenewal(),
			$keys[18] => $this->getInsuredname(),
			$keys[19] => $this->getInsuredaddress1(),
			$keys[20] => $this->getInsuredcity(),
			$keys[21] => $this->getInsuredstate(),
			$keys[22] => $this->getInsuredcountry(),
			$keys[23] => $this->getInsuredzipcode(),
			$keys[24] => $this->getAdvisenid(),
			$keys[25] => $this->getInsuredcontactperson(),
			$keys[26] => $this->getInsuredcontactpersonemail(),
			$keys[27] => $this->getInsuredcontactpersonphonenumber(),
			$keys[28] => $this->getInsuredcontactpersonmobilenumber(),
			$keys[29] => $this->getAlternativeaddress1(),
			$keys[30] => $this->getAlternativecity(),
			$keys[31] => $this->getAlternativestate(),
			$keys[32] => $this->getAlternativecountry(),
			$keys[33] => $this->getAlternativezipcode(),
			$keys[34] => $this->getUnderwritername(),
			$keys[35] => $this->getPropertytype(),
			$keys[36] => $this->getPropertylinesubtype(),
			$keys[37] => $this->getSectioncode(),
			$keys[38] => $this->getProfitcode(),
			$keys[39] => $this->getCurrentstatus(),
			$keys[40] => $this->getProcessdate(),
			$keys[41] => $this->getGrosspremium(),
			$keys[42] => $this->getStatuslimit(),
			$keys[43] => $this->getAttachmentpoint(),
			$keys[44] => $this->getGrosspremiuminusd(),
			$keys[45] => $this->getLimitinusd(),
			$keys[46] => $this->getAttachmentpointinusd(),
			$keys[47] => $this->getExchangerate(),
			$keys[48] => $this->getExchangedate(),
			$keys[49] => $this->getCurrency(),
			$keys[50] => $this->getReasoncode(),
			$keys[51] => $this->getReasoncodemeaning(),
			$keys[52] => $this->getCabcompanies(),
			$keys[53] => $this->getProjectname(),
			$keys[54] => $this->getProjectcontractorname(),
			$keys[55] => $this->getProjectownername(),
			$keys[56] => $this->getProjectaddressline1(),
			$keys[57] => $this->getProjectcity(),
			$keys[58] => $this->getProjectstate(),
			$keys[59] => $this->getProjectcountry(),
			$keys[60] => $this->getBidsituation(),
			$keys[61] => $this->getBrokername(),
			$keys[62] => $this->getBrokertype(),
			$keys[63] => $this->getBrokercity(),
			$keys[64] => $this->getBrokerstate(),
			$keys[65] => $this->getBrokercontactpersonstreetaddress(),
			$keys[66] => $this->getBrokercontactpersonzipcode(),
			$keys[67] => $this->getBrokercountry(),
			$keys[68] => $this->getBranchoffice(),
			$keys[69] => $this->getRiskprofile(),
			$keys[70] => $this->getInsuredsubmissiondate(),
			$keys[71] => $this->getInsuredquoteduedate(),
			$keys[72] => $this->getBinddate(),
			$keys[73] => $this->getRenewable(),
			$keys[74] => $this->getDateofrenewal(),
			$keys[75] => $this->getPolicytype(),
			$keys[76] => $this->getDirectassumed(),
			$keys[77] => $this->getCompanypaper(),
			$keys[78] => $this->getCompanypapernumber(),
			$keys[79] => $this->getCoverage(),
			$keys[80] => $this->getPolicynumber(),
			$keys[81] => $this->getSuffix(),
			$keys[82] => $this->getTransactionnumber(),
			$keys[83] => $this->getAdmittednonadmitted(),
			$keys[84] => $this->getLayeroflimitinlocalcurrency(),
			$keys[85] => $this->getLayeroflimitinusd(),
			$keys[86] => $this->getPercentageoflayer(),
			$keys[87] => $this->getSelfinsuredretentioninlocalcurrency(),
			$keys[88] => $this->getSelfinsuredretentioninusd(),
			$keys[89] => $this->getPolicycommpercentage(),
			$keys[90] => $this->getPolicycomminlocalcurrency(),
			$keys[91] => $this->getPolicycomminusd(),
			$keys[92] => $this->getPermiumnetofcomminlocalcurrency(),
			$keys[93] => $this->getPermiumnetofcomminusd(),
			$keys[94] => $this->getNaiccode(),
			$keys[95] => $this->getNaictitle(),
			$keys[96] => $this->getSiccode(),
			$keys[97] => $this->getSictitle(),
			$keys[98] => $this->getMasterpolicynumber(),
			$keys[99] => $this->getOfrcreport(),
			$keys[100] => $this->getRetailbrokername(),
			$keys[101] => $this->getRetailbrokercountry(),
			$keys[102] => $this->getRetailbrokerstate(),
			$keys[103] => $this->getRetailbrokercity(),
			$keys[104] => $this->getCreateddate(),
			$keys[105] => $this->getModifieddate(),
			$keys[106] => $this->getId(),
                        $keys[107] => $this->getAmendmentCount(),
                        $keys[108] => $this->getAmendmentCountCancelation(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SubmissionSearchPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setSubmissionid($value);
				break;
			case 1:
				$this->setQcstatus($value);
				break;
			case 2:
				$this->setSubmissionnumber($value);
				break;
			case 3:
				$this->setDbnumber($value);
				break;
			case 4:
				$this->setReinsuredcompany($value);
				break;
			case 5:
				$this->setDbaname($value);
				break;
			case 6:
				$this->setEffectivedate($value);
				break;
			case 7:
				$this->setExpirydate($value);
				break;
			case 8:
				$this->setBrokercode($value);
				break;
			case 9:
				$this->setBrokercontactperson($value);
				break;
			case 10:
				$this->setBrokercontactpersonemail($value);
				break;
			case 11:
				$this->setBrokercontactpersonnumber($value);
				break;
			case 12:
				$this->setBrokercontactpersonmobile($value);
				break;
			case 13:
				$this->setTotalinsuredvalue($value);
				break;
			case 14:
				$this->setTotalinsuredvalueinusd($value);
				break;
			case 15:
				$this->setDateofrecievingbybroker($value);
				break;
			case 16:
				$this->setDateofrecievingbyindia($value);
				break;
			case 17:
				$this->setNewrenewal($value);
				break;
			case 18:
				$this->setInsuredname($value);
				break;
			case 19:
				$this->setInsuredaddress1($value);
				break;
			case 20:
				$this->setInsuredcity($value);
				break;
			case 21:
				$this->setInsuredstate($value);
				break;
			case 22:
				$this->setInsuredcountry($value);
				break;
			case 23:
				$this->setInsuredzipcode($value);
				break;
			case 24:
				$this->setAdvisenid($value);
				break;
			case 25:
				$this->setInsuredcontactperson($value);
				break;
			case 26:
				$this->setInsuredcontactpersonemail($value);
				break;
			case 27:
				$this->setInsuredcontactpersonphonenumber($value);
				break;
			case 28:
				$this->setInsuredcontactpersonmobilenumber($value);
				break;
			case 29:
				$this->setAlternativeaddress1($value);
				break;
			case 30:
				$this->setAlternativecity($value);
				break;
			case 31:
				$this->setAlternativestate($value);
				break;
			case 32:
				$this->setAlternativecountry($value);
				break;
			case 33:
				$this->setAlternativezipcode($value);
				break;
			case 34:
				$this->setUnderwritername($value);
				break;
			case 35:
				$this->setPropertytype($value);
				break;
			case 36:
				$this->setPropertylinesubtype($value);
				break;
			case 37:
				$this->setSectioncode($value);
				break;
			case 38:
				$this->setProfitcode($value);
				break;
			case 39:
				$this->setCurrentstatus($value);
				break;
			case 40:
				$this->setProcessdate($value);
				break;
			case 41:
				$this->setGrosspremium($value);
				break;
			case 42:
				$this->setStatuslimit($value);
				break;
			case 43:
				$this->setAttachmentpoint($value);
				break;
			case 44:
				$this->setGrosspremiuminusd($value);
				break;
			case 45:
				$this->setLimitinusd($value);
				break;
			case 46:
				$this->setAttachmentpointinusd($value);
				break;
			case 47:
				$this->setExchangerate($value);
				break;
			case 48:
				$this->setExchangedate($value);
				break;
			case 49:
				$this->setCurrency($value);
				break;
			case 50:
				$this->setReasoncode($value);
				break;
			case 51:
				$this->setReasoncodemeaning($value);
				break;
			case 52:
				$this->setCabcompanies($value);
				break;
			case 53:
				$this->setProjectname($value);
				break;
			case 54:
				$this->setProjectcontractorname($value);
				break;
			case 55:
				$this->setProjectownername($value);
				break;
			case 56:
				$this->setProjectaddressline1($value);
				break;
			case 57:
				$this->setProjectcity($value);
				break;
			case 58:
				$this->setProjectstate($value);
				break;
			case 59:
				$this->setProjectcountry($value);
				break;
			case 60:
				$this->setBidsituation($value);
				break;
			case 61:
				$this->setBrokername($value);
				break;
			case 62:
				$this->setBrokertype($value);
				break;
			case 63:
				$this->setBrokercity($value);
				break;
			case 64:
				$this->setBrokerstate($value);
				break;
			case 65:
				$this->setBrokercontactpersonstreetaddress($value);
				break;
			case 66:
				$this->setBrokercontactpersonzipcode($value);
				break;
			case 67:
				$this->setBrokercountry($value);
				break;
			case 68:
				$this->setBranchoffice($value);
				break;
			case 69:
				$this->setRiskprofile($value);
				break;
			case 70:
				$this->setInsuredsubmissiondate($value);
				break;
			case 71:
				$this->setInsuredquoteduedate($value);
				break;
			case 72:
				$this->setBinddate($value);
				break;
			case 73:
				$this->setRenewable($value);
				break;
			case 74:
				$this->setDateofrenewal($value);
				break;
			case 75:
				$this->setPolicytype($value);
				break;
			case 76:
				$this->setDirectassumed($value);
				break;
			case 77:
				$this->setCompanypaper($value);
				break;
			case 78:
				$this->setCompanypapernumber($value);
				break;
			case 79:
				$this->setCoverage($value);
				break;
			case 80:
				$this->setPolicynumber($value);
				break;
			case 81:
				$this->setSuffix($value);
				break;
			case 82:
				$this->setTransactionnumber($value);
				break;
			case 83:
				$this->setAdmittednonadmitted($value);
				break;
			case 84:
				$this->setLayeroflimitinlocalcurrency($value);
				break;
			case 85:
				$this->setLayeroflimitinusd($value);
				break;
			case 86:
				$this->setPercentageoflayer($value);
				break;
			case 87:
				$this->setSelfinsuredretentioninlocalcurrency($value);
				break;
			case 88:
				$this->setSelfinsuredretentioninusd($value);
				break;
			case 89:
				$this->setPolicycommpercentage($value);
				break;
			case 90:
				$this->setPolicycomminlocalcurrency($value);
				break;
			case 91:
				$this->setPolicycomminusd($value);
				break;
			case 92:
				$this->setPermiumnetofcomminlocalcurrency($value);
				break;
			case 93:
				$this->setPermiumnetofcomminusd($value);
				break;
			case 94:
				$this->setNaiccode($value);
				break;
			case 95:
				$this->setNaictitle($value);
				break;
			case 96:
				$this->setSiccode($value);
				break;
			case 97:
				$this->setSictitle($value);
				break;
			case 98:
				$this->setMasterpolicynumber($value);
				break;
			case 99:
				$this->setOfrcreport($value);
				break;
			case 100:
				$this->setRetailbrokername($value);
				break;
			case 101:
				$this->setRetailbrokercountry($value);
				break;
			case 102:
				$this->setRetailbrokerstate($value);
				break;
			case 103:
				$this->setRetailbrokercity($value);
				break;
			case 104:
				$this->setCreateddate($value);
				break;
			case 105:
				$this->setModifieddate($value);
				break;
			case 106:
				$this->setId($value);
				break;
                        case 107:
				$this->setAmendmentCount($value);
				break;
                        case 108:
				$this->setAmendmentCountCalcelation($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SubmissionSearchPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setSubmissionid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setQcstatus($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSubmissionnumber($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDbnumber($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setReinsuredcompany($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDbaname($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setEffectivedate($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setExpirydate($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setBrokercode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setBrokercontactperson($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setBrokercontactpersonemail($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setBrokercontactpersonnumber($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setBrokercontactpersonmobile($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setTotalinsuredvalue($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTotalinsuredvalueinusd($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDateofrecievingbybroker($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDateofrecievingbyindia($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setNewrenewal($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setInsuredname($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setInsuredaddress1($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setInsuredcity($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setInsuredstate($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setInsuredcountry($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setInsuredzipcode($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAdvisenid($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setInsuredcontactperson($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setInsuredcontactpersonemail($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setInsuredcontactpersonphonenumber($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setInsuredcontactpersonmobilenumber($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setAlternativeaddress1($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setAlternativecity($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setAlternativestate($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setAlternativecountry($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setAlternativezipcode($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setUnderwritername($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setPropertytype($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setPropertylinesubtype($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setSectioncode($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setProfitcode($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setCurrentstatus($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setProcessdate($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setGrosspremium($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setStatuslimit($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setAttachmentpoint($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setGrosspremiuminusd($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setLimitinusd($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setAttachmentpointinusd($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setExchangerate($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setExchangedate($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setCurrency($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setReasoncode($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setReasoncodemeaning($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setCabcompanies($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setProjectname($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setProjectcontractorname($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setProjectownername($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setProjectaddressline1($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setProjectcity($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setProjectstate($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setProjectcountry($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setBidsituation($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setBrokername($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setBrokertype($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setBrokercity($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setBrokerstate($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setBrokercontactpersonstreetaddress($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setBrokercontactpersonzipcode($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setBrokercountry($arr[$keys[67]]);
		if (array_key_exists($keys[68], $arr)) $this->setBranchoffice($arr[$keys[68]]);
		if (array_key_exists($keys[69], $arr)) $this->setRiskprofile($arr[$keys[69]]);
		if (array_key_exists($keys[70], $arr)) $this->setInsuredsubmissiondate($arr[$keys[70]]);
		if (array_key_exists($keys[71], $arr)) $this->setInsuredquoteduedate($arr[$keys[71]]);
		if (array_key_exists($keys[72], $arr)) $this->setBinddate($arr[$keys[72]]);
		if (array_key_exists($keys[73], $arr)) $this->setRenewable($arr[$keys[73]]);
		if (array_key_exists($keys[74], $arr)) $this->setDateofrenewal($arr[$keys[74]]);
		if (array_key_exists($keys[75], $arr)) $this->setPolicytype($arr[$keys[75]]);
		if (array_key_exists($keys[76], $arr)) $this->setDirectassumed($arr[$keys[76]]);
		if (array_key_exists($keys[77], $arr)) $this->setCompanypaper($arr[$keys[77]]);
		if (array_key_exists($keys[78], $arr)) $this->setCompanypapernumber($arr[$keys[78]]);
		if (array_key_exists($keys[79], $arr)) $this->setCoverage($arr[$keys[79]]);
		if (array_key_exists($keys[80], $arr)) $this->setPolicynumber($arr[$keys[80]]);
		if (array_key_exists($keys[81], $arr)) $this->setSuffix($arr[$keys[81]]);
		if (array_key_exists($keys[82], $arr)) $this->setTransactionnumber($arr[$keys[82]]);
		if (array_key_exists($keys[83], $arr)) $this->setAdmittednonadmitted($arr[$keys[83]]);
		if (array_key_exists($keys[84], $arr)) $this->setLayeroflimitinlocalcurrency($arr[$keys[84]]);
		if (array_key_exists($keys[85], $arr)) $this->setLayeroflimitinusd($arr[$keys[85]]);
		if (array_key_exists($keys[86], $arr)) $this->setPercentageoflayer($arr[$keys[86]]);
		if (array_key_exists($keys[87], $arr)) $this->setSelfinsuredretentioninlocalcurrency($arr[$keys[87]]);
		if (array_key_exists($keys[88], $arr)) $this->setSelfinsuredretentioninusd($arr[$keys[88]]);
		if (array_key_exists($keys[89], $arr)) $this->setPolicycommpercentage($arr[$keys[89]]);
		if (array_key_exists($keys[90], $arr)) $this->setPolicycomminlocalcurrency($arr[$keys[90]]);
		if (array_key_exists($keys[91], $arr)) $this->setPolicycomminusd($arr[$keys[91]]);
		if (array_key_exists($keys[92], $arr)) $this->setPermiumnetofcomminlocalcurrency($arr[$keys[92]]);
		if (array_key_exists($keys[93], $arr)) $this->setPermiumnetofcomminusd($arr[$keys[93]]);
		if (array_key_exists($keys[94], $arr)) $this->setNaiccode($arr[$keys[94]]);
		if (array_key_exists($keys[95], $arr)) $this->setNaictitle($arr[$keys[95]]);
		if (array_key_exists($keys[96], $arr)) $this->setSiccode($arr[$keys[96]]);
		if (array_key_exists($keys[97], $arr)) $this->setSictitle($arr[$keys[97]]);
		if (array_key_exists($keys[98], $arr)) $this->setMasterpolicynumber($arr[$keys[98]]);
		if (array_key_exists($keys[99], $arr)) $this->setOfrcreport($arr[$keys[99]]);
		if (array_key_exists($keys[100], $arr)) $this->setRetailbrokername($arr[$keys[100]]);
		if (array_key_exists($keys[101], $arr)) $this->setRetailbrokercountry($arr[$keys[101]]);
		if (array_key_exists($keys[102], $arr)) $this->setRetailbrokerstate($arr[$keys[102]]);
		if (array_key_exists($keys[103], $arr)) $this->setRetailbrokercity($arr[$keys[103]]);
		if (array_key_exists($keys[104], $arr)) $this->setCreateddate($arr[$keys[104]]);
		if (array_key_exists($keys[105], $arr)) $this->setModifieddate($arr[$keys[105]]);
		if (array_key_exists($keys[106], $arr)) $this->setId($arr[$keys[106]]);
                if (array_key_exists($keys[107], $arr)) $this->setAmendmentCount($arr[$keys[107]]);
                if (array_key_exists($keys[108], $arr)) $this->setAmendmentCountCalcelation($arr[$keys[108]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SubmissionSearchPeer::DATABASE_NAME);

		if ($this->isColumnModified(SubmissionSearchPeer::SUBMISSIONID)) $criteria->add(SubmissionSearchPeer::SUBMISSIONID, $this->submissionid);
		if ($this->isColumnModified(SubmissionSearchPeer::QCSTATUS)) $criteria->add(SubmissionSearchPeer::QCSTATUS, $this->qcstatus);
		if ($this->isColumnModified(SubmissionSearchPeer::SUBMISSIONNUMBER)) $criteria->add(SubmissionSearchPeer::SUBMISSIONNUMBER, $this->submissionnumber);
		if ($this->isColumnModified(SubmissionSearchPeer::DBNUMBER)) $criteria->add(SubmissionSearchPeer::DBNUMBER, $this->dbnumber);
		if ($this->isColumnModified(SubmissionSearchPeer::REINSUREDCOMPANY)) $criteria->add(SubmissionSearchPeer::REINSUREDCOMPANY, $this->reinsuredcompany);
		if ($this->isColumnModified(SubmissionSearchPeer::DBANAME)) $criteria->add(SubmissionSearchPeer::DBANAME, $this->dbaname);
		if ($this->isColumnModified(SubmissionSearchPeer::EFFECTIVEDATE)) $criteria->add(SubmissionSearchPeer::EFFECTIVEDATE, $this->effectivedate);
		if ($this->isColumnModified(SubmissionSearchPeer::EXPIRYDATE)) $criteria->add(SubmissionSearchPeer::EXPIRYDATE, $this->expirydate);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCODE)) $criteria->add(SubmissionSearchPeer::BROKERCODE, $this->brokercode);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCONTACTPERSON)) $criteria->add(SubmissionSearchPeer::BROKERCONTACTPERSON, $this->brokercontactperson);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCONTACTPERSONEMAIL)) $criteria->add(SubmissionSearchPeer::BROKERCONTACTPERSONEMAIL, $this->brokercontactpersonemail);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCONTACTPERSONNUMBER)) $criteria->add(SubmissionSearchPeer::BROKERCONTACTPERSONNUMBER, $this->brokercontactpersonnumber);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCONTACTPERSONMOBILE)) $criteria->add(SubmissionSearchPeer::BROKERCONTACTPERSONMOBILE, $this->brokercontactpersonmobile);
		if ($this->isColumnModified(SubmissionSearchPeer::TOTALINSUREDVALUE)) $criteria->add(SubmissionSearchPeer::TOTALINSUREDVALUE, $this->totalinsuredvalue);
		if ($this->isColumnModified(SubmissionSearchPeer::TOTALINSUREDVALUEINUSD)) $criteria->add(SubmissionSearchPeer::TOTALINSUREDVALUEINUSD, $this->totalinsuredvalueinusd);
		if ($this->isColumnModified(SubmissionSearchPeer::DATEOFRECIEVINGBYBROKER)) $criteria->add(SubmissionSearchPeer::DATEOFRECIEVINGBYBROKER, $this->dateofrecievingbybroker);
		if ($this->isColumnModified(SubmissionSearchPeer::DATEOFRECIEVINGBYINDIA)) $criteria->add(SubmissionSearchPeer::DATEOFRECIEVINGBYINDIA, $this->dateofrecievingbyindia);
		if ($this->isColumnModified(SubmissionSearchPeer::NEWRENEWAL)) $criteria->add(SubmissionSearchPeer::NEWRENEWAL, $this->newrenewal);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDNAME)) $criteria->add(SubmissionSearchPeer::INSUREDNAME, $this->insuredname);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDADDRESS1)) $criteria->add(SubmissionSearchPeer::INSUREDADDRESS1, $this->insuredaddress1);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDCITY)) $criteria->add(SubmissionSearchPeer::INSUREDCITY, $this->insuredcity);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDSTATE)) $criteria->add(SubmissionSearchPeer::INSUREDSTATE, $this->insuredstate);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDCOUNTRY)) $criteria->add(SubmissionSearchPeer::INSUREDCOUNTRY, $this->insuredcountry);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDZIPCODE)) $criteria->add(SubmissionSearchPeer::INSUREDZIPCODE, $this->insuredzipcode);
		if ($this->isColumnModified(SubmissionSearchPeer::ADVISENID)) $criteria->add(SubmissionSearchPeer::ADVISENID, $this->advisenid);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDCONTACTPERSON)) $criteria->add(SubmissionSearchPeer::INSUREDCONTACTPERSON, $this->insuredcontactperson);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDCONTACTPERSONEMAIL)) $criteria->add(SubmissionSearchPeer::INSUREDCONTACTPERSONEMAIL, $this->insuredcontactpersonemail);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDCONTACTPERSONPHONENUMBER)) $criteria->add(SubmissionSearchPeer::INSUREDCONTACTPERSONPHONENUMBER, $this->insuredcontactpersonphonenumber);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDCONTACTPERSONMOBILENUMBER)) $criteria->add(SubmissionSearchPeer::INSUREDCONTACTPERSONMOBILENUMBER, $this->insuredcontactpersonmobilenumber);
		if ($this->isColumnModified(SubmissionSearchPeer::ALTERNATIVEADDRESS1)) $criteria->add(SubmissionSearchPeer::ALTERNATIVEADDRESS1, $this->alternativeaddress1);
		if ($this->isColumnModified(SubmissionSearchPeer::ALTERNATIVECITY)) $criteria->add(SubmissionSearchPeer::ALTERNATIVECITY, $this->alternativecity);
		if ($this->isColumnModified(SubmissionSearchPeer::ALTERNATIVESTATE)) $criteria->add(SubmissionSearchPeer::ALTERNATIVESTATE, $this->alternativestate);
		if ($this->isColumnModified(SubmissionSearchPeer::ALTERNATIVECOUNTRY)) $criteria->add(SubmissionSearchPeer::ALTERNATIVECOUNTRY, $this->alternativecountry);
		if ($this->isColumnModified(SubmissionSearchPeer::ALTERNATIVEZIPCODE)) $criteria->add(SubmissionSearchPeer::ALTERNATIVEZIPCODE, $this->alternativezipcode);
		if ($this->isColumnModified(SubmissionSearchPeer::UNDERWRITERNAME)) $criteria->add(SubmissionSearchPeer::UNDERWRITERNAME, $this->underwritername);
		if ($this->isColumnModified(SubmissionSearchPeer::PROPERTYTYPE)) $criteria->add(SubmissionSearchPeer::PROPERTYTYPE, $this->propertytype);
		if ($this->isColumnModified(SubmissionSearchPeer::PROPERTYLINESUBTYPE)) $criteria->add(SubmissionSearchPeer::PROPERTYLINESUBTYPE, $this->propertylinesubtype);
		if ($this->isColumnModified(SubmissionSearchPeer::SECTIONCODE)) $criteria->add(SubmissionSearchPeer::SECTIONCODE, $this->sectioncode);
		if ($this->isColumnModified(SubmissionSearchPeer::PROFITCODE)) $criteria->add(SubmissionSearchPeer::PROFITCODE, $this->profitcode);
		if ($this->isColumnModified(SubmissionSearchPeer::CURRENTSTATUS)) $criteria->add(SubmissionSearchPeer::CURRENTSTATUS, $this->currentstatus);
		if ($this->isColumnModified(SubmissionSearchPeer::PROCESSDATE)) $criteria->add(SubmissionSearchPeer::PROCESSDATE, $this->processdate);
		if ($this->isColumnModified(SubmissionSearchPeer::GROSSPREMIUM)) $criteria->add(SubmissionSearchPeer::GROSSPREMIUM, $this->grosspremium);
		if ($this->isColumnModified(SubmissionSearchPeer::STATUSLIMIT)) $criteria->add(SubmissionSearchPeer::STATUSLIMIT, $this->statuslimit);
		if ($this->isColumnModified(SubmissionSearchPeer::ATTACHMENTPOINT)) $criteria->add(SubmissionSearchPeer::ATTACHMENTPOINT, $this->attachmentpoint);
		if ($this->isColumnModified(SubmissionSearchPeer::GROSSPREMIUMINUSD)) $criteria->add(SubmissionSearchPeer::GROSSPREMIUMINUSD, $this->grosspremiuminusd);
		if ($this->isColumnModified(SubmissionSearchPeer::LIMITINUSD)) $criteria->add(SubmissionSearchPeer::LIMITINUSD, $this->limitinusd);
		if ($this->isColumnModified(SubmissionSearchPeer::ATTACHMENTPOINTINUSD)) $criteria->add(SubmissionSearchPeer::ATTACHMENTPOINTINUSD, $this->attachmentpointinusd);
		if ($this->isColumnModified(SubmissionSearchPeer::EXCHANGERATE)) $criteria->add(SubmissionSearchPeer::EXCHANGERATE, $this->exchangerate);
		if ($this->isColumnModified(SubmissionSearchPeer::EXCHANGEDATE)) $criteria->add(SubmissionSearchPeer::EXCHANGEDATE, $this->exchangedate);
		if ($this->isColumnModified(SubmissionSearchPeer::CURRENCY)) $criteria->add(SubmissionSearchPeer::CURRENCY, $this->currency);
		if ($this->isColumnModified(SubmissionSearchPeer::REASONCODE)) $criteria->add(SubmissionSearchPeer::REASONCODE, $this->reasoncode);
		if ($this->isColumnModified(SubmissionSearchPeer::REASONCODEMEANING)) $criteria->add(SubmissionSearchPeer::REASONCODEMEANING, $this->reasoncodemeaning);
		if ($this->isColumnModified(SubmissionSearchPeer::CABCOMPANIES)) $criteria->add(SubmissionSearchPeer::CABCOMPANIES, $this->cabcompanies);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTNAME)) $criteria->add(SubmissionSearchPeer::PROJECTNAME, $this->projectname);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTCONTRACTORNAME)) $criteria->add(SubmissionSearchPeer::PROJECTCONTRACTORNAME, $this->projectcontractorname);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTOWNERNAME)) $criteria->add(SubmissionSearchPeer::PROJECTOWNERNAME, $this->projectownername);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTADDRESSLINE1)) $criteria->add(SubmissionSearchPeer::PROJECTADDRESSLINE1, $this->projectaddressline1);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTCITY)) $criteria->add(SubmissionSearchPeer::PROJECTCITY, $this->projectcity);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTSTATE)) $criteria->add(SubmissionSearchPeer::PROJECTSTATE, $this->projectstate);
		if ($this->isColumnModified(SubmissionSearchPeer::PROJECTCOUNTRY)) $criteria->add(SubmissionSearchPeer::PROJECTCOUNTRY, $this->projectcountry);
		if ($this->isColumnModified(SubmissionSearchPeer::BIDSITUATION)) $criteria->add(SubmissionSearchPeer::BIDSITUATION, $this->bidsituation);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERNAME)) $criteria->add(SubmissionSearchPeer::BROKERNAME, $this->brokername);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERTYPE)) $criteria->add(SubmissionSearchPeer::BROKERTYPE, $this->brokertype);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCITY)) $criteria->add(SubmissionSearchPeer::BROKERCITY, $this->brokercity);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERSTATE)) $criteria->add(SubmissionSearchPeer::BROKERSTATE, $this->brokerstate);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCONTACTPERSONSTREETADDRESS)) $criteria->add(SubmissionSearchPeer::BROKERCONTACTPERSONSTREETADDRESS, $this->brokercontactpersonstreetaddress);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCONTACTPERSONZIPCODE)) $criteria->add(SubmissionSearchPeer::BROKERCONTACTPERSONZIPCODE, $this->brokercontactpersonzipcode);
		if ($this->isColumnModified(SubmissionSearchPeer::BROKERCOUNTRY)) $criteria->add(SubmissionSearchPeer::BROKERCOUNTRY, $this->brokercountry);
		if ($this->isColumnModified(SubmissionSearchPeer::BRANCHOFFICE)) $criteria->add(SubmissionSearchPeer::BRANCHOFFICE, $this->branchoffice);
		if ($this->isColumnModified(SubmissionSearchPeer::RISKPROFILE)) $criteria->add(SubmissionSearchPeer::RISKPROFILE, $this->riskprofile);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDSUBMISSIONDATE)) $criteria->add(SubmissionSearchPeer::INSUREDSUBMISSIONDATE, $this->insuredsubmissiondate);
		if ($this->isColumnModified(SubmissionSearchPeer::INSUREDQUOTEDUEDATE)) $criteria->add(SubmissionSearchPeer::INSUREDQUOTEDUEDATE, $this->insuredquoteduedate);
		if ($this->isColumnModified(SubmissionSearchPeer::BINDDATE)) $criteria->add(SubmissionSearchPeer::BINDDATE, $this->binddate);
		if ($this->isColumnModified(SubmissionSearchPeer::RENEWABLE)) $criteria->add(SubmissionSearchPeer::RENEWABLE, $this->renewable);
		if ($this->isColumnModified(SubmissionSearchPeer::DATEOFRENEWAL)) $criteria->add(SubmissionSearchPeer::DATEOFRENEWAL, $this->dateofrenewal);
		if ($this->isColumnModified(SubmissionSearchPeer::POLICYTYPE)) $criteria->add(SubmissionSearchPeer::POLICYTYPE, $this->policytype);
		if ($this->isColumnModified(SubmissionSearchPeer::DIRECTASSUMED)) $criteria->add(SubmissionSearchPeer::DIRECTASSUMED, $this->directassumed);
		if ($this->isColumnModified(SubmissionSearchPeer::COMPANYPAPER)) $criteria->add(SubmissionSearchPeer::COMPANYPAPER, $this->companypaper);
		if ($this->isColumnModified(SubmissionSearchPeer::COMPANYPAPERNUMBER)) $criteria->add(SubmissionSearchPeer::COMPANYPAPERNUMBER, $this->companypapernumber);
		if ($this->isColumnModified(SubmissionSearchPeer::COVERAGE)) $criteria->add(SubmissionSearchPeer::COVERAGE, $this->coverage);
		if ($this->isColumnModified(SubmissionSearchPeer::POLICYNUMBER)) $criteria->add(SubmissionSearchPeer::POLICYNUMBER, $this->policynumber);
		if ($this->isColumnModified(SubmissionSearchPeer::SUFFIX)) $criteria->add(SubmissionSearchPeer::SUFFIX, $this->suffix);
		if ($this->isColumnModified(SubmissionSearchPeer::TRANSACTIONNUMBER)) $criteria->add(SubmissionSearchPeer::TRANSACTIONNUMBER, $this->transactionnumber);
		if ($this->isColumnModified(SubmissionSearchPeer::ADMITTEDNONADMITTED)) $criteria->add(SubmissionSearchPeer::ADMITTEDNONADMITTED, $this->admittednonadmitted);
		if ($this->isColumnModified(SubmissionSearchPeer::LAYEROFLIMITINLOCALCURRENCY)) $criteria->add(SubmissionSearchPeer::LAYEROFLIMITINLOCALCURRENCY, $this->layeroflimitinlocalcurrency);
		if ($this->isColumnModified(SubmissionSearchPeer::LAYEROFLIMITINUSD)) $criteria->add(SubmissionSearchPeer::LAYEROFLIMITINUSD, $this->layeroflimitinusd);
		if ($this->isColumnModified(SubmissionSearchPeer::PERCENTAGEOFLAYER)) $criteria->add(SubmissionSearchPeer::PERCENTAGEOFLAYER, $this->percentageoflayer);
		if ($this->isColumnModified(SubmissionSearchPeer::SELFINSUREDRETENTIONINLOCALCURRENCY)) $criteria->add(SubmissionSearchPeer::SELFINSUREDRETENTIONINLOCALCURRENCY, $this->selfinsuredretentioninlocalcurrency);
		if ($this->isColumnModified(SubmissionSearchPeer::SELFINSUREDRETENTIONINUSD)) $criteria->add(SubmissionSearchPeer::SELFINSUREDRETENTIONINUSD, $this->selfinsuredretentioninusd);
		if ($this->isColumnModified(SubmissionSearchPeer::POLICYCOMMPERCENTAGE)) $criteria->add(SubmissionSearchPeer::POLICYCOMMPERCENTAGE, $this->policycommpercentage);
		if ($this->isColumnModified(SubmissionSearchPeer::POLICYCOMMINLOCALCURRENCY)) $criteria->add(SubmissionSearchPeer::POLICYCOMMINLOCALCURRENCY, $this->policycomminlocalcurrency);
		if ($this->isColumnModified(SubmissionSearchPeer::POLICYCOMMINUSD)) $criteria->add(SubmissionSearchPeer::POLICYCOMMINUSD, $this->policycomminusd);
		if ($this->isColumnModified(SubmissionSearchPeer::PERMIUMNETOFCOMMINLOCALCURRENCY)) $criteria->add(SubmissionSearchPeer::PERMIUMNETOFCOMMINLOCALCURRENCY, $this->permiumnetofcomminlocalcurrency);
		if ($this->isColumnModified(SubmissionSearchPeer::PERMIUMNETOFCOMMINUSD)) $criteria->add(SubmissionSearchPeer::PERMIUMNETOFCOMMINUSD, $this->permiumnetofcomminusd);
		if ($this->isColumnModified(SubmissionSearchPeer::NAICCODE)) $criteria->add(SubmissionSearchPeer::NAICCODE, $this->naiccode);
		if ($this->isColumnModified(SubmissionSearchPeer::NAICTITLE)) $criteria->add(SubmissionSearchPeer::NAICTITLE, $this->naictitle);
		if ($this->isColumnModified(SubmissionSearchPeer::SICCODE)) $criteria->add(SubmissionSearchPeer::SICCODE, $this->siccode);
		if ($this->isColumnModified(SubmissionSearchPeer::SICTITLE)) $criteria->add(SubmissionSearchPeer::SICTITLE, $this->sictitle);
		if ($this->isColumnModified(SubmissionSearchPeer::MASTERPOLICYNUMBER)) $criteria->add(SubmissionSearchPeer::MASTERPOLICYNUMBER, $this->masterpolicynumber);
		if ($this->isColumnModified(SubmissionSearchPeer::OFRCREPORT)) $criteria->add(SubmissionSearchPeer::OFRCREPORT, $this->ofrcreport);
		if ($this->isColumnModified(SubmissionSearchPeer::RETAILBROKERNAME)) $criteria->add(SubmissionSearchPeer::RETAILBROKERNAME, $this->retailbrokername);
		if ($this->isColumnModified(SubmissionSearchPeer::RETAILBROKERCOUNTRY)) $criteria->add(SubmissionSearchPeer::RETAILBROKERCOUNTRY, $this->retailbrokercountry);
		if ($this->isColumnModified(SubmissionSearchPeer::RETAILBROKERSTATE)) $criteria->add(SubmissionSearchPeer::RETAILBROKERSTATE, $this->retailbrokerstate);
		if ($this->isColumnModified(SubmissionSearchPeer::RETAILBROKERCITY)) $criteria->add(SubmissionSearchPeer::RETAILBROKERCITY, $this->retailbrokercity);
		if ($this->isColumnModified(SubmissionSearchPeer::CREATEDDATE)) $criteria->add(SubmissionSearchPeer::CREATEDDATE, $this->createddate);
		if ($this->isColumnModified(SubmissionSearchPeer::MODIFIEDDATE)) $criteria->add(SubmissionSearchPeer::MODIFIEDDATE, $this->modifieddate);
		if ($this->isColumnModified(SubmissionSearchPeer::ID)) $criteria->add(SubmissionSearchPeer::ID, $this->id);
                if ($this->isColumnModified(SubmissionSearchPeer::AMENDMENTCOUNT)) $criteria->add(SubmissionSearchPeer::AMENDMENTCOUNT, $this->amendmentcount);
                if ($this->isColumnModified(SubmissionSearchPeer::AMENDMENTCANCELATIONCOUNT)) $criteria->add(SubmissionSearchPeer::AMENDMENTCANCELATIONCOUNT, $this->amendmentcancelationcount);
		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SubmissionSearchPeer::DATABASE_NAME);

		$criteria->add(SubmissionSearchPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SubmissionSearch (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSubmissionid($this->submissionid);

		$copyObj->setQcstatus($this->qcstatus);

		$copyObj->setSubmissionnumber($this->submissionnumber);

		$copyObj->setDbnumber($this->dbnumber);

		$copyObj->setReinsuredcompany($this->reinsuredcompany);

		$copyObj->setDbaname($this->dbaname);

		$copyObj->setEffectivedate($this->effectivedate);

		$copyObj->setExpirydate($this->expirydate);

		$copyObj->setBrokercode($this->brokercode);

		$copyObj->setBrokercontactperson($this->brokercontactperson);

		$copyObj->setBrokercontactpersonemail($this->brokercontactpersonemail);

		$copyObj->setBrokercontactpersonnumber($this->brokercontactpersonnumber);

		$copyObj->setBrokercontactpersonmobile($this->brokercontactpersonmobile);

		$copyObj->setTotalinsuredvalue($this->totalinsuredvalue);

		$copyObj->setTotalinsuredvalueinusd($this->totalinsuredvalueinusd);

		$copyObj->setDateofrecievingbybroker($this->dateofrecievingbybroker);

		$copyObj->setDateofrecievingbyindia($this->dateofrecievingbyindia);

		$copyObj->setNewrenewal($this->newrenewal);

		$copyObj->setInsuredname($this->insuredname);

		$copyObj->setInsuredaddress1($this->insuredaddress1);

		$copyObj->setInsuredcity($this->insuredcity);

		$copyObj->setInsuredstate($this->insuredstate);

		$copyObj->setInsuredcountry($this->insuredcountry);

		$copyObj->setInsuredzipcode($this->insuredzipcode);

		$copyObj->setAdvisenid($this->advisenid);

		$copyObj->setInsuredcontactperson($this->insuredcontactperson);

		$copyObj->setInsuredcontactpersonemail($this->insuredcontactpersonemail);

		$copyObj->setInsuredcontactpersonphonenumber($this->insuredcontactpersonphonenumber);

		$copyObj->setInsuredcontactpersonmobilenumber($this->insuredcontactpersonmobilenumber);

		$copyObj->setAlternativeaddress1($this->alternativeaddress1);

		$copyObj->setAlternativecity($this->alternativecity);

		$copyObj->setAlternativestate($this->alternativestate);

		$copyObj->setAlternativecountry($this->alternativecountry);

		$copyObj->setAlternativezipcode($this->alternativezipcode);

		$copyObj->setUnderwritername($this->underwritername);

		$copyObj->setPropertytype($this->propertytype);

		$copyObj->setPropertylinesubtype($this->propertylinesubtype);

		$copyObj->setSectioncode($this->sectioncode);

		$copyObj->setProfitcode($this->profitcode);

		$copyObj->setCurrentstatus($this->currentstatus);

		$copyObj->setProcessdate($this->processdate);

		$copyObj->setGrosspremium($this->grosspremium);

		$copyObj->setStatuslimit($this->statuslimit);

		$copyObj->setAttachmentpoint($this->attachmentpoint);

		$copyObj->setGrosspremiuminusd($this->grosspremiuminusd);

		$copyObj->setLimitinusd($this->limitinusd);

		$copyObj->setAttachmentpointinusd($this->attachmentpointinusd);

		$copyObj->setExchangerate($this->exchangerate);

		$copyObj->setExchangedate($this->exchangedate);

		$copyObj->setCurrency($this->currency);

		$copyObj->setReasoncode($this->reasoncode);

		$copyObj->setReasoncodemeaning($this->reasoncodemeaning);

		$copyObj->setCabcompanies($this->cabcompanies);

		$copyObj->setProjectname($this->projectname);

		$copyObj->setProjectcontractorname($this->projectcontractorname);

		$copyObj->setProjectownername($this->projectownername);

		$copyObj->setProjectaddressline1($this->projectaddressline1);

		$copyObj->setProjectcity($this->projectcity);

		$copyObj->setProjectstate($this->projectstate);

		$copyObj->setProjectcountry($this->projectcountry);

		$copyObj->setBidsituation($this->bidsituation);

		$copyObj->setBrokername($this->brokername);

		$copyObj->setBrokertype($this->brokertype);

		$copyObj->setBrokercity($this->brokercity);

		$copyObj->setBrokerstate($this->brokerstate);

		$copyObj->setBrokercontactpersonstreetaddress($this->brokercontactpersonstreetaddress);

		$copyObj->setBrokercontactpersonzipcode($this->brokercontactpersonzipcode);

		$copyObj->setBrokercountry($this->brokercountry);

		$copyObj->setBranchoffice($this->branchoffice);

		$copyObj->setRiskprofile($this->riskprofile);

		$copyObj->setInsuredsubmissiondate($this->insuredsubmissiondate);

		$copyObj->setInsuredquoteduedate($this->insuredquoteduedate);

		$copyObj->setBinddate($this->binddate);

		$copyObj->setRenewable($this->renewable);

		$copyObj->setDateofrenewal($this->dateofrenewal);

		$copyObj->setPolicytype($this->policytype);

		$copyObj->setDirectassumed($this->directassumed);

		$copyObj->setCompanypaper($this->companypaper);

		$copyObj->setCompanypapernumber($this->companypapernumber);

		$copyObj->setCoverage($this->coverage);

		$copyObj->setPolicynumber($this->policynumber);

		$copyObj->setSuffix($this->suffix);

		$copyObj->setTransactionnumber($this->transactionnumber);

		$copyObj->setAdmittednonadmitted($this->admittednonadmitted);

		$copyObj->setLayeroflimitinlocalcurrency($this->layeroflimitinlocalcurrency);

		$copyObj->setLayeroflimitinusd($this->layeroflimitinusd);

		$copyObj->setPercentageoflayer($this->percentageoflayer);

		$copyObj->setSelfinsuredretentioninlocalcurrency($this->selfinsuredretentioninlocalcurrency);

		$copyObj->setSelfinsuredretentioninusd($this->selfinsuredretentioninusd);

		$copyObj->setPolicycommpercentage($this->policycommpercentage);

		$copyObj->setPolicycomminlocalcurrency($this->policycomminlocalcurrency);

		$copyObj->setPolicycomminusd($this->policycomminusd);

		$copyObj->setPermiumnetofcomminlocalcurrency($this->permiumnetofcomminlocalcurrency);

		$copyObj->setPermiumnetofcomminusd($this->permiumnetofcomminusd);

		$copyObj->setNaiccode($this->naiccode);

		$copyObj->setNaictitle($this->naictitle);

		$copyObj->setSiccode($this->siccode);

		$copyObj->setSictitle($this->sictitle);

		$copyObj->setMasterpolicynumber($this->masterpolicynumber);

		$copyObj->setOfrcreport($this->ofrcreport);

		$copyObj->setRetailbrokername($this->retailbrokername);

		$copyObj->setRetailbrokercountry($this->retailbrokercountry);

		$copyObj->setRetailbrokerstate($this->retailbrokerstate);

		$copyObj->setRetailbrokercity($this->retailbrokercity);

		$copyObj->setCreateddate($this->createddate);

		$copyObj->setModifieddate($this->modifieddate);

                $copyObj->setAmendmentcount($this->amendmentcount);
                
                $copyObj->setAmendmentCountCalcelation($this->amendmentcancelationcount);
                
		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SubmissionSearch Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SubmissionSearchPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SubmissionSearchPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSubmissionSearch:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSubmissionSearch::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSubmissionSearch
