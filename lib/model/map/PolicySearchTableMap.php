<?php


/**
 * This class defines the structure of the 'Policy_Search' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Jan  9 16:07:13 2015
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PolicySearchTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PolicySearchTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('Policy_Search');
		$this->setPhpName('PolicySearch');
		$this->setClassname('PolicySearch');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addColumn('POLICYID', 'Policyid', 'INTEGER', true, 11, null);
		$this->addColumn('MASTERPOLICYNUMBER', 'Masterpolicynumber', 'VARCHAR', false, 250, null);
		$this->addColumn('INSUREDNAME', 'Insuredname', 'VARCHAR', false, 250, null);
		$this->addColumn('PRODUCTLINE', 'Productline', 'VARCHAR', false, 50, null);
                $this->addColumn('PRODUCTLINESUBTYPE', 'Productlinesubtype', 'VARCHAR', false, 100, null);
		$this->addColumn('UNDERWRITERNAME', 'Underwritername', 'VARCHAR', false, 250, null);
		$this->addColumn('REGIONNAME', 'Regionname', 'VARCHAR', false, 50, null);
		$this->addColumn('BRANCHNAME', 'Branchname', 'VARCHAR', false, 50, null);
		$this->addColumn('REINSUREDCOMPANY', 'Reinsuredcompany', 'VARCHAR', false, 250, null);
		$this->addColumn('REMARKS', 'Remarks', 'VARCHAR', false, 250, null);
		$this->addColumn('DIRECTASSUMED', 'Directassumed', 'VARCHAR', false, 50, null);
		$this->addColumn('ADMITTEDNOTADMITTED', 'Admittednotadmitted', 'VARCHAR', false, 50, null);
		$this->addColumn('ADMITTEDDETAILS', 'Admitteddetails', 'VARCHAR', false, 50, null);
		$this->addColumn('COMPANY', 'Company', 'VARCHAR', false, 50, null);
		$this->addColumn('COMPANYNUMBER', 'Companynumber', 'VARCHAR', false, 50, null);
		$this->addColumn('PREFIX', 'Prefix', 'VARCHAR', false, 50, null);
		$this->addColumn('SUFFIX', 'Suffix', 'VARCHAR', false, 10, null);
		$this->addColumn('NEWRENEWAL', 'Newrenewal', 'VARCHAR', false, 50, null);
		$this->addColumn('POLICYEFFECTIVEDATE', 'Policyeffectivedate', 'TIMESTAMP', false, null, null);
		$this->addColumn('POLICYEXPIRYDATE', 'Policyexpirydate', 'TIMESTAMP', false, null, null);
		$this->addColumn('POLICYCURRENCY', 'Policycurrency', 'VARCHAR', false, 50, null);
		$this->addColumn('INCEPTIONGROSSPREMIUM', 'Inceptiongrosspremium', 'VARCHAR', false, 50, null);
		$this->addColumn('COMMISSSIONPERCENTAGE', 'Commisssionpercentage', 'VARCHAR', false, 50, null);
		$this->addColumn('COMMISSSIONDOLLER', 'Commisssiondoller', 'VARCHAR', false, 50, null);
		$this->addColumn('NETPREMIUM', 'Netpremium', 'VARCHAR', false, 50, null);
		$this->addColumn('CREATEDBY', 'Createdby', 'VARCHAR', false, null, null);
		$this->addColumn('CREATEDDATE', 'Createddate', 'TIMESTAMP', false, null, null);
		$this->addColumn('MODIFIEDBY', 'Modifiedby', 'VARCHAR', false, null, null);
		$this->addColumn('MODIFIEDDATE', 'Modifieddate', 'TIMESTAMP', false, null, null);
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // PolicySearchTableMap
