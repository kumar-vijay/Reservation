<?php


/**
 * This class defines the structure of the 'Submission_Search' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Nov  2 23:34:52 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class SubmissionSearchTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.SubmissionSearchTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('Submission_Search');
		$this->setPhpName('SubmissionSearch');
		$this->setClassname('SubmissionSearch');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addColumn('SUBMISSIONID', 'Submissionid', 'INTEGER', true, 11, null);
		$this->addColumn('QCSTATUS', 'Qcstatus', 'VARCHAR', false, 255, null);
		$this->addColumn('SUBMISSIONNUMBER', 'Submissionnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('DBNUMBER', 'Dbnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('REINSUREDCOMPANY', 'Reinsuredcompany', 'CLOB', false, null, null);
		$this->addColumn('DBANAME', 'Dbaname', 'VARCHAR', false, 500, null);
		$this->addColumn('EFFECTIVEDATE', 'Effectivedate', 'TIMESTAMP', false, null, null);
		$this->addColumn('EXPIRYDATE', 'Expirydate', 'TIMESTAMP', true, null, null);
		$this->addColumn('BROKERCODE', 'Brokercode', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERCONTACTPERSON', 'Brokercontactperson', 'VARCHAR', false, null, null);
		$this->addColumn('BROKERCONTACTPERSONEMAIL', 'Brokercontactpersonemail', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERCONTACTPERSONNUMBER', 'Brokercontactpersonnumber', 'INTEGER', false, 11, null);
		$this->addColumn('BROKERCONTACTPERSONMOBILE', 'Brokercontactpersonmobile', 'INTEGER', false, 11, null);
		$this->addColumn('TOTALINSUREDVALUE', 'Totalinsuredvalue', 'VARCHAR', false, 250, null);
		$this->addColumn('TOTALINSUREDVALUEINUSD', 'Totalinsuredvalueinusd', 'VARCHAR', false, 250, null);
		$this->addColumn('DATEOFRECIEVINGBYBROKER', 'Dateofrecievingbybroker', 'TIMESTAMP', false, null, null);
		$this->addColumn('DATEOFRECIEVINGBYINDIA', 'Dateofrecievingbyindia', 'TIMESTAMP', false, null, null);
		$this->addColumn('NEWRENEWAL', 'Newrenewal', 'VARCHAR', false, 255, null);
		$this->addColumn('INSUREDNAME', 'Insuredname', 'VARCHAR', false, 500, null);
		$this->addColumn('INSUREDADDRESS1', 'Insuredaddress1', 'VARCHAR', false, 500, null);
		$this->addColumn('INSUREDCITY', 'Insuredcity', 'VARCHAR', false, 500, null);
		$this->addColumn('INSUREDSTATE', 'Insuredstate', 'VARCHAR', false, 500, null);
		$this->addColumn('INSUREDCOUNTRY', 'Insuredcountry', 'VARCHAR', false, 500, null);
		$this->addColumn('INSUREDZIPCODE', 'Insuredzipcode', 'VARCHAR', false, 500, null);
		$this->addColumn('ADVISENID', 'Advisenid', 'INTEGER', false, 11, null);
		$this->addColumn('INSUREDCONTACTPERSON', 'Insuredcontactperson', 'VARCHAR', false, null, null);
		$this->addColumn('INSUREDCONTACTPERSONEMAIL', 'Insuredcontactpersonemail', 'VARCHAR', false, 50, null);
		$this->addColumn('INSUREDCONTACTPERSONPHONENUMBER', 'Insuredcontactpersonphonenumber', 'INTEGER', false, 11, null);
		$this->addColumn('INSUREDCONTACTPERSONMOBILENUMBER', 'Insuredcontactpersonmobilenumber', 'INTEGER', false, 11, null);
		$this->addColumn('ALTERNATIVEADDRESS1', 'Alternativeaddress1', 'VARCHAR', false, 255, null);
		$this->addColumn('ALTERNATIVECITY', 'Alternativecity', 'VARCHAR', false, 6, null);
		$this->addColumn('ALTERNATIVESTATE', 'Alternativestate', 'VARCHAR', false, 255, null);
		$this->addColumn('ALTERNATIVECOUNTRY', 'Alternativecountry', 'VARCHAR', false, 500, null);
		$this->addColumn('ALTERNATIVEZIPCODE', 'Alternativezipcode', 'VARCHAR', false, 100, null);
		$this->addColumn('UNDERWRITERNAME', 'Underwritername', 'CLOB', false, null, null);
		$this->addColumn('PROPERTYTYPE', 'Propertytype', 'VARCHAR', false, 255, null);
		$this->addColumn('PROPERTYLINESUBTYPE', 'Propertylinesubtype', 'VARCHAR', false, 255, null);
		$this->addColumn('SECTIONCODE', 'Sectioncode', 'VARCHAR', false, 250, null);
		$this->addColumn('PROFITCODE', 'Profitcode', 'VARCHAR', false, 255, null);
		$this->addColumn('CURRENTSTATUS', 'Currentstatus', 'VARCHAR', false, 50, null);
		$this->addColumn('PROCESSDATE', 'Processdate', 'TIMESTAMP', false, null, null);
		$this->addColumn('GROSSPREMIUM', 'Grosspremium', 'VARCHAR', false, 50, null);
		$this->addColumn('STATUSLIMIT', 'Statuslimit', 'VARCHAR', false, 50, null);
		$this->addColumn('ATTACHMENTPOINT', 'Attachmentpoint', 'VARCHAR', false, 50, null);
		$this->addColumn('GROSSPREMIUMINUSD', 'Grosspremiuminusd', 'VARCHAR', false, 50, null);
		$this->addColumn('LIMITINUSD', 'Limitinusd', 'VARCHAR', false, 50, null);
		$this->addColumn('ATTACHMENTPOINTINUSD', 'Attachmentpointinusd', 'VARCHAR', false, 50, null);
		$this->addColumn('EXCHANGERATE', 'Exchangerate', 'VARCHAR', false, 50, null);
		$this->addColumn('EXCHANGEDATE', 'Exchangedate', 'TIMESTAMP', false, null, null);
		$this->addColumn('CURRENCY', 'Currency', 'VARCHAR', false, 255, null);
		$this->addColumn('REASONCODE', 'Reasoncode', 'CLOB', false, null, null);
		$this->addColumn('REASONCODEMEANING', 'Reasoncodemeaning', 'VARCHAR', false, 500, null);
		$this->addColumn('CABCOMPANIES', 'Cabcompanies', 'VARCHAR', false, 255, null);
		$this->addColumn('PROJECTNAME', 'Projectname', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTCONTRACTORNAME', 'Projectcontractorname', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTOWNERNAME', 'Projectownername', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTADDRESSLINE1', 'Projectaddressline1', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTCITY', 'Projectcity', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTSTATE', 'Projectstate', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTCOUNTRY', 'Projectcountry', 'VARCHAR', false, 250, null);
		$this->addColumn('BIDSITUATION', 'Bidsituation', 'VARCHAR', false, 255, null);
		$this->addColumn('BROKERNAME', 'Brokername', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERTYPE', 'Brokertype', 'VARCHAR', false, 255, null);
		$this->addColumn('BROKERCITY', 'Brokercity', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERSTATE', 'Brokerstate', 'VARCHAR', false, 101, null);
		$this->addColumn('BROKERCONTACTPERSONSTREETADDRESS', 'Brokercontactpersonstreetaddress', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERCONTACTPERSONZIPCODE', 'Brokercontactpersonzipcode', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERCOUNTRY', 'Brokercountry', 'VARCHAR', false, 255, null);
		$this->addColumn('BRANCHOFFICE', 'Branchoffice', 'VARCHAR', false, 50, null);
		$this->addColumn('RISKPROFILE', 'Riskprofile', 'VARCHAR', false, 250, null);
		$this->addColumn('INSUREDSUBMISSIONDATE', 'Insuredsubmissiondate', 'TIMESTAMP', false, null, null);
		$this->addColumn('INSUREDQUOTEDUEDATE', 'Insuredquoteduedate', 'TIMESTAMP', false, null, null);
		$this->addColumn('BINDDATE', 'Binddate', 'TIMESTAMP', false, null, null);
		$this->addColumn('RENEWABLE', 'Renewable', 'VARCHAR', false, 255, null);
		$this->addColumn('DATEOFRENEWAL', 'Dateofrenewal', 'TIMESTAMP', false, null, null);
		$this->addColumn('POLICYTYPE', 'Policytype', 'VARCHAR', false, 255, null);
		$this->addColumn('DIRECTASSUMED', 'Directassumed', 'VARCHAR', false, 255, null);
		$this->addColumn('COMPANYPAPER', 'Companypaper', 'VARCHAR', false, 255, null);
		$this->addColumn('COMPANYPAPERNUMBER', 'Companypapernumber', 'VARCHAR', false, 255, null);
		$this->addColumn('COVERAGE', 'Coverage', 'VARCHAR', false, 250, null);
		$this->addColumn('POLICYNUMBER', 'Policynumber', 'INTEGER', false, 11, null);
		$this->addColumn('SUFFIX', 'Suffix', 'VARCHAR', false, 255, null);
		$this->addColumn('TRANSACTIONNUMBER', 'Transactionnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('ADMITTEDNONADMITTED', 'Admittednonadmitted', 'VARCHAR', false, 255, null);
		$this->addColumn('LAYEROFLIMITINLOCALCURRENCY', 'Layeroflimitinlocalcurrency', 'INTEGER', false, 11, null);
		$this->addColumn('LAYEROFLIMITINUSD', 'Layeroflimitinusd', 'INTEGER', false, 11, null);
		$this->addColumn('PERCENTAGEOFLAYER', 'Percentageoflayer', 'INTEGER', false, 11, null);
		$this->addColumn('SELFINSUREDRETENTIONINLOCALCURRENCY', 'Selfinsuredretentioninlocalcurrency', 'INTEGER', false, 11, null);
		$this->addColumn('SELFINSUREDRETENTIONINUSD', 'Selfinsuredretentioninusd', 'INTEGER', false, 11, null);
		$this->addColumn('POLICYCOMMPERCENTAGE', 'Policycommpercentage', 'INTEGER', false, 11, null);
		$this->addColumn('POLICYCOMMINLOCALCURRENCY', 'Policycomminlocalcurrency', 'INTEGER', false, 11, null);
		$this->addColumn('POLICYCOMMINUSD', 'Policycomminusd', 'INTEGER', false, 11, null);
		$this->addColumn('PERMIUMNETOFCOMMINLOCALCURRENCY', 'Permiumnetofcomminlocalcurrency', 'INTEGER', false, 11, null);
		$this->addColumn('PERMIUMNETOFCOMMINUSD', 'Permiumnetofcomminusd', 'INTEGER', false, 11, null);
		$this->addColumn('NAICCODE', 'Naiccode', 'INTEGER', false, 11, null);
		$this->addColumn('NAICTITLE', 'Naictitle', 'VARCHAR', false, 50, null);
		$this->addColumn('SICCODE', 'Siccode', 'INTEGER', false, 11, null);
		$this->addColumn('SICTITLE', 'Sictitle', 'VARCHAR', false, 50, null);
		$this->addColumn('MASTERPOLICYNUMBER', 'Masterpolicynumber', 'VARCHAR', false, 250, null);
		$this->addColumn('OFRCREPORT', 'Ofrcreport', 'VARCHAR', false, 255, null);
		$this->addColumn('RETAILBROKERNAME', 'Retailbrokername', 'VARCHAR', false, 50, null);
		$this->addColumn('RETAILBROKERCOUNTRY', 'Retailbrokercountry', 'VARCHAR', false, 255, null);
		$this->addColumn('RETAILBROKERSTATE', 'Retailbrokerstate', 'VARCHAR', false, 50, null);
		$this->addColumn('RETAILBROKERCITY', 'Retailbrokercity', 'VARCHAR', false, 50, null);
		$this->addColumn('CREATEDDATE', 'Createddate', 'TIMESTAMP', false, null, null);
		$this->addColumn('MODIFIEDDATE', 'Modifieddate', 'TIMESTAMP', false, null, null);
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
                $this->addColumn('AMENDMENTCOUNT', 'Amendmentcount', 'VARCHAR', false, 50, null);
                $this->addColumn('AMENDMENTCANCELATIONCOUNT', 'AmendmentCancelationCount', 'VARCHAR', false, 50, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // SubmissionSearchTableMap
