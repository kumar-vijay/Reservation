<?php


/**
 * This class defines the structure of the 'SUBMISSION_HISTORY' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Mar 19 17:19:31 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class SubmissionHistoryTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.SubmissionHistoryTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('SUBMISSION_HISTORY');
		$this->setPhpName('SubmissionHistory');
		$this->setClassname('SubmissionHistory');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('SUBMISSION_HISTORY_ID', 'SubmissionHistoryId', 'INTEGER', true, 11, null);
		$this->addColumn('SUBMISSION_ID', 'SubmissionId', 'INTEGER', true, 11, null);
		$this->addColumn('SUBMISSION_TYPE', 'SubmissionType', 'CHAR', true, null, null);
		$this->addColumn('SUBMISSION_BRANCH_ID', 'SubmissionBranchId', 'INTEGER', true, 11, null);
		$this->addColumn('DB_NUMBER', 'DbNumber', 'VARCHAR', true, 30, null);
		$this->addColumn('INSURED_NAME', 'InsuredName', 'VARCHAR', true, 100, null);
		$this->addColumn('USER_ID', 'UserId', 'INTEGER', true, 11, null);
		$this->addColumn('UNDERWRITER_ID', 'UnderwriterId', 'INTEGER', true, 11, null);
		$this->addColumn('PRODUCT_ID', 'ProductId', 'INTEGER', true, 11, null);
		$this->addColumn('PRIMARY_STATUS', 'PrimaryStatus', 'CHAR', true, null, null);
		$this->addColumn('REASON_CODE', 'ReasonCode', 'INTEGER', false, 11, null);
		$this->addColumn('NAIC_CODE', 'NaicCode', 'INTEGER', false, 6, null);
		$this->addColumn('SIC_CODE', 'SicCode', 'INTEGER', false, 6, null);
		$this->addColumn('NAIC_TITLE', 'NaicTitle', 'VARCHAR', false, 164, null);
		$this->addColumn('BIND_DATE', 'BindDate', 'DATE', true, null, null);
		$this->addColumn('LIMIT', 'Limit', 'INTEGER', true, 10, null);
		$this->addColumn('ATTACHMENT_POINT', 'AttachmentPoint', 'VARCHAR', true, 20, null);
		$this->addColumn('PREMIUM', 'Premium', 'INTEGER', true, 10, null);
		$this->addColumn('ENDORSEMENT_PREMIUM', 'EndorsementPremium', 'INTEGER', true, 11, null);
		$this->addColumn('NET_PREMIUM', 'NetPremium', 'INTEGER', true, 11, null);
		$this->addColumn('COMMISSION', 'Commission', 'INTEGER', true, 10, null);
		$this->addColumn('TOTAL_INSURED_VALUE', 'TotalInsuredValue', 'INTEGER', true, 10, null);
		$this->addColumn('RELATIVITY', 'Relativity', 'INTEGER', true, 10, null);
		$this->addColumn('BY_BERKSI_FROM_BROKER', 'ByBerksiFromBroker', 'TIMESTAMP', false, null, null);
		$this->addColumn('BY_INDIA_BY_BERKSI', 'ByIndiaByBerksi', 'DATE', false, null, null);
		$this->addColumn('REMARKS', 'Remarks', 'LONGVARCHAR', true, null, null);
		$this->addColumn('BROKER_CODE', 'BrokerCode', 'VARCHAR', true, 19, null);
		$this->addColumn('BROKER_TYPE', 'BrokerType', 'CHAR', true, null, 'R');
		$this->addColumn('BROKER_NAME', 'BrokerName', 'VARCHAR', true, 100, null);
		$this->addColumn('BROKER_CONTACT_PERSON', 'BrokerContactPerson', 'VARCHAR', false, 100, null);
		$this->addColumn('INSURED_NAME_DNB', 'InsuredNameDnb', 'VARCHAR', true, 100, null);
		$this->addColumn('IS_NAME_DIFFERENT', 'IsNameDifferent', 'CHAR', true, null, 'N');
		$this->addColumn('IS_ADDRESS_DIFFERENT', 'IsAddressDifferent', 'CHAR', true, null, 'N');
		$this->addColumn('EFFECTIVE_DATE', 'EffectiveDate', 'DATE', true, null, null);
		$this->addColumn('EXPIRATION_DATE', 'ExpirationDate', 'DATE', true, null, null);
		$this->addColumn('NEW_SUBMISSION_TYPE', 'NewSubmissionType', 'CHAR', true, null, null);
		$this->addColumn('NEW_SUBMISSION_BRANCH_ID', 'NewSubmissionBranchId', 'INTEGER', true, 11, null);
		$this->addColumn('NEW_DB_NUMBER', 'NewDbNumber', 'VARCHAR', true, 30, null);
		$this->addColumn('NEW_INSURED_NAME', 'NewInsuredName', 'VARCHAR', true, 100, null);
		$this->addColumn('NEW_USER_ID', 'NewUserId', 'INTEGER', true, 11, null);
		$this->addColumn('NEW_UNDERWRITER_ID', 'NewUnderwriterId', 'INTEGER', true, 11, null);
		$this->addColumn('NEW_PRODUCT_ID', 'NewProductId', 'INTEGER', true, 11, null);
		$this->addColumn('NEW_PRIMARY_STATUS', 'NewPrimaryStatus', 'CHAR', true, null, null);
		$this->addColumn('NEW_REASON_CODE', 'NewReasonCode', 'INTEGER', false, 11, null);
		$this->addColumn('NEW_NAIC_CODE', 'NewNaicCode', 'INTEGER', false, 6, null);
		$this->addColumn('NEW_SIC_CODE', 'NewSicCode', 'INTEGER', false, 6, null);
		$this->addColumn('NEW_NAIC_TITLE', 'NewNaicTitle', 'VARCHAR', false, 164, null);
		$this->addColumn('NEW_BIND_DATE', 'NewBindDate', 'DATE', false, null, null);
		$this->addColumn('NEW_LIMIT', 'NewLimit', 'INTEGER', true, 10, null);
		$this->addColumn('NEW_ATTACHMENT_POINT', 'NewAttachmentPoint', 'INTEGER', true, 10, null);
		$this->addColumn('NEW_PREMIUM', 'NewPremium', 'INTEGER', true, 10, null);
		$this->addColumn('NEW_ENDORSEMENT_PREMIUM', 'NewEndorsementPremium', 'INTEGER', true, 11, null);
		$this->addColumn('NEW_NET_PREMIUM', 'NewNetPremium', 'INTEGER', true, 11, null);
		$this->addColumn('NEW_COMMISSION', 'NewCommission', 'INTEGER', true, 10, null);
		$this->addColumn('NEW_TOTAL_INSURED_VALUE', 'NewTotalInsuredValue', 'INTEGER', true, 10, null);
		$this->addColumn('NEW_RELATIVITY', 'NewRelativity', 'INTEGER', true, 10, null);
		$this->addColumn('NEW_BY_BERKSI_FROM_BROKER', 'NewByBerksiFromBroker', 'TIMESTAMP', false, null, null);
		$this->addColumn('NEW_BY_INDIA_BY_BERKSI', 'NewByIndiaByBerksi', 'DATE', false, null, null);
		$this->addColumn('NEW_REMARKS', 'NewRemarks', 'LONGVARCHAR', true, null, null);
		$this->addColumn('NEW_BROKER_CODE', 'NewBrokerCode', 'VARCHAR', true, 19, null);
		$this->addColumn('NEW_BROKER_TYPE', 'NewBrokerType', 'CHAR', true, null, 'R');
		$this->addColumn('NEW_BROKER_NAME', 'NewBrokerName', 'VARCHAR', true, 100, null);
		$this->addColumn('NEW_BROKER_CONTACT_PERSON', 'NewBrokerContactPerson', 'VARCHAR', false, 100, null);
		$this->addColumn('NEW_INSURED_NAME_DNB', 'NewInsuredNameDnb', 'VARCHAR', true, 100, null);
		$this->addColumn('NEW_IS_NAME_DIFFERENT', 'NewIsNameDifferent', 'CHAR', true, null, 'N');
		$this->addColumn('NEW_IS_ADDRESS_DIFFERENT', 'NewIsAddressDifferent', 'CHAR', true, null, 'N');
		$this->addColumn('NEW_EFFECTIVE_DATE', 'NewEffectiveDate', 'DATE', true, null, null);
		$this->addColumn('NEW_EXPIRATION_DATE', 'NewExpirationDate', 'DATE', true, null, null);
		$this->addColumn('MODIFY_DATE', 'ModifyDate', 'TIMESTAMP', true, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // SubmissionHistoryTableMap
