<?php


/**
 * This class defines the structure of the 'Qc_Search' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Apr 15 23:55:48 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class QcSearchTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.QcSearchTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('Qc_Search');
		$this->setPhpName('QcSearch');
		$this->setClassname('QcSearch');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addColumn('SUBMISSIONID', 'Submissionid', 'INTEGER', true, 11, 0);
		$this->addColumn('QCSTATUS', 'Qcstatus', 'VARCHAR', false, 255, null);
		$this->addColumn('SUBMISSIONNUMBER', 'Submissionnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('DBNUMBER', 'Dbnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('REINSUREDCOMPANY', 'Reinsuredcompany', 'VARCHAR', false, 250, null);
		$this->addColumn('DBANAME', 'Dbaname', 'VARCHAR', false, 250, null);
		$this->addColumn('EFFECTIVEDATE', 'Effectivedate', 'TIMESTAMP', false, null, null);
		$this->addColumn('EXPIRYDATE', 'Expirydate', 'TIMESTAMP', false, null, null);
		$this->addColumn('BROKERCODE', 'Brokercode', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERCONTACTPERSON', 'Brokercontactperson', 'VARCHAR', false, 250, null);
		$this->addColumn('BROKERCONTACTPERSONEMAIL', 'Brokercontactpersonemail', 'VARCHAR', false, 250, null);
		$this->addColumn('BROKERCONTACTPERSONNUMBER', 'Brokercontactpersonnumber', 'VARCHAR', false, 250, null);
		$this->addColumn('TOTALINSUREDVALUE', 'Totalinsuredvalue', 'DECIMAL', false, 18, null);
		$this->addColumn('DATEOFRECIEVINGBYBROKER', 'Dateofrecievingbybroker', 'TIMESTAMP', false, null, null);
		$this->addColumn('DATEOFRECIEVINGBYINDIA', 'Dateofrecievingbyindia', 'TIMESTAMP', false, null, null);
		$this->addColumn('NEWRENEWAL', 'Newrenewal', 'VARCHAR', false, 255, null);
		$this->addColumn('INSUREDNAME', 'Insuredname', 'VARCHAR', false, 255, null);
		$this->addColumn('INSUREDADDRESS1', 'Insuredaddress1', 'VARCHAR', false, 255, null);
		$this->addColumn('INSUREDCITY', 'Insuredcity', 'VARCHAR', false, 50, null);
		$this->addColumn('INSUREDSTATE', 'Insuredstate', 'VARCHAR', false, 101, null);
		$this->addColumn('INSUREDCOUNTRY', 'Insuredcountry', 'VARCHAR', false, 255, null);
		$this->addColumn('INSUREDZIPCODE', 'Insuredzipcode', 'VARCHAR', false, 255, null);
		$this->addColumn('ALTERNATIVEADDRESS1', 'Alternativeaddress1', 'VARCHAR', false, 255, null);
		$this->addColumn('ALTERNATIVECITY', 'Alternativecity', 'VARCHAR', false, 50, null);
		$this->addColumn('ALTERNATIVESTATE', 'Alternativestate', 'VARCHAR', false, 101, null);
		$this->addColumn('ALTERNATIVECOUNTRY', 'Alternativecountry', 'VARCHAR', false, 255, null);
		$this->addColumn('ALTERNATIVEZIPCODE', 'Alternativezipcode', 'VARCHAR', false, 255, null);
		$this->addColumn('UNDERWRITERNAME', 'Underwritername', 'CLOB', false, null, null);
		$this->addColumn('PROPERTYTYPE', 'Propertytype', 'VARCHAR', false, 255, null);
		$this->addColumn('PROPERTYLINESUBTYPE', 'Propertylinesubtype', 'VARCHAR', false, 255, null);
		$this->addColumn('SECTIONCODE', 'Sectioncode', 'VARCHAR', false, 50, null);
		$this->addColumn('PROFITCODE', 'Profitcode', 'VARCHAR', false, 255, null);
		$this->addColumn('CURRENTSTATUS', 'Currentstatus', 'VARCHAR', false, 50, null);
		$this->addColumn('PROCESSDATE', 'Processdate', 'TIMESTAMP', false, null, null);
		$this->addColumn('GROSSPREMIUM', 'Grosspremium', 'DECIMAL', false, 18, null);
		$this->addColumn('STATUSLIMIT', 'Statuslimit', 'INTEGER', false, 11, null);
		$this->addColumn('ATTACHMENTPOINT', 'Attachmentpoint', 'INTEGER', false, 11, null);
		$this->addColumn('REASONCODE', 'Reasoncode', 'CLOB', false, null, null);
		$this->addColumn('REASONCODEMEANING', 'Reasoncodemeaning', 'CLOB', false, null, null);
		$this->addColumn('CABCOMPANIES', 'Cabcompanies', 'VARCHAR', false, 255, null);
		$this->addColumn('PROJECTNAME', 'Projectname', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTCONTRACTORNAME', 'Projectcontractorname', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTOWNERNAME', 'Projectownername', 'VARCHAR', false, 250, null);
		$this->addColumn('PROJECTADDRESSLINE1', 'Projectaddressline1', 'VARCHAR', false, 255, null);
		$this->addColumn('PROJECTCITY', 'Projectcity', 'VARCHAR', false, 50, null);
		$this->addColumn('PROJECTSTATE', 'Projectstate', 'VARCHAR', false, 101, null);
		$this->addColumn('PROJECTCOUNTRY', 'Projectcountry', 'VARCHAR', false, 255, null);
		$this->addColumn('BIDSITUATION', 'Bidsituation', 'VARCHAR', false, 255, null);
		$this->addColumn('BROKERNAME', 'Brokername', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERTYPE', 'Brokertype', 'VARCHAR', false, 255, null);
		$this->addColumn('BROKERCITY', 'Brokercity', 'VARCHAR', false, 50, null);
		$this->addColumn('BROKERSTATE', 'Brokerstate', 'VARCHAR', false, 101, null);
		$this->addColumn('BROKERCOUNTRY', 'Brokercountry', 'VARCHAR', false, 255, null);
		$this->addColumn('BRANCHOFFICE', 'Branchoffice', 'VARCHAR', false, 50, null);
		$this->addColumn('CREATEDDATE', 'Createddate', 'TIMESTAMP', false, null, null);
		$this->addColumn('MODIFIEDDATE', 'Modifieddate', 'TIMESTAMP', false, null, null);
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // QcSearchTableMap
