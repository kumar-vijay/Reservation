<?php


/**
 * This class defines the structure of the 'Submission' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed May 14 10:26:50 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class SubmissionTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.SubmissionTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('Submission');
		$this->setPhpName('Submission');
		$this->setClassname('Submission');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, 11, null);
		$this->addColumn('SUBMISSIONNUMBER', 'Submissionnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('NEWRENEWALLOOKUPID', 'Newrenewallookupid', 'INTEGER', false, 11, null);
		$this->addColumn('UNDERWRITERID', 'Underwriterid', 'INTEGER', false, 11, null);
		$this->addColumn('LOBID', 'Lobid', 'INTEGER', false, 11, null);
		$this->addColumn('LOBSUBTYPEID', 'Lobsubtypeid', 'INTEGER', false, 11, null);
		$this->addColumn('SECTIONID', 'Sectionid', 'INTEGER', false, 11, null);
		$this->addColumn('PROFITCODEID', 'Profitcodeid', 'INTEGER', false, 11, null);
		$this->addColumn('CURRENTSTATUSID', 'Currentstatusid', 'INTEGER', false, 11, null);
		$this->addColumn('EFFECTIVEDATE', 'Effectivedate', 'TIMESTAMP', false, null, null);
		$this->addColumn('EXPIRYDATE', 'Expirydate', 'TIMESTAMP', false, null, null);
		$this->addColumn('INSUREDID', 'Insuredid', 'INTEGER', false, 11, null);
		$this->addColumn('ISDIFFERENTDBA', 'Isdifferentdba', 'CHAR', false, 10, null);
		$this->addColumn('ISDIFFERENTMAILLINGADDRESS', 'Isdifferentmaillingaddress', 'CHAR', false, 10, null);
		$this->addColumn('DBANAME', 'Dbaname', 'VARCHAR', false, 500, null);
		$this->addColumn('ALTERNATIVEADDRESSID', 'Alternativeaddressid', 'INTEGER', false, 11, null);
		$this->addColumn('DBNUMBER', 'Dbnumber', 'VARCHAR', false, 50, null);
		$this->addColumn('CABCOMPANIESLOOKUPID', 'Cabcompanieslookupid', 'INTEGER', false, 11, null);
		$this->addColumn('REINSUREDCOMPANY', 'Reinsuredcompany', 'CLOB', false, null, null);
		$this->addColumn('SUBMISSIONIDENTIFIER', 'Submissionidentifier', 'INTEGER', false, 11, null);
		$this->addColumn('BUSINESSDEPENDENTDETAILID', 'Businessdependentdetailid', 'INTEGER', false, 11, null);
		$this->addColumn('TOTALINSUREDVALUE', 'Totalinsuredvalue', 'VARCHAR', false, 250, null);
		$this->addColumn('BROKERWISECITYID', 'Brokerwisecityid', 'INTEGER', false, 11, null);
		$this->addColumn('BROKERCONTACTPERSON', 'Brokercontactperson', 'VARCHAR', false, 250, null);
		$this->addColumn('BROKERCONTACTPERSONEMAIL', 'Brokercontactpersonemail', 'VARCHAR', false, 250, null);
		$this->addColumn('BROKERCONTACTPERSONNUMBER', 'Brokercontactpersonnumber', 'VARCHAR', false, 250, null);
		$this->addColumn('BROKERCODE', 'Brokercode', 'VARCHAR', false, 50, null);
		$this->addColumn('STATUSDEPENDENTDETAILSID', 'Statusdependentdetailsid', 'INTEGER', false, 11, null);
		$this->addColumn('BERKSIDATEFROMBROKER', 'Berksidatefrombroker', 'TIMESTAMP', false, null, null);
		$this->addColumn('BERKSIDATEFROMINDIA', 'Berksidatefromindia', 'TIMESTAMP', false, null, null);
		$this->addColumn('BRANCHID', 'Branchid', 'INTEGER', false, 11, null);
		$this->addColumn('QCSTATUS', 'Qcstatus', 'INTEGER', false, 11, null);
		$this->addColumn('DATARECORDERMETADATAID', 'Datarecordermetadataid', 'INTEGER', false, 11, null);
		$this->addColumn('LOGID', 'Logid', 'BIGINT', false, 20, null);
		$this->addColumn('SUBMISSIONSERIES', 'Submissionseries', 'INTEGER', false, 11, null);
		$this->addColumn('INDICATOR', 'Indicator', 'INTEGER', false, 11, null);
		$this->addColumn('SUBMISSIONSEQUENCE', 'Submissionsequence', 'VARCHAR', false, 6, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // SubmissionTableMap
