<?php

class AmendmentExport {

    public function __construct() {
        $this->_con = Propel::getConnection();
    }

    public function InsertSubmissionDataIntoTempTable($where) {
        $con = Propel::getConnection();
        $query = "Insert into [#Temp](
                            Sort_Order,
                            Id,
                            SubmissionNumber,
                            DuckCreekSubmissionNumber,
                            MasterPolicyNumber,
                            NewRenewal,
                            InsuredName,
                            AdvisenId,
                            ReasonCodeMeaning,
                            Underwriter,
                            ProductLine,
                            ProductLineSubType,
                            Section,
                            ProfitCode,
                            ISOCode,
                            CurrentStatus,
                            EffectiveDate,
                            ExpiryDate,
                            ProcessDate,
                            BindDate,
                            Renewable,
                            DateOfRenewal,
                            PolicyType,
                            DirectAssumed,
                            CompanyPaper,
                            CompanyPaperNumber,
                            Coverage,
                            PolicyNumber,
                            Suffix,
                            TransactionNumber,
                            AdmittedNonAdmitted,
                            BrokerName,
                            BrokerType,
                            AlternativeAddress1,
                            BrokerContactPerson,
                            BrokerCountry,
                            BrokerState,
                            BrokerCity,
                            BrokerContactPersonStreetAddress,
                            BrokerContactPersonZipCode,
                            BrokerCode,
                            BrokerContactPersonEmail,
                            BrokerContactPersonNumber,
                            BrokerContactPersonMobile,
                            RetailBroker,
                            RetailBrokerCountry,
                            RetailBrokerState,
                            RetailBrokerCity,
                            BrancOffice,
                            Currency,
                            ExchangeRate,
                            ExchangeDate,
                            LayerofLimitInLocalCurrency,
                            LayerofLimitInUSD,
                            PercentageofLayer,
                            Limit,
                            LimitUSD,
                            AttachmentPoint,
                            AttachmentPointUSD,
                            SelfInsuredRetentionInLocalCurrency,
                            SelfInsuredRetentionInUSD,
                            OriginalPremium,
                            GrossPremiumUSD,
                            PolicyCommPercentage,
                            PolicyCommInLocalCurrency,
                            PolicyCommInUSD,
                            PermiumNetofCommInLocalCurrency,
                            PermiumNetofCommInUSD,
                            ReasonCode,
                            CabCompanies,
                            TotalInsuredValue,
                            TotalInsuredValueInUSD,
                            AlternativeZipCode,
                            AlternativeState,
                            RiskProfile,
                            ProjectName,
                            GeneralContractor,
                            ProjectOwnerName,
                            ProjectStreetAddress,
                            ProjectCountry,
                            ProjectState,
                            ProjectCity,
                            BidSituation,
                            ReinsuredCompany,
                            DBNumber,
                            NAICCode,
                            NAICTitle,
                            OfrcReport,
                            DBAName,
                            InsuredCountry,
                            InsuredState,
                            InsuredCity,
                            InsuredMailingAddress1,
                            InsuredZipcode,
                            InsuredContactPerson,
                            InsuredContactPersonEmail,
                            InsuredContactPersonPhone,
                            InsuredContactPersonMobile,
                            InsuredSubmissionDate,
                            insuredQuoteDueDate,
                            ByBerksiFromBroker,
                            ByIndiaFromBerksi,
                            Date1,
                            Status1,
                            Remark1,
                            Date2,
                            Status2,
                            Remark2,
                            Date3,
                            Status3,
                            Remark3,
                            Date4,
                            Status4,
                            Remark4,
                            Date5,
                            Status5,
                            Remark5,
                            DateForAmendment)
                            SELECT 
                            --ROW_NUMBER() OVER(ORDER BY SV.SubmissionId DESC) AS Row,
                            0 as Sort_Order,SV.SubmissionId AS Id, SV.SubmissionNumber AS SubmissionNumber,SV.DuckCreekSubmissionNumber AS DuckCreekSubmissionNumber,SV.MasterPolicyNumber AS MasterPolicyNumber, SV.NewRenewal AS NewRenewal, SV.InsuredName AS InsuredName, SV.AdvisenId AS AdvisenId, SV.ReasonCodeMeaning AS ReasonCodeMeaning, SV.UnderWriterName AS Underwriter, SV.PropertyType AS ProductLine, SV.PropertyLineSubType AS ProductLineSubType, SV.SectionCode AS Section, SV.ProfitCode AS ProfitCode, 
                                SV.IscCode AS IscCode,SV.CurrentStatus AS CurrentStatus, CONVERT(INT, CONVERT(DATETIME,SV.EffectiveDate))+2 AS EffectiveDate, CONVERT(INT, CONVERT(DATETIME,SV.ExpiryDate))+2 AS ExpiryDate, CONVERT(INT, CONVERT(DATETIME,SV.ProcessDate))+2 AS ProcessDate, CONVERT(INT, CONVERT(DATETIME,SV.BindDate))+2 AS BindDate, SV.Renewable AS Renewable, CONVERT(INT, CONVERT(DATETIME,SV.DateOfRenewal))+2 AS DateOfRenewal,
                                SV.PolicyType AS PolicyType, SV.DirectAssumed AS DirectAssumed, SV.CompanyPaper AS CompanyPaper, SV.CompanyPaperNumber AS CompanyPaperNumber, SV.Coverage AS Coverage, SV.PolicyNumber AS PolicyNumber, SV.Suffix AS Suffix, SV.TransactionNumber AS TransactionNumber, SV.AdmittedNonAdmitted AS AdmittedNonAdmitted,
                                SV.BrokerName AS BrokerName, SV.BrokerType AS BrokerType, SV.AlternativeAddress1 AS AlternativeAddress1, SV.BrokerContactPerson AS BrokerContactPerson,SV.BrokerCountry AS BrokerCountry, SV.BrokerState AS BrokerState, SV.BrokerCity AS BrokerCity, SV.BrokerContactPersonStreetAddress AS BrokerContactPersonStreetAddress, SV.BrokerContactPersonZipCode AS BrokerContactPersonZipCode,
                                SV.BrokerCode AS BrokerCode,SV.BrokerContactPersonEmail AS BrokerContactPersonEmail, SV.BrokerContactPersonNumber AS BrokerContactPersonNumber, SV.BrokerContactPersonMobile AS BrokerContactPersonMobile, SV.RetailBrokerName AS RetailBroker, SV.RetailBrokerCountry AS RetailBrokerCountry, SV.RetailBrokerState AS RetailBrokerState, SV.RetailBrokerCity AS RetailBrokerCity, SV.BranchOffice AS BrancOffice,
                                SV.Currency AS Currency,SV.ExchangeRate AS ExchangeRate, CONVERT(INT, CONVERT(DATETIME,SV.ExchangeDate))+2 AS ExchangeDate, SV.LayerofLimitInLocalCurrency AS LayerofLimitInLocalCurrency, SV.LayerofLimitInUSD AS LayerofLimitInUSD, SV.PercentageofLayer AS PercentageofLayer, SV.StatusLimit AS Limit, SV.LimitInUSD AS LimitUSD, SV.AttachmentPoint AS AttachmentPoint,SV.AttachmentPointInUSD AS AttachmentPointUSD,
                                SV.SelfInsuredRetentionInLocalCurrency AS SelfInsuredRetentionInLocalCurrency, SV.SelfInsuredRetentionInUSD AS SelfInsuredRetentionInUSD, SV.GrossPremium AS OriginalPremium,SV.GrossPremiumInUSD AS GrossPremiumUSD, SV.PolicyCommPercentage AS PolicyCommPercentage, SV.PolicyCommInLocalCurrency AS PolicyCommInLocalCurrency, SV.PolicyCommInUSD AS PolicyCommInUSD, SV.PermiumNetofCommInLocalCurrency AS PermiumNetofCommInLocalCurrency,
                                SV.PermiumNetofCommInUSD AS PermiumNetofCommInUSD,SV.ReasonCode AS ReasonCode, SV.CabCompanies AS CabCompanies, SV.TotalInsuredValue AS TotalInsuredValue, SV.TotalInsuredValueInUSD AS TotalInsuredValueInUSD, SV.AlternativeZipCode AS AlternativeZipCode, SV.AlternativeState AS AlternativeState, SV.RiskProfile,
                                SV.ProjectName AS ProjectName, SV.ProjectContractorName AS GeneralContractor, SV.ProjectOwnerName AS ProjectOwnerName, SV.ProjectAddressLine1 AS ProjectStreetAddress, SV.ProjectCountry AS ProjectCountry, SV.ProjectState AS ProjectState, SV.ProjectCity AS ProjectCity, SV.BidSituation AS BidSituation,
                                SV.ReinsuredCompany AS ReinsuredCompany, SV.DbNumber AS DBNumber, SV.NAICCode AS NAICCode, SV.NAICTitle AS NAICTitle, SV.OfrcReport AS OfrcReport, SV.DbaName AS DBAName, SV.InsuredCountry AS InsuredCountry, SV.InsuredState AS InsuredState, SV.InsuredCity AS InsuredCity, 
                                SV.InsuredAddress1 AS InsuredMailingAddress1, SV.InsuredZipCode AS InsuredZipcode, SV.InsuredContactPerson AS InsuredContactPerson, SV.InsuredContactPersonEmail As InsuredContactPersonEmail, SV.InsuredContactPersonPhoneNumber AS InsuredContactPersonPhone, SV.InsuredContactPersonMobileNumber AS InsuredContactPersonMobile,
                                CONVERT(INT, CONVERT(DATETIME,SV.InsuredSubmissionDate))+2 AS InsuredSubmissionDate, CONVERT(INT, CONVERT(DATETIME,SV.InsuredQuoteDueDate))+2 AS insuredQuoteDueDate ,CONVERT(float, CONVERT(DATETIME,SV.DateOfRecievingByBroker))+2 AS ByBerksiFromBroker, CONVERT(INT, CONVERT(DATETIME,SV.DateOfrecievingByIndia))+2 AS ByIndiaFromBerksi,
                                CONVERT(INT, CONVERT(DATETIME,Date1))+2 AS Date1,Status1, Remark1,CONVERT(INT, CONVERT(DATETIME,Date2))+2 AS Date2, Status2, Remark2,CONVERT(INT, CONVERT(DATETIME,Date3))+2 AS Date3, Status3, Remark3,CONVERT(INT, CONVERT(DATETIME,Date4))+2 AS Date4, Status4, Remark4,CONVERT(INT, CONVERT(DATETIME,Date5))+2 AS Date5, Status5, Remark5, 0
				from Submission_Search AS SV
                                left join
                               (select s.id sid, 
                                min(case when [rank] = 1 then kmodifiedon else null end) as 'Date1',
                                min(case when [rank] = 1 then knewvalue else null end) as 'Status1',
                                min(case when [rank] = 1 then kremarks else null end) as 'Remark1',

                                min(case when [rank] = 2 then kmodifiedon else null end) as 'Date2',
                                min(case when [rank] = 2 then knewvalue else null end) as 'Status2',
                                min(case when [rank] = 2 then kremarks else null end) as 'Remark2',

                                min(case when [rank] = 3 then kmodifiedon else null end) as 'Date3',
                                min(case when [rank] = 3 then knewvalue else null end) as 'Status3',
                                min(case when [rank] = 3 then kremarks else null end) as 'Remark3',

                                min(case when [rank] = 4 then kmodifiedon else null end) as 'Date4',
                                min(case when [rank] = 4 then knewvalue else null end) as 'Status4',
                                min(case when [rank] = 4 then kremarks else null end) as 'Remark4',

                                min(case when [rank] = 5 then kmodifiedon else null end) as 'Date5',
                                min(case when [rank] = 5 then knewvalue else null end) as 'Status5',
                                min(case when [rank] = 5 then kremarks else null end) as 'Remark5'
								
                                from submission s left join 
                                (SELECT k.Rank AS rank, k.id AS kid, k.submissionid AS ksubmissionid, k.oldvalue AS koldvalue, k.newvalue AS knewvalue, k.remarks AS kremarks,  k.modifiedby AS kmodifiedby, k.modifiedon AS kmodifiedon FROM (SELECT ROW_NUMBER() OVER (PARTITION BY SubmissionId
                                ORDER BY SubmissionId, ModifiedOn) AS RANK, Id, SubmissionId, Field, OldValue, NewValue, Remarks, ModifiedBy, ModifiedOn
                                FROM submissionHistory Where Field = 'Status') k
                                ) r
                                on s.id=r.ksubmissionid group by s.id) b on SV.SubmissionId = b.sid " . $where . "";
        $insert = $con->prepare($query);
        if ($insert->execute()) {
            $this->InsertAmendmentDataIntoTempTable();
            return true;
        } else {
            return false;
        }
    }

    public function InsertAmendmentDataIntoTempTable() {
        $con = Propel::getConnection();
        $query = "Insert into [#Temp](
                        Sort_Order,
                        Id,
                        SubmissionNumber,
                        DuckCreekSubmissionNumber,
                        MasterPolicyNumber,
                        NewRenewal,
                        InsuredName,
                        AdvisenId,
                        ReasonCodeMeaning,
                        Underwriter,
                        ProductLine,
                        ProductLineSubType,
                        Section,
                        ProfitCode,
                        ISOCode,
                        CurrentStatus,
                        EffectiveDate,
                        ExpiryDate,
                        ProcessDate,
                        BindDate,
                        Renewable,
                        DateOfRenewal,
                        PolicyType,
                        DirectAssumed,
                        CompanyPaper,
                        CompanyPaperNumber,
                        Coverage,
                        PolicyNumber,
                        Suffix,
                        TransactionNumber,
                        AdmittedNonAdmitted,
                        BrokerName,
                        BrokerType,
                        AlternativeAddress1,
                        BrokerContactPerson,
                        BrokerCountry,
                        BrokerState,
                        BrokerCity,
                        BrokerContactPersonStreetAddress,
                        BrokerContactPersonZipCode,
                        BrokerCode,
                        BrokerContactPersonEmail,
                        BrokerContactPersonNumber,
                        BrokerContactPersonMobile,
                        RetailBroker,
                        RetailBrokerCountry,
                        RetailBrokerState,
                        RetailBrokerCity,
                        BrancOffice,
                        Currency,
                        ExchangeRate,
                        ExchangeDate,
                        LayerofLimitInLocalCurrency,
                        LayerofLimitInUSD,
                        PercentageofLayer,
                        Limit,
                        LimitUSD,
                        AttachmentPoint,
                        AttachmentPointUSD,
                        SelfInsuredRetentionInLocalCurrency,
                        SelfInsuredRetentionInUSD,
                        OriginalPremium,
                        GrossPremiumUSD,
                        PolicyCommPercentage,
                        PolicyCommInLocalCurrency,
                        PolicyCommInUSD,
                        PermiumNetofCommInLocalCurrency,
                        PermiumNetofCommInUSD,
                        ReasonCode,
                        CabCompanies,
                        TotalInsuredValue,
                        TotalInsuredValueInUSD,
                        AlternativeZipCode,
                        AlternativeState,
                        RiskProfile,
                        ProjectName,
                        GeneralContractor,
                        ProjectOwnerName,
                        ProjectStreetAddress,
                        ProjectCountry,
                        ProjectState,
                        ProjectCity,
                        BidSituation,
                        ReinsuredCompany,
                        DBNumber,
                        NAICCode,
                        NAICTitle,
                        OfrcReport,
                        DBAName,
                        InsuredCountry,
                        InsuredState,
                        InsuredCity,
                        InsuredMailingAddress1,
                        InsuredZipcode,
                        InsuredContactPerson,
                        InsuredContactPersonEmail,
                        InsuredContactPersonPhone,
                        InsuredContactPersonMobile,
                        InsuredSubmissionDate,
                        insuredQuoteDueDate,
                        ByBerksiFromBroker,
                        ByIndiaFromBerksi,
                        Date1,
                        Status1,
                        Remark1,
                        Date2,
                        Status2,
                        Remark2,
                        Date3,
                        Status3,
                        Remark3,
                        Date4,
                        Status4,
                        Remark4,
                        Date5,
                        Status5,
                        Remark5,
                        DateForAmendment)
                        SELECT 1 as Sort_Order, ASV.SubmissionId AS SubmissionId, ASV.SubmissionNumber AS SubmissionNumber,ASV.DuckSubmissionNumber AS DuckSubmissionNumber,ASV.FinalPolicyNumber AS MasterPolicyNumber, ASV.NewRenewal AS NewRenewal, ASV.InsuredName AS InsuredName, ASV.AdvisenId AS AdvisenId,ASV.SubmissionIdentifier AS SubmissionIdentifier,
                        ASV.UnderwriterName AS UnderwriterName, ASV.ProductLine AS ProductLine, ASV.ProductLineSubType AS ProductLineSubType, ASV.SectionCode AS SectionCode, ASV.ProfitCode AS ProfitCode, ASV.IscCode AS IsoCode,ASV.Status AS CurrentStatus,CONVERT(INT, CONVERT(DATETIME,ASV.EffectiveDate))+2 AS EffectiveDate,CONVERT(INT, CONVERT(DATETIME,ASV.ExpiryDate))+2 AS ExpiryDate,CONVERT(INT,CONVERT(DATETIME,ASV.ProcessDate))+2 AS ProcessDate,CONVERT(INT,CONVERT(DATETIME,ASV.BindDate))+2 AS BindDate,ASV.Renewable AS Renewable,
                        CONVERT(INT,CONVERT(DATETIME,ASV.DateofRenewal))+2 AS DateofRenewal,ASV.PolicyType AS PolicyType,ASV.DirectAssumed AS DirectAssumed, ASV.CompanyPaper AS CompanyPaper, ASV.CompanyPaperNumber AS CompanyPaperNumber, ASV.Coverage AS Coverage, ASV.PolicyNumber AS PolicyNumber, ASV.Suffix AS Suffix, ASV.TransactionNumber AS TransactionNumber, ASV.AdmittedNonAdmitted AS AdmittedNonAdmitted,
                        ASV.BrokerName AS BrokerName, ASV.BrokerType AS BrokerType, ASV.BrokerSubType As BrokerSubType, ASV.BrokerContactPerson AS BrokerContactPerson, ASV.BrokerCountry AS BrokerCountry, ASV.BrokerState AS BrokerState, ASV.BrokerCity AS BrokerCity,ASV.AddressLine1 AS BrokerStreetAddress, ASV.ZipCode AS BrokerZip, ASV.BrokerCode AS BrokerCode,
                        ASV.BrokerContactPersonEmail AS BrokerContactPersonEmail, ASV.BrokerContactPersonNumber AS BrokerContactPersonNumber, ASV.BrokerContactPersonMobile AS BrokerContactPersonMobile,ASV.RetailBrokerName AS RetailBrokerName,ASV.RetailBrokerCountry AS RetailBrokerCountry, ASV.RetailBrokerState AS RetailBrokerState, ASV.RetailBrokerCity AS RetailBrokerCity,
                        ASV.BranchName AS BranchName, ASV.Currency AS Currency, ASV.ExchangeRate AS ExchangeRate, CONVERT(INT,CONVERT(DATETIME,ASV.ExchangeDate))+2 AS ExchangeDate, ASV.LayerofLimitInLocalCurrency AS LayerofLimitInLocalCurrency, ASV.LayerofLimitInUSD AS LayerofLimitInUSD,ASV.PercentageofLayer AS PercentageofLayer, ASV.LimitInLocalCurrency AS LimitInLocalCurrency, ASV.LimitInUSD AS LimitInUSD,
                        ASV.AttachmentPointInLocalCurrency AS AttachmentPointInLocalCurrency,ASV.AttachmentPointInUSD AS AttachmentPointInUSD, ASV.SelfInsuredRetentionInLocalCurrency AS SelfInsuredRetentionInLocalCurrency, ASV.SelfInsuredRetentionInUSD AS SelfInsuredRetentionInUSD, ASV.PremiumInLocalCurrency AS PremiumInLocalCurrency, ASV.PremiumInUSD AS PremiumInUSD,
                        ASV.PolicyCommPercentage AS PolicyCommPercentage, ASV.PolicyCommInLocalCurrency AS PolicyCommInLocalCurrency, ASV.PolicyCommInUSD AS PolicyCommInUSD, ASV.PremiumNetofCommInLocalCurrency AS PremiumNetofCommInLocalCurrency, ASV.PremiumNetofCommInUSD AS PremiumNetofCommInUSD, ASV.ReasonCode AS ReasonCode, ASV.CabCompanies AS CabCompanies,
                        ASV.TotalInsuredValueinLocalCurrency AS TotalInsuredValueinLocalCurrency, ASV.TotalInsuredValueInUSD AS TotalInsuredValueInUSD,ASV.OccupancyCode AS OccupancyCode,ASV.NumberOfLocations AS NumberOfLocations,ASV.RiskProfile AS RiskProfile,ASV.ProjectName AS ProjectName,ASV.ProjectContractorName AS ProjectContractorName, ASV.ProjectOwnerName AS ProjectOwnerName,
                        ASV.ProjectAddressLine1 AS ProjectAddressLine1,ASV.ProjectCountry AS ProjectCountry, ASV.ProjectState AS ProjectState, ASV.ProjectCity AS ProjectCity,ASV.Bidsituation AS Bidsituation,ASV.ReinsuredCompany AS ReinsuredCompany,ASV.DbNumber AS DbNumber, ASV.NAICCode  AS NAICCode,ASV.NAICTitle AS NAICTitle,ASV.OFRCAdverseReport AS OFRCAdverseReport,
                        ASV.DbaName AS DbaName,ASV.InsuredCountry AS InsuredCountry, ASV.InsuredState AS InsuredState, ASV.InsuredCity AS InsuredCity,ASV.InsuredAddress1 AS InsuredAddress1, ASV.InsuredZipCode AS InsuredZipCode, ASV.InsuredContactPersonName AS InsuredContactPersonName, ASV.InsuredContactPersonEmail AS InsuredContactPersonEmail, ASV.InsuredContactPersonPhoneNumber AS InsuredContactPersonPhoneNumber,
                        ASV.InsuredContactPersonMobileNumber AS InsuredContactPersonMobileNumber, CONVERT(INT, CONVERT(DATETIME,ASV.InsuredSubmissionDate))+2 AS InsuredSubmissionDate, CONVERT(INT, CONVERT(DATETIME,ASV.InsuredQuoteDueDate))+2 AS InsuredQuoteDueDate,CONVERT(INT, CONVERT(DATETIME,ASV.BerkSIDateFromBroker))+2 AS BerkSIDateFromBroker, CONVERT(INT, CONVERT(DATETIME,ASV.BerkSiDateFromIndia))+2 AS BerkSiDateFromIndia,
                        CONVERT(INT, CONVERT(DATETIME,Date1))+2 AS Date1,Status1, Remark1,CONVERT(INT, CONVERT(DATETIME,Date2))+2 AS Date2, Status2, Remark2,CONVERT(INT, CONVERT(DATETIME,Date3))+2 AS Date3, Status3, Remark3,CONVERT(INT, CONVERT(DATETIME,Date4))+2 AS Date4, Status4, Remark4,CONVERT(INT, CONVERT(DATETIME,Date5))+2 AS Date5, Status5, Remark5,  CONVERT(INT,CONVERT(DATETIME,ASV.CreatedOn))+2 As AmendmentCreatedOn
                        From AmendmentSubmission_Search As ASV
                        left join
                           (select s.id sid, 
                            min(case when [rank] = 1 then kmodifiedon else null end) as 'Date1',
                            min(case when [rank] = 1 then knewvalue else null end) as 'Status1',
                            min(case when [rank] = 1 then kremarks else null end) as 'Remark1',

                            min(case when [rank] = 2 then kmodifiedon else null end) as 'Date2',
                            min(case when [rank] = 2 then knewvalue else null end) as 'Status2',
                            min(case when [rank] = 2 then kremarks else null end) as 'Remark2',

                            min(case when [rank] = 3 then kmodifiedon else null end) as 'Date3',
                            min(case when [rank] = 3 then knewvalue else null end) as 'Status3',
                            min(case when [rank] = 3 then kremarks else null end) as 'Remark3',

                            min(case when [rank] = 4 then kmodifiedon else null end) as 'Date4',
                            min(case when [rank] = 4 then knewvalue else null end) as 'Status4',
                            min(case when [rank] = 4 then kremarks else null end) as 'Remark4',

                            min(case when [rank] = 5 then kmodifiedon else null end) as 'Date5',
                            min(case when [rank] = 5 then knewvalue else null end) as 'Status5',
                            min(case when [rank] = 5 then kremarks else null end) as 'Remark5'
                            from submission s left join 
                            (SELECT k.Rank AS rank, k.id AS kid, k.submissionid AS ksubmissionid, k.oldvalue AS koldvalue, k.newvalue AS knewvalue, k.remarks AS kremarks,  k.modifiedby AS kmodifiedby, k.modifiedon AS kmodifiedon FROM (SELECT ROW_NUMBER() OVER (PARTITION BY SubmissionId
                            ORDER BY SubmissionId, ModifiedOn) AS RANK, Id, SubmissionId, Field, OldValue, NewValue, Remarks, ModifiedBy, ModifiedOn
                            FROM SubmissionHistory Where Field = 'Status') k
                            ) r
                            on s.id=r.ksubmissionid group by s.id) b on ASV.SubmissionId = b.sid Where 
							ASV.SubmissionId in (select id from #Temp) AND ASV.QcStatus = 'Approved'
							order by asv.AmendmentId ASC";
        $insert = $con->prepare($query);
        if ($insert->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public function CreateTempraryCode() {
        $con = Propel::getConnection();
        $maketemp = "
        CREATE TABLE [#Temp] (
        [RNO] [int] identity(1,1),
	[Sort_Order] bit,
	[Id] [int] NOT NULL,
	[SubmissionNumber] [varchar](50) NULL,
	[DuckCreekSubmissionNumber] [varchar](250) NULL,
	[MasterPolicyNumber] [varchar](250) NULL,
	[NewRenewal] [nvarchar](255) NULL,
	[InsuredName] [nvarchar](500) NULL,
	[AdvisenId] [int] NULL,
	[ReasonCodeMeaning] [varchar](500) NULL,
	[Underwriter] [varchar](max) NULL,
	[ProductLine] [nvarchar](255) NULL,
	[ProductLineSubType] [nvarchar](255) NULL,
	[Section] [varchar](250) NULL,
	[ProfitCode] [nvarchar](255) NULL,
        [ISOCode] [nvarchar](255) NULL,
	[CurrentStatus] [nvarchar](50) NULL,
	[EffectiveDate] [int] NULL,
	[ExpiryDate] [int] NULL,
	[ProcessDate] [int] NULL,
	[BindDate] [int] NULL,
	[Renewable] [nvarchar](255) NULL,
	[DateOfRenewal] [int] NULL,
	[PolicyType] [nvarchar](255) NULL,
	[DirectAssumed] [nvarchar](255) NULL,
	[CompanyPaper] [nvarchar](255) NULL,
	[CompanyPaperNumber] [nvarchar](255) NULL,
	[Coverage] [varchar](250) NULL,
	[PolicyNumber] [varchar](250) NULL,
	[Suffix] [nvarchar](255) NULL,
	[TransactionNumber] [varchar](50) NULL,
	[AdmittedNonAdmitted] [nvarchar](255) NULL,
	[BrokerName] [nvarchar](50) NULL,
	[BrokerType] [nvarchar](255) NULL,
	[AlternativeAddress1] [nvarchar](255) NULL,
	[BrokerContactPerson] [varchar](501) NULL,
	[BrokerCountry] [nvarchar](255) NULL,
	[BrokerState] [nvarchar](101) NULL,
	[BrokerCity] [nvarchar](50) NULL,
	[BrokerContactPersonStreetAddress] [varchar](50) NULL,
	[BrokerContactPersonZipCode] [varchar](50) NULL,
	[BrokerCode] [varchar](50) NULL,
	[BrokerContactPersonEmail] [varchar](250) NULL,
	[BrokerContactPersonNumber] [varchar](250) NULL,
	[BrokerContactPersonMobile] [varchar](250) NULL,
	[RetailBroker] [varchar](100) NULL,
	[RetailBrokerCountry] [nvarchar](255) NULL,
	[RetailBrokerState] [varchar](250) NULL,
	[RetailBrokerCity] [varchar](250) NULL,
	[BrancOffice] [nvarchar](50) NULL,
	[Currency] [nvarchar](255) NULL,
	[ExchangeRate] [varchar](50) NULL,
	[ExchangeDate] [int] NULL,
	[LayerofLimitInLocalCurrency] [varchar](50) NULL,
	[LayerofLimitInUSD] [varchar](50) NULL,
	[PercentageofLayer] [varchar](50) NULL,
	[Limit] [varchar](50) NULL,
	[LimitUSD] [varchar](50) NULL,
	[AttachmentPoint] [varchar](50) NULL,
	[AttachmentPointUSD] [varchar](50) NULL,
	[SelfInsuredRetentionInLocalCurrency] [varchar](50) NULL,
	[SelfInsuredRetentionInUSD] [varchar](50) NULL,
	[OriginalPremium] [varchar](50) NULL,
	[GrossPremiumUSD] [varchar](50) NULL,
	[PolicyCommPercentage] [varchar](50) NULL,
	[PolicyCommInLocalCurrency] [varchar](50) NULL,
	[PolicyCommInUSD] [varchar](50) NULL,
	[PermiumNetofCommInLocalCurrency] [varchar](50) NULL,
	[PermiumNetofCommInUSD] [varchar](50) NULL,
	[ReasonCode] [varchar](max) NULL,
	[CabCompanies] [varchar](100) NULL,
	[TotalInsuredValue] [varchar](250) NULL,
	[TotalInsuredValueInUSD] [varchar](250) NULL,
	[AlternativeZipCode] [varchar](100) NULL,
	[AlternativeState] [nvarchar](255) NULL,
	[RiskProfile] [varchar](250) NULL,
	[ProjectName] [varchar](250) NULL,
	[GeneralContractor] [varchar](250) NULL,
	[ProjectOwnerName] [varchar](250) NULL,
	[ProjectStreetAddress] [varchar](250) NULL,
	[ProjectCountry] [varchar](250) NULL,
	[ProjectState] [varchar](250) NULL,
	[ProjectCity] [varchar](250) NULL,
	[BidSituation] [nvarchar](255) NULL,
	[ReinsuredCompany] [varchar](max) NULL,
	[DBNumber] [varchar](50) NULL,
	[NAICCode] [varchar](250) NULL,
	[NAICTitle] [varchar](250) NULL,
	[OfrcReport] [nvarchar](255) NULL,
	[DBAName] [varchar](500) NULL,
	[InsuredCountry] [varchar](500) NULL,
	[InsuredState] [varchar](500) NULL,
	[InsuredCity] [varchar](500) NULL,
	[InsuredMailingAddress1] [varchar](500) NULL,
	[InsuredZipcode] [varchar](500) NULL,
	[InsuredContactPerson] [varchar](501) NULL,
	[InsuredContactPersonEmail] [varchar](250) NULL,
	[InsuredContactPersonPhone] [varchar](250) NULL,
	[InsuredContactPersonMobile] [varchar](250) NULL,
	[InsuredSubmissionDate] [int] NULL,
	[insuredQuoteDueDate] [int] NULL,
	[ByBerksiFromBroker] [float] NULL,
	[ByIndiaFromBerksi] [int] NULL,
	[Date1] [int] NULL,
	[Status1] [varchar](50) NULL,
	[Remark1] [varchar](max) NULL,
	[Date2] [int] NULL,
	[Status2] [varchar](50) NULL,
	[Remark2] [varchar](max) NULL,
	[Date3] [int] NULL,
	[Status3] [varchar](50) NULL,
	[Remark3] [varchar](max) NULL,
	[Date4] [int] NULL,
	[Status4] [varchar](50) NULL,
	[Remark4] [varchar](max) NULL,
	[Date5] [int] NULL,
	[Status5] [varchar](50) NULL,
	[Remark5] [varchar](max) NULL,
        [DateForAmendment] int NULL
      ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
        $insert = $con->prepare($maketemp);
        if ($insert->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public function GetExportData() {
        $con = Propel::getConnection();
        $qry = "SELECT
        [RNO],
        [Sort_Order],
	[Id],
	[SubmissionNumber],
	[DuckCreekSubmissionNumber],
	[MasterPolicyNumber],
	[NewRenewal],
	[InsuredName],
	[AdvisenId],
	[ReasonCodeMeaning],
	[Underwriter],
	[ProductLine],
	[ProductLineSubType],
	[Section],
	[ProfitCode],
        [ISOCode], 
	[CurrentStatus],
	[EffectiveDate],
	[ExpiryDate],
	[ProcessDate],
	[BindDate],
	(select top 1 [Renewable] from #temp T1 where t1.id = #temp.id order by RNO desc)[Renewable],
	(select top 1 [DateOfRenewal] from #temp T1 where t1.id = #temp.id order by RNO desc)[DateOfRenewal],
	[PolicyType],
	[DirectAssumed],
	[CompanyPaper],
	[CompanyPaperNumber],
	[Coverage],
	[PolicyNumber],
	[Suffix],
	[TransactionNumber],
	[AdmittedNonAdmitted],
	[BrokerName],
	[BrokerType],
	[AlternativeAddress1],
	[BrokerContactPerson],
	[BrokerCountry],
	[BrokerState],
	[BrokerCity],
	[BrokerContactPersonStreetAddress],
	[BrokerContactPersonZipCode],
	[BrokerCode],
	[BrokerContactPersonEmail],
	[BrokerContactPersonNumber],
	[BrokerContactPersonMobile],
	[RetailBroker],
	[RetailBrokerCountry],
	[RetailBrokerState],
	[RetailBrokerCity],
	[BrancOffice],
	[Currency],
	[ExchangeRate],
	[ExchangeDate],
	[LayerofLimitInLocalCurrency],
	[LayerofLimitInUSD],
	[PercentageofLayer],
	[Limit],
	[LimitUSD],
	[AttachmentPoint],
	[AttachmentPointUSD],
	[SelfInsuredRetentionInLocalCurrency],
	[SelfInsuredRetentionInUSD],
	[OriginalPremium],
	[GrossPremiumUSD],
	[PolicyCommPercentage],
	[PolicyCommInLocalCurrency],
	[PolicyCommInUSD],
	[PermiumNetofCommInLocalCurrency],
	[PermiumNetofCommInUSD],
	[ReasonCode],
	[CabCompanies],
	[TotalInsuredValue],
	[TotalInsuredValueInUSD],
	[AlternativeZipCode],
	[AlternativeState],
	[RiskProfile],
	[ProjectName],
	[GeneralContractor],
	[ProjectOwnerName],
	[ProjectStreetAddress],
	[ProjectCountry],
	[ProjectState],
	[ProjectCity],
	[BidSituation],
	[ReinsuredCompany],
	[DBNumber],
	[NAICCode],
	[NAICTitle],
	[OfrcReport],
	[DBAName],
	[InsuredCountry],
	[InsuredState],
	[InsuredCity],
	[InsuredMailingAddress1],
	[InsuredZipcode],
	[InsuredContactPerson],
	[InsuredContactPersonEmail],
	[InsuredContactPersonPhone],
	[InsuredContactPersonMobile],
	[InsuredSubmissionDate],
	[insuredQuoteDueDate],
	[ByBerksiFromBroker],
	[ByIndiaFromBerksi],
	[Date1],
	[Status1],
	[Remark1],
	[Date2],
	[Status2],
	[Remark2],
	CASE 
           WHEN [Date3] is null and [Sort_Order] = 1 
           THEN [DateForAmendment]
           ELSE [Date3]
        END as [Date3],
	CASE 
           WHEN [Status3] is null and [Sort_Order] = 1 
           THEN [CurrentStatus]
           ELSE [Status3]
        END as [Status3],
	[Remark3],
	CASE 
           WHEN [Date3] IS NOT NULL and [Date4] is null and [Sort_Order] = 1 
           THEN [DateForAmendment]
           ELSE [Date4]
        END as [Date4],
	CASE 
           WHEN [Status4] IS NOT NULL and [Status4] is null and [Sort_Order] = 1 
           THEN [CurrentStatus]
           ELSE [Status4]
        END as [Status4],
	[Remark4],
	CASE 
           WHEN [Date4] IS NOT NULL and [Date5] is null and [Sort_Order] = 1 
           THEN [DateForAmendment]
           ELSE [Date5]
        END as [Date5],
	CASE 
           WHEN [Status4] IS NOT NULL and [Status5] is null and [Sort_Order] = 1 
           THEN [CurrentStatus]
           ELSE [Status5]
        END as [Status5],
	[Remark5]
        FROM [#Temp] order by id,[Sort_Order],[RNO]";
        $stmt = $con->query($qry);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        if($result){
            $this->RemoveTmpTable();
        }
        return $result;
    }
    
    private function RemoveTmpTable() {
        $con = Propel::getConnection();
        $qry = "DROP table [#Temp]";
        $insert = $con->prepare($qry);
        if ($insert->execute()) {
            return true;
        } else {
            return false;
        }
    }

}
