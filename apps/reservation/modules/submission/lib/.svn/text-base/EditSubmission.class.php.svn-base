<?php

class EditSubmissionDetails {

    public function __construct() {
        $this->connection = Propel::getConnection();
    }

    public function GetSubmissionDetails($submissionId) {
        $connection = $this->connection;
        $oldSubmissionQuery = "SELECT S.*, BD.*, SD.* FROM  Submission AS S LEFT JOIN  BusinessDependentDetail AS BD ON S.BusinessDependentDetailId = BD.Id  LEFT JOIN StatusDependentDetails AS SD ON S.StatusDependentDetailsId = SD.Id WHERE S.Id = '" . $submissionId . "'";
        $oldSubmissionStatement = $connection->prepare($oldSubmissionQuery);
        $oldSubmissionStatement->execute();
        $oldSubmission = $oldSubmissionStatement->fetchAll(PDO::FETCH_ASSOC);
        return $oldSubmission;
    }

    public function SaveSubmissionHistory($oldSubmissionRow, $postedValues, $userId, $submissionId) {
        $subObj = new SubmissionDetails();
        $viewObj = new ViewSubmissionDetails();
        $con = Propel::getConnection();
        $remarks = $postedValues['editRemark'];
        $historyArray = array();
        if ($oldSubmissionRow['NewRenewalLookupId'] != $postedValues['newrenewal']) {
            $oldNewRenewal = $viewObj->getLookUpdata($oldSubmissionRow['NewRenewalLookupId']);
            $newNewRenewal = $viewObj->getLookUpdata($postedValues['newrenewal']);
            $historyArray['FieldName'][] = 'New/Renewal';
            $historyArray['OldValue'][] = $oldNewRenewal;
            $historyArray['NewValue'][] = $newNewRenewal;
        }
        if ($oldSubmissionRow['UnderwriterId'] != $postedValues['editunderwriter']) {
            $oldUnderwriter = $subObj->getUnderWriterName($oldSubmissionRow['UnderwriterId']);
            $newUnderwriter = $subObj->getUnderWriterName($postedValues['editunderwriter']);
            $historyArray['FieldName'][] = 'Underwriter';
            $historyArray['OldValue'][] = $oldUnderwriter;
            $historyArray['NewValue'][] = $newUnderwriter;
        }
        $lobData = $subObj->getLobList($postedValues['editproductline']);
        $newLobId = $lobData[0]['Id'];
        if ($oldSubmissionRow['LobId'] != $newLobId) {
            $oldLobData = $viewObj->getLobName($oldSubmissionRow['LobId']);
            $oldLob = $oldLobData[0]['LOBName'];
            $newLobData = $viewObj->getLobName($newLobId);
            $newLob = $newLobData[0]['LOBName'];
            $historyArray['FieldName'][] = 'Product Line';
            $historyArray['OldValue'][] = $oldLob;
            $historyArray['NewValue'][] = $newLob;
        }
        if ($oldSubmissionRow['LobSubTypeId'] != $postedValues['editproductlinesubtype']) {
            $oldLobSubType = $viewObj->getLobSubTypeName($oldSubmissionRow['LobSubTypeId']);
            $oldLobSub = $oldLobSubType[0]['ProductLineSubType'];
            $newLobSubType = $viewObj->getLobSubTypeName($postedValues['editproductlinesubtype']);
            $newLobSub = $newLobSubType[0]['ProductLineSubType'];
            $historyArray['FieldName'][] = 'Product Line Subtype';
            $historyArray['OldValue'][] = $oldLobSub;
            $historyArray['NewValue'][] = $newLobSub;
        }
        if ($oldSubmissionRow['SectionId'] != $postedValues['editsection']) {
            $oldSectionData = $viewObj->getSection($oldSubmissionRow['SectionId']);
            $oldSection = $oldSectionData[0]['SectionCode'];
            $newSectionData = $viewObj->getSection($postedValues['editsection']);
            $newSection = $newSectionData[0]['SectionCode'];
            $historyArray['FieldName'][] = 'Section';
            $historyArray['OldValue'][] = $oldSection;
            $historyArray['NewValue'][] = $newSection;
        }
        if ($oldSubmissionRow['ProfitCodeId'] != $postedValues['editprofitcode']) {
            $oldProfitData = $viewObj->getprofit($oldSubmissionRow['ProfitCodeId']);
            $oldProfit = $oldProfitData[0]['ProfitCodeName'];
            $newProfitData = $viewObj->getprofit($postedValues['editprofitcode']);
            $newProfit = $newProfitData[0]['ProfitCodeName'];
            $historyArray['FieldName'][] = 'Profit Code';
            $historyArray['OldValue'][] = $oldProfit;
            $historyArray['NewValue'][] = $newProfit;
        }
        if ($oldSubmissionRow['CurrentStatusId'] != $postedValues['editprimarystatus']) {
            $oldCurrentStatusData = $viewObj->getStatus($oldSubmissionRow['CurrentStatusId']);
            $oldCurrentStatus = $oldCurrentStatusData[0]['StatusName'];
            $newCurrentStatusData = $viewObj->getStatus($postedValues['editprimarystatus']);
            $newCurrentStatus = $newCurrentStatusData[0]['StatusName'];
            $historyArray['FieldName'][] = 'Current Status';
            $historyArray['OldValue'][] = $oldCurrentStatus;
            $historyArray['NewValue'][] = $newCurrentStatus;
        }
        if (date("Y-m-d", strtotime($oldSubmissionRow['EffectiveDate'])) != date("Y-m-d", strtotime($postedValues['effectiveDate']))) {
            $historyArray['FieldName'][] = 'Effective Date';
            $historyArray['OldValue'][] = $oldSubmissionRow['EffectiveDate'];
            $historyArray['NewValue'][] = $postedValues['effectiveDate'];
        }
        if (date("Y-m-d", strtotime($oldSubmissionRow['ExpiryDate'])) != date("Y-m-d", strtotime($postedValues['expityDate']))) {
            $historyArray['FieldName'][] = 'Expiry Date';
            $historyArray['OldValue'][] = $oldSubmissionRow['ExpiryDate'];
            $historyArray['NewValue'][] = $postedValues['expityDate'];
        }
        if (trim($oldSubmissionRow['IsDifferentDba']) != trim($postedValues['insured_name_status'])) {
            $historyArray['FieldName'][] = 'Is DBA name different';
            $historyArray['OldValue'][] = $oldSubmissionRow['IsDifferentDba'];
            $historyArray['NewValue'][] = $postedValues['insured_name_status'];
        }
        if (trim($oldSubmissionRow['IsDifferentMaillingAddress']) != trim($postedValues['insured_address_status'])) {
            $historyArray['FieldName'][] = 'Is Address different';
            $historyArray['OldValue'][] = $oldSubmissionRow['IsDifferentMaillingAddress'];
            $historyArray['NewValue'][] = $postedValues['insured_address_status'];
        }
        if ($oldSubmissionRow['DbaName'] != $postedValues['dbaName']) {
            $historyArray['FieldName'][] = 'DBA Name';
            $historyArray['OldValue'][] = $oldSubmissionRow['DbaName'];
            $historyArray['NewValue'][] = $postedValues['dbaName'];
        }
        if ($oldSubmissionRow['DBNumber'] != $postedValues['db_number']) {
            $historyArray['FieldName'][] = 'D&B Number';
            $historyArray['OldValue'][] = $oldSubmissionRow['DBNumber'];
            $historyArray['NewValue'][] = $postedValues['db_number'];
        }
        if ($oldSubmissionRow['CABCompaniesLookupId'] != $postedValues['editcabcompanies']) {
            $oldCabData = $viewObj->getLookUpdata($oldSubmissionRow['CABCompaniesLookupId']);
            $oldCab = $oldCabData[0]['LookupName'];
            $newCabData = $viewObj->getLookUpdata($postedValues['editcabcompanies']);
            $newCab = $newCabData[0]['LookupName'];
            $historyArray['FieldName'][] = 'CAB Companies';
            $historyArray['OldValue'][] = $oldCab;
            $historyArray['NewValue'][] = $newCab;
        }
        if ($oldSubmissionRow['ReinsuredCompany'] != $postedValues['reinsured_company']) {
            $historyArray['FieldName'][] = 'Reinsured Company';
            $historyArray['OldValue'][] = $oldSubmissionRow['ReinsuredCompany'];
            $historyArray['NewValue'][] = $postedValues['reinsured_company'];
        }
        if ($oldSubmissionRow['SubmissionIdentifier'] != $postedValues['editsubmissiontypeidrntifier']) {
            $historyArray['FieldName'][] = 'Submission Type Identifier';
            $historyArray['OldValue'][] = $oldSubmissionRow['SubmissionIdentifier'];
            $historyArray['NewValue'][] = $postedValues['editsubmissiontypeidrntifier'];
        }
        if ($oldSubmissionRow['ProjectName'] != $postedValues['project_name']) {
            $historyArray['FieldName'][] = 'Project Name';
            $historyArray['OldValue'][] = $oldSubmissionRow['ProjectName'];
            $historyArray['NewValue'][] = $postedValues['project_name'];
        }
        if ($oldSubmissionRow['ProjectGeneralContractorName'] != $postedValues['general_contrator_name']) {
            $historyArray['FieldName'][] = 'Name of General Contractor';
            $historyArray['OldValue'][] = $oldSubmissionRow['ProjectGeneralContractorName'];
            $historyArray['NewValue'][] = $postedValues['general_contrator_name'];
        }
        if ($oldSubmissionRow['ProjectOwnerName'] != $postedValues['project_owner_name']) {
            $historyArray['FieldName'][] = 'Project Owner Name';
            $historyArray['OldValue'][] = $oldSubmissionRow['ProjectOwnerName'];
            $historyArray['NewValue'][] = $oldSubmissionRow['ProjectOwnerName'];
        }
        if ($oldSubmissionRow['ProjectOwnerName'] != $postedValues['project_owner_name']) {
            $historyArray['FieldName'][] = 'Project Owner Name';
            $historyArray['OldValue'][] = $oldSubmissionRow['ProjectOwnerName'];
            $historyArray['NewValue'][] = $oldSubmissionRow['ProjectOwnerName'];
        }
        if ($oldSubmissionRow['AddressLine1'] != $postedValues['project_street_address']) {
            $historyArray['FieldName'][] = 'Project Street Address';
            $historyArray['OldValue'][] = $oldSubmissionRow['AddressLine1'];
            $historyArray['NewValue'][] = $postedValues['project_street_address'];
        }
        if ($oldSubmissionRow['BidSituationLookupId'] != $postedValues['bid_situation']) {
            $oldBidData = $viewObj->getLookUpdata($oldSubmissionRow['BidSituationLookupId']);
            $newBidData = $viewObj->getLookUpdata($postedValues['bid_situation']);
            $historyArray['FieldName'][] = 'Bid Situation';
            $historyArray['OldValue'][] = $oldBidData;
            $historyArray['NewValue'][] = $newBidData;
        }
        if ($oldSubmissionRow['TotalInsuredValue'] != $postedValues['edittotalinsuredvalue']) {
            $historyArray['FieldName'][] = 'Total Insured Value';
            $historyArray['OldValue'][] = $oldSubmissionRow['TotalInsuredValue'];
            $historyArray['NewValue'][] = $postedValues['edittotalinsuredvalue'];
        }
        if ($oldSubmissionRow['BrokerContactPerson'] != $postedValues['broker_contact_person']) {
            $historyArray['FieldName'][] = 'Broker Contact Person';
            $historyArray['OldValue'][] = $oldSubmissionRow['BrokerContactPerson'];
            $historyArray['NewValue'][] = $postedValues['broker_contact_person'];
        }
        if ($oldSubmissionRow['BrokerContactPersonEmail'] != $postedValues['broker_contact_person_email']) {
            $historyArray['FieldName'][] = 'Broker Contact Person’s Email';
            $historyArray['OldValue'][] = $oldSubmissionRow['BrokerContactPersonEmail'];
            $historyArray['NewValue'][] = $postedValues['broker_contact_person_email'];
        }
        if ($oldSubmissionRow['BrokerContactPersonNumber'] != $postedValues['borker_contact_peson_number']) {
            $historyArray['FieldName'][] = 'Broker Contact Person’s Number';
            $historyArray['OldValue'][] = $oldSubmissionRow['BrokerContactPersonNumber'];
            $historyArray['NewValue'][] = $postedValues['borker_contact_peson_number'];
        }
        if ($oldSubmissionRow['ReasonCodeId'] != $postedValues['reason_code']) {
            $historyArray['FieldName'][] = 'Reason Code';
            $historyArray['OldValue'][] = $oldSubmissionRow['ReasonCodeId'];
            $historyArray['NewValue'][] = $postedValues['reason_code'];
        }
        if (date("Y-m-d", strtotime($oldSubmissionRow['ProcessDate'])) != date("Y-m-d", strtotime($postedValues['processdate']))) {
            $historyArray['FieldName'][] = 'Process Date';
            $historyArray['OldValue'][] = date("Y-m-d", strtotime($oldSubmissionRow['ProcessDate']));
            $historyArray['NewValue'][] = date("Y-m-d", strtotime($postedValues['processdate']));
        }
        if ($oldSubmissionRow['GrossPremium'] != $postedValues['gross_premium']) {
            $historyArray['FieldName'][] = 'Gross Premium';
            $historyArray['OldValue'][] = $oldSubmissionRow['GrossPremium'];
            $historyArray['NewValue'][] = $postedValues['gross_premium'];
        }
        if ($oldSubmissionRow['Limit'] != $postedValues['limit']) {
            $historyArray['FieldName'][] = 'Limit';
            $historyArray['OldValue'][] = $oldSubmissionRow['Limit'];
            $historyArray['NewValue'][] = $postedValues['limit'];
        }
        if ($oldSubmissionRow['AttachmentPoint'] != $postedValues['attachment_point']) {
            $historyArray['FieldName'][] = ' 	Attachment Point';
            $historyArray['OldValue'][] = $oldSubmissionRow['AttachmentPoint'];
            $historyArray['NewValue'][] = $postedValues['attachment_point'];
        }

        for ($i = 0, $j = 0, $k = 0; $i < count($historyArray['FieldName']), $j < count($historyArray['OldValue']), $k < count($historyArray['NewValue']); $i++, $j++, $k++) {
            $historyquery = "Insert INTO SubmissionHistory 
              (SubmissionId, Field, OldValue, NewValue, Remarks, ModifiedBy, ModifiedOn) 
               VALUES 
               ('" . $submissionId . "','" . $historyArray['FieldName'][$i] . "','" . $historyArray['OldValue'][$j] . "','" . $historyArray['NewValue'][$k] . "', '" . $remarks . "', '" . $userId . "', GETDATE())";
            $insert = $con->prepare($historyquery);
            $insert->execute();
        }
    }

    public function insertInSubmissionHistory($historyArray, $userId, $submissionId) {
        $con = Propel::getConnection();
        $historyquery = "INSERT INTO SubmissionHistory 
              (SubmissionId, Field, OldValue, NewValue, Remarks, ModifiedBy, ModifiedOn) 
               VALUES 
               ('" . $submissionId . "','" . $historyArray['field'] . "','" . $historyArray['oldValue'] . "','" . $historyArray['newValue'] . "','" . $remarks . "', '" . $userId . "', GETDATE())";
        $insert = $con->prepare($historyquery);
        $insert->execute();
    }

    public function UpdateSubmissionDetails($postedValues, $userId, $submissionId) {
        
        $obj = new SubmissionDetails();
        $newSubmissionNo = trim($postedValues['submissionNumber']);
        $newRenewalLookUpId = trim($postedValues['newrenewal']);
        $underWritterId = trim($postedValues['editunderwriter']);
        $product = $obj->getLobList($postedValues['editproductline']);
        $productLineId = $product[0]['Id'];
        $propductLineSubTypeId = $postedValues['editproductlinesubtype'];
        $sectionId = $postedValues['editsection'];

        if (isset($postedValues['yesTrue'])) {
            $postedValues['yesTrue'] = $postedValues['yesTrue'];
        } else {
            $postedValues['yesTrue'] = 'N';
        }

        if (isset($postedValues['yesBroker'])) {
            $postedValues['yesBroker'] = $postedValues['yesBroker'];
        } else {
            $postedValues['yesBroker'] = 'N';
        }

        if (isset($postedValues['yesIndia'])) {
            $postedValues['yesIndia'] = $postedValues['yesIndia'];
        } else {
            $postedValues['yesIndia'] = 'N';
        }

        if (isset($postedValues['yesGross'])) {
            $postedValues['yesGross'] = $postedValues['yesGross'];
        } else {
            $postedValues['yesGross'] = 'N';
        }

        if (isset($postedValues['yesLimit'])) {
            $postedValues['yesLimit'] = $postedValues['yesLimit'];
        } else {
            $postedValues['yesLimit'] = 'N';
        }

        if (isset($postedValues['yesAttachment'])) {
            $postedValues['yesAttachment'] = $postedValues['yesAttachment'];
        } else {
            $postedValues['yesAttachment'] = 'N';
        }

        if (!empty($postedValues['editprofitcode'])) {
            $profitCodeId = $postedValues['editprofitcode'];
        } else {
            $profitCodeId = null;
        }
        $primaryStatus = $postedValues['editprimarystatus'];
        $effectiveDate = date("Y-m-d", strtotime($postedValues['effectiveDate']));
        $expiryDate = date("Y-m-d", strtotime($postedValues['expityDate']));
        if (!empty($postedValues['insuredId'])) {
            $insuredId = $postedValues['insuredId'];
        } else {
            $insuredId = null;
        }
        $isDifferentDba = $postedValues['insured_name_status'];
        if (!empty($postedValues['insured_address_status'])) {
            $isDifferentMailingAddress = $postedValues['insured_address_status'];
        } else {
            $isDifferentMailingAddress = null;
        }
        if ($isDifferentDba == 'Y') {
            $dbaName = $postedValues['dbaName'];
        } else {
            $dbaName = null;
        }
        $dbNumber = $postedValues['db_number'];
        $cabCompaniesLookupId = $postedValues['editcabcompanies'];
        if (!empty($postedValues['reinsured_company'])) {
            $reinsuredCompany = $postedValues['reinsured_company'];
        } else {
            $reinsuredCompany = null;
        }

        if (!empty($postedValues['editsubmissiontypeidrntifier'])) {
            $submissionTypeIdentifier = $postedValues['editsubmissiontypeidrntifier'];
        } else {
            $submissionTypeIdentifier = null;
        }

        if (!empty($postedValues['edittotalinsuredvalue'])) {
            $totalInsuredValue = $postedValues['edittotalinsuredvalue'];
        } elseif (!empty($postedValues['total_insured_value_select'])) {
            $totalInsuredValue = $postedValues['total_insured_value_select'];
        } else {
            $totalInsuredValue = null;
        }

        $brokerWiseCityId = $postedValues['brokerCityCode'];
        if (!empty($postedValues['broker_contact_person'])) {
            $brokerContactPerson = $postedValues['broker_contact_person'];
        } else {
            $brokerContactPerson = null;
        }

        if (!empty($postedValues['broker_contact_person_email'])) {
            $brokerContactPersonEmail = $postedValues['broker_contact_person_email'];
        } else {
            $brokerContactPersonEmail = null;
        }

        if (!empty($postedValues['borker_contact_peson_number'])) {
            $brokerContactPersonNumber = $postedValues['borker_contact_peson_number'];
        } else {
            $brokerContactPersonNumber = null;
        }

        $BrokerCode = $postedValues['broker_code'];

        if (!empty($postedValues['received_date_by_berkshire'])) {
            $byBerkSi = date("Y-m-d H:i:s", strtotime($postedValues['received_date_by_berkshire']));
        } else {
            $byBerkSi = null;
        }
        if (!empty($postedValues['received_date_by_india'])) {
            $byIndia = date("Y-m-d", strtotime($postedValues['received_date_by_india']));
        } else {
            $byIndia = null;
        }

        $qcStatus = $obj->getLookUpTypeList('QCStatus');
        $qcStatusId = $qcStatus[0]['Id'];
        if (!empty($postedValues['branch_office'])) {
            $branchId = $obj->getBranchId($postedValues['branch_office']);
        } else {
            $branchId = null;
        }


        $alternative = $postedValues['alternativeAddressId'];
        $mailingAddressArray = array();
        $mailingAddressArray['address1'] = $postedValues['altAddressLine1'];
        $mailingAddressArray['cityId'] = $postedValues['altCity'];
        $mailingAddressArray['zipcode'] = $postedValues['altZipCode'];
        if (empty($alternative)) {
            $alternativeId = $obj->insertIntoAddress($mailingAddressArray);
        } else {
            $alternativeId = $postedValues['alternativeAddressId'];
            $this->UpdateAddressDetails($mailingAddressArray, $alternativeId);
        }

        $projrctArray = array();
        if (!empty($postedValues['project_name'])) {
            $projrctArray['projectName'] = $postedValues['project_name'];
        } else {
            $projrctArray['projectName'] = null;
        }

        if (!empty($postedValues['general_contrator_name'])) {
            $projrctArray['generalContractorName'] = $postedValues['general_contrator_name'];
        } else {
            $projrctArray['generalContractorName'] = null;
        }

        if (!empty($postedValues['project_owner_name'])) {
            $projrctArray['projectOwnerName'] = $postedValues['project_owner_name'];
        } else {
            $projrctArray['projectOwnerName'] = null;
        }

        if (!empty($postedValues['project_street_address'])) {
            $projrctArray['address1'] = $postedValues['project_street_address'];
        } else {
            $projrctArray['address1'] = null;
        }

        if (!empty($postedValues['project_street_address'])) {
            $projrctArray['address1'] = $postedValues['project_street_address'];
        } else {
            $projrctArray['address1'] = null;
        }

        if (!empty($postedValues['project_country'])) {
            $projrctArray['countryName'] = $obj->GetCountryById($postedValues['project_country']);
        } else {
            $projrctArray['countryName'] = null;
        }

        if (!empty($postedValues['project_state'])) {
            $projrctArray['stateName'] = $obj->GetStateById($postedValues['project_state']);
        } else {
            $projrctArray['stateName'] = null;
        }

        if (!empty($postedValues['project_city'])) {
            $projrctArray['cityName'] = $obj->GetCityById($postedValues['project_city']);
        } else {
            $projrctArray['cityName'] = null;
        }
        $projrctArray['zipcode'] = null;
        $projrctArray['projectBidSituationLookupId'] = $postedValues['bid_situation'];

        if (empty($postedValues['businessDependentDetailsId'])) {
            if ($postedValues['project_name'] || $postedValues['general_contrator_name'] || $postedValues['project_owner_name'] || $postedValues['project_street_address'] || $postedValues['project_country'] || $postedValues['project_state'] || $postedValues['project_city']) {
                $businessDependentDetailsId = $obj->insertBusinessDependentDetails($projrctArray);
            }
        } else {
            $businessDependentDetailsId = $postedValues['businessDependentDetailsId'];
            $this->UpdateBusinessDependentDetails($projrctArray, $businessDependentDetailsId);
        }

        $statusArray = array();
        if (!empty($postedValues['reason_code'])) {
            $statusArray['reasonCodeId'] = $postedValues['reason_code'];
        } else {
            $statusArray['reasonCodeId'] = null;
        }

        if (!empty($postedValues['processdate'])) {
            $statusArray['processDate'] = $postedValues['processdate'];
        } else {
            $statusArray['processDate'] = null;
        }

        if (!empty($postedValues['gross_premium_text'])) {
            $statusArray['grossPremium'] = $postedValues['gross_premium_text'];
        } elseif (!empty($postedValues['gross_premium_select'])) {
            $statusArray['grossPremium'] = $postedValues['gross_premium_select'];
        } else {
            $statusArray['grossPremium'] = null;
        }

        if (!empty($postedValues['limit_text'])) {
            $statusArray['limit'] = $postedValues['limit_text'];
        } elseif (!empty($postedValues['limit_select'])) {
            $statusArray['limit'] = $postedValues['limit_select'];
        } else {
            $statusArray['limit'] = null;
        }

        if (!empty($postedValues['attachment_point_text'])) {
            $statusArray['attachment'] = $postedValues['attachment_point_text'];
        } elseif (!empty($postedValues['attachment_point_select'])) {
            $statusArray['attachment'] = $postedValues['attachment_point_select'];
        } else {
            $statusArray['attachment'] = null;
        }

        if (empty($postedValues['statusDependentDetailsId'])) {
            if ($postedValues['reason_code'] || $postedValues['processdate'] || $postedValues['gross_premium_text'] || $postedValues['limit_text'] || $postedValues['attachment_point_text'] || $postedValues['gross_premium_select'] || $postedValues['attachment_point_select']) {
                $statusDependentDetailsId = $this->InsertStatusDepdentDetails($statusArray);
            }
        } else {
            $statusDependentDetailsId = $postedValues['statusDependentDetailsId'];
            $this->UpdateStatusDepdentDetails($statusArray, $statusDependentDetailsId);
        }

        $dataRecorderId = $postedValues['dataRecorderId'];
        if ($postedValues['dataRecorderId']) {
            $this->UpdateDataRecorderMetaData($dataRecorderId, $userId);
        }

        $con = Propel::getConnection();
        $query = "UPDATE Submission SET SubmissionNumber = '" . $newSubmissionNo . "', NewRenewalLookupId = '" . $newRenewalLookUpId . "', UnderwriterId = '" . $underWritterId . "',LobId = '" . $productLineId . "', LobSubTypeId = '" . $propductLineSubTypeId . "', SectionId = '" . $sectionId . "', ProfitCodeId = '" . $profitCodeId . "', CurrentStatusId = " . $primaryStatus . ",EffectiveDate = '" . $effectiveDate . "', ExpiryDate = '" . $expiryDate . "', InsuredId = '" . $insuredId . "', IsDifferentDba = '" . $isDifferentDba . "', IsDifferentMaillingAddress = '" . $isDifferentMailingAddress . "', DbaName = '" . $dbaName . "', AlternativeAddressId = '" . $alternativeId . "', DBNumber = '" . $dbNumber . "', CABCompaniesLookupId = '" . $cabCompaniesLookupId . "', ReinsuredCompany = '" . $reinsuredCompany . "', SubmissionIdentifier = '" . $submissionTypeIdentifier . "', BusinessDependentDetailId = '" . $businessDependentDetailsId . "', TotalInsuredValue = '" . $totalInsuredValue . "', BrokerWiseCityId = '" . $brokerWiseCityId . "', BrokerContactPerson = '" . $brokerContactPerson . "', BrokerContactPersonEmail = '" . $brokerContactPersonEmail . "', BrokerContactPersonNumber = '" . $brokerContactPersonNumber . "', BrokerCode = '" . $BrokerCode . "', StatusDependentDetailsId = '" . $statusDependentDetailsId . "', BerkSIDateFromBroker = '" . $byBerkSi . "', BerkSiDateFromIndia = '" . $byIndia . "', BranchId = '" . $branchId . "', QCStatus = '" . $qcStatusId . "', DataRecorderMetaDataId = '" . $dataRecorderId . "', IsTotalInsuredValue = '" . $postedValues['yesTrue'] . "', IsBerksiBroker = '".$postedValues['yesBroker']."', IsBerksiIndia = '".$postedValues['yesIndia']."', IsGrossPremium = '".$postedValues['yesGross']."', IsLimit = '".$postedValues['yesLimit']."', IsAttachmentPoint = '".$postedValues['yesAttachment']."' Where Id = $submissionId";
        $insert = $con->prepare($query);
        if ($insert->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public function UpdateBusinessDependentDetails($projrctArray, $businessDependentDetailsId) {
        $con = Propel::getConnection();
        $query = "UPDATE  BusinessDependentDetail SET ProjectName = '" . $projrctArray['projectName'] . "' , ProjectGeneralContractorName = '" . $projrctArray['generalContractorName'] . "' ,ProjectOwnerName = '" . $projrctArray['projectOwnerName'] . "', ProjectCity = '" . $projrctArray['cityName'] . "',BidSituation = '" . $projrctArray['projectBidSituationLookupId'] . "', ProjectState = '" . $projrctArray['stateName'] . "', ProjectCountry = '" . $projrctArray['countryName'] . "', ProjectAddress = '" . $projrctArray['address1'] . "'  WHERE Id = '" . $businessDependentDetailsId . "'";
        $insert = $con->prepare($query);
        $insert->execute();
    }

    public function UpdateAddressDetails($mailingAddressArray, $alternativeId) {
        $con = Propel::getConnection();
        $query = "UPDATE Address SET AddressLine1 = '" . $mailingAddressArray['address1'] . "',  CityId = '" . $mailingAddressArray['cityId'] . "', Zip = '" . $mailingAddressArray['zipcode'] . "' WHERE Id = '" . $alternativeId . "'";
        $insert = $con->prepare($query);
        $insert->execute();
    }

    public function UpdateDataRecorderMetaData($dataRecorderId, $userId) {
        $con = Propel::getConnection();
        $query = "UPDATE DataRecorderMetaData SET ModifiedBy = '" . $userId . "', ModifiedOn = GETDATE() WHERE Id = '" . $dataRecorderId . "'";
        $insert = $con->prepare($query);
        $insert->execute();
    }

    public function UpdateStatusDepdentDetails($statusArray, $statusDependentDetailsId) {
        $con = Propel::getConnection();
        $query = "UPDATE StatusDependentDetails SET ReasonCodeId = '" . $statusArray['reasonCodeId'] . "', ProcessDate = '" . $statusArray['processDate'] . "', GrossPremium = '" . $statusArray['grossPremium'] . "', Limit = '" . $statusArray['limit'] . "', AttachmentPoint = '" . $statusArray['attachment'] . "' WHERE Id = " . $statusDependentDetailsId . "";
        $insert = $con->prepare($query);
        if ($insert->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public function InsertStatusDepdentDetails($statusArray) {
        $con = Propel::getConnection();
        $query = "INSERT INTO  StatusDependentDetails 
              (ReasonCodeId, ProcessDate, GrossPremium, Limit, AttachmentPoint) 
               VALUES 
               ('" . $statusArray['reasonCodeId'] . "','" . $statusArray['processDate'] . "','" . $statusArray['grossPremium'] . "' ,'" . $statusArray['limit'] . "', '" . $statusArray['attachment'] . "')";
        $insert = $con->prepare($query);
        if ($insert->execute()) {
            $STH = $con->query("SELECT CAST(COALESCE(SCOPE_IDENTITY(), @@IDENTITY) AS int)");
            $STH->execute();
            $result = $STH->fetch();
            $statusId = $result[0];
        }
        return $statusId;
    }

    public function FetchSubmissionDetails($submission) {
        $connection = $this->connection;
        $submissionQuery = "SELECT h.* FROM  submission AS h
            WHERE h.Id = '" . $submission . "'
            ";
        $submissionStatement = $connection->prepare($submissionQuery);
        $submissionStatement->execute();
        $submissionRecordData = $submissionStatement->fetchAll(PDO::FETCH_ASSOC);
        return $submissionRecordData;
    }

    public function FetchAddressDetails($submission) {
        $connection = $this->connection;
        $submissionAddressQuery = "SELECT A.Id AS AddressId, A.AddressLine1 AS AddressLine1, A.Zip AS Zip, C.Id AS CityId, C.CityFullCode, S.Id AS StateId, S.FullCode, Co.Id AS CounrtyId, Co.InsuredCountry FROM  Address as A LEFT JOIN City as C ON A.CityId = C.Id LEFT JOIN State As S On C.StateId = S.Id LEFT JOIN Country as Co on S.CountryId = Co.Id WHERE A.Id = '" . $submission . "'";
        $submissionAddressStatement = $connection->prepare($submissionAddressQuery);
        $submissionAddressStatement->execute();
        $submissionAddressData = $submissionAddressStatement->fetchAll(PDO::FETCH_ASSOC);
        return $submissionAddressData;
    }

    public function FetchBrokerType($BrokerCode) {
        $connection = $this->connection;
        $submissionQuery = "SELECT L.Alias From Broker AS B LEFT JOIN Lookup AS L on B.BrokerTypeId = L.Id WHERE B.BrokerCode = '" . $BrokerCode . "'";
        $submissionAddressStatement = $connection->prepare($submissionQuery);
        $submissionAddressStatement->execute();
        $submissionData = $submissionAddressStatement->fetchAll(PDO::FETCH_ASSOC);
        return $submissionData;
    }

    public function FetchState() {
        $connection = $this->connection;
        $statesQuery = "SELECT * FROM State";
        $statesStatement = $connection->prepare($statesQuery);
        $statesStatement->execute();
        $statesData = $statesStatement->fetchAll(PDO::FETCH_ASSOC);
        return $statesData;
    }

    public function FetchCity() {
        $connection = $this->connection;
        $citesQuery = "SELECT * FROM CITY";
        $citesStatement = $connection->prepare($citesQuery);
        $citesStatement->execute();
        $citesData = $citesStatement->fetchAll(PDO::FETCH_ASSOC);
        return $citesData;
    }

    public function FetchInsuredDetails($insuredId) {
        $connection = $this->connection;
        if (empty($insuredId)) {
            $insuredQuery = "SELECT I.Id as InsuredId, I.InsuredName, I.AddressLine1 as Address, I.Zip, I.City as City, I.State as StateName, I.Country as InsuredCountry FROM Insured as I";
        } else {
            $insuredQuery = "SELECT I.Id as InsuredId, I.InsuredName, I.AddressLine1 as Address, I.Zip, I.City as City, I.State as StateName, I.Country as InsuredCountry FROM Insured as I WHERE I.Id = '" . $insuredId . "' ; ";
        }
        $insuredStatement = $connection->prepare($insuredQuery);
        $insuredStatement->execute();
        $insuredData = $insuredStatement->fetchAll(PDO::FETCH_ASSOC);
        return $insuredData;
    }

    public function FetchBusinessDependentDetails($businessDependentDetailsId) {
        $connection = $this->connection;
        $businessQuery = "SELECT * FROM BusinessDependentDetail WHERE Id = '" . $businessDependentDetailsId . "' ; ";
        $businessStatement = $connection->prepare($businessQuery);
        $businessStatement->execute();
        $businessData = $businessStatement->fetchAll(PDO::FETCH_ASSOC);
        $finalBusinessData = array();
        $finalBusinessData['Id'] = $businessData[0]['Id'];
        $finalBusinessData['ProjectName'] = $businessData[0]['ProjectName'];
        $finalBusinessData['ProjectGeneralContractorName'] = $businessData[0]['ProjectGeneralContractorName'];
        $finalBusinessData['ProjectOwnerName'] = $businessData[0]['ProjectOwnerName'];
        $finalBusinessData['ProjectAddress'] = $businessData[0]['ProjectAddress'];
        $finalBusinessData['BidSituation'] = $businessData[0]['BidSituation'];
        $finalBusinessData['ProjectCountry'] = $this->getCountryId($businessData[0]['ProjectCountry']);
        $finalBusinessData['ProjectState'] = $this->getStateId($businessData[0]['ProjectState']);
        $finalBusinessData['ProjectCity'] = $this->getCityId($businessData[0]['ProjectCity']);
        return $finalBusinessData;
    }

    public function getCountryId($countryName) {
        $con = Propel::getConnection();
        $qry = "SELECT Id FROM Country WHERE InsuredCountry LIKE " . "'$countryName'";
        $stmt = $con->query($qry);
        $result = $stmt->fetchAll();
        $countryId = $result[0]['Id'];
        return $countryId;
    }

    public function getStateId($stateName) {
        $con = Propel::getConnection();
        $qry = "SELECT Id FROM State WHERE FullCode LIKE " . "'$stateName'";
        $stmt = $con->query($qry);
        $result = $stmt->fetchAll();
        $countryId = $result[0]['Id'];
        return $countryId;
    }

    public function getCityId($cityName) {
        $con = Propel::getConnection();
        $qry = "SELECT Id FROM City WHERE CityFullCode LIKE " . "'$cityName'";
        $stmt = $con->query($qry);
        $result = $stmt->fetchAll();
        $countryId = $result[0]['Id'];
        return $countryId;
    }

    public function FetchBusinessStatusDetails($statusId) {
        $connection = $this->connection;
        $businessQuery = "SELECT * FROM StatusDependentDetails WHERE Id = '" . $statusId . "' ; ";
        $businessStatement = $connection->prepare($businessQuery);
        $businessStatement->execute();
        $businessData = $businessStatement->fetchAll(PDO::FETCH_ASSOC);
        return $businessData;
    }

    public function FetchSubmissionBranch($branchId) {
        $connection = $this->connection;
        $submissionBranchQuery = "SELECT * FROM Branch Where Id = '$branchId'";
        $submissionBranchStatement = $connection->prepare($submissionBranchQuery);
        $submissionBranchStatement->execute();
        $submissionBranchData = $submissionBranchStatement->fetchAll(PDO::FETCH_ASSOC);
        return $submissionBranchData;
    }

    public function FetchCurrentStatus() {
        $connection = $this->connection;
        $productQuery = "SELECT * FROM  Status";
        $productStatement = $connection->prepare($productQuery);
        $productStatement->execute();
        $productData = $productStatement->fetchAll(PDO::FETCH_ASSOC);
        return $productData;
    }

    public function FetchHistoryDetails($submissionId) {
        $con = Propel::getConnection();
        $qry = "SELECT TOP 1 Remarks FROM SubmissionHistory WHERE SubmissionId = '$submissionId' order by Id DESC";
        $stmt = $con->query($qry);
        $result = $stmt->fetchAll();
        return $result;
    }

    public function FetchDataRecorderType($dataRecorderId) {
        $connection = $this->connection;
        $productQuery = "SELECT * FROM DataRecorderMetaData Where Id = '$dataRecorderId'";
        $productStatement = $connection->prepare($productQuery);
        $productStatement->execute();
        $productData = $productStatement->fetchAll(PDO::FETCH_ASSOC);
        return $productData;
    }

    public function FetchReasonCode($statusId) {
        $connection = $this->connection;
        $reasonQuery = "SELECT * FROM ReasonCode Where StatusId = '$statusId' OR Meaning is null";
        $reasonStatement = $connection->prepare($reasonQuery);
        $reasonStatement->execute();
        $reasonData = $reasonStatement->fetchAll(PDO::FETCH_ASSOC);
        if (empty($reasonData)) {
            $reasonData['error'] = "No record Found";
        }
        return $reasonData;
    }

    public function FetchSubmissionIdentifier() {
        $connection = $this->connection;
        $reasonQuery = "SELECT * FROM SubmissionTypeIndicator";
        $reasonStatement = $connection->prepare($reasonQuery);
        $reasonStatement->execute();
        $submissionData = $reasonStatement->fetchAll(PDO::FETCH_ASSOC);
        return $submissionData;
    }

    public function getBroker($token = 0) {
        if ($token == 0) {
            $where = 1;
        } else {
            $where = "BROKER_CODE = '" . $token . "'";
        }
        $con = Propel::getConnection();
        $query = "SELECT BROKER_ID, BROKER_CODE AS code, BROKER_NAME AS name, BROKER_TYPE AS cat, SUBTYPE_OF_BROKER  FROM BROKER_DETAIL WHERE " . $where . ";";
        $stmt = $con->query($query);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $result;
    }

}